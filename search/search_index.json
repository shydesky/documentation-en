{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Tron-overview/","text":"1. Project Repository Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the definition of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf 2. SRs and Committee 2.1 How to Become a Super Representative In TRON network, any account can apply to become a super representative candidate. Every account can vote for super representative candidates. The top 27 candidates with the most votes are the super representatives. Super representatives can produce blocks. The votes will be counted every 6 hours, so super representatives may also change every 6 hours. To prevent vicious attack, TRON network burns 9999 TRX from the account that applies to become a super representative candidate. 2.2 Super Representatives Election To vote, you need to have TRON Power(TP). To get TRON Power, you need to freeze TRX. Every 1 frozen TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unfreeze your frozen TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): freezebalance 10,000,000 3 // Freeze 10 TRX to get 10 TRON Power(TP) votewitness witness1 4 witness2 6 // Vote 4 votes for witness1, 6 votes for witness2 votewitness witness1 3 witness2 7 // Vote 3 votes for witness1, 7 votes for witness2 The final output above is: Vote 3 votes for witness1, 7 votes for witness2 2.3 Reward for Super Representatives Votes Reward: Every 6 hours, the top 127 super representative candidates with the most votes will share a total amount of 115,200 TRX according to their votes percentage. The annual votes reward is 168,192,000 TRX in total. Block Producing Reward: Every time after a super representative produces a block, it will be reward 32 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 336,384,000 TRX in total. Every time after a super representative produces a block, the 32 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours. 2.4 Committee 2.4.1 What is Committee Committee can modify the TRON network parameters, like transaction fees, block producing reward amount, etc. Committee is composed of the current 27 super representatives. Every super representative has the right to start a proposal. The proposal will be passed after it gets more than 19 approves from the super representatives and will become valid in the next maintenance period. 2.4.2 Create a Proposal Only the account of a super representative can create a proposal. The network parameters can be modified([min,max]): 0: MAINTENANCE_TIME_INTERVAL, [3 * 27* 1000, 24 * 3600 * 1000] //super representative votes count time interval, currently 6 * 3600 * 1000 ms 1: ACCOUNT_UPGRADE_COST, [0, 100 000 000 000 000 000] //the fee to apply to become a super representative candidate, currently 9999_000_000 SUN 2: CREATE_ACCOUNT_FEE, [0, 100 000 000 000 000 000] //the fee to create an account, currently 100_000 SUN 3: TRANSACTION_FEE, [0, 100 000 000 000 000 000] //the fee for bandwidth, currently 10 SUN/byte 4: ASSET_ISSUE_FEE, [0, 100 000 000 000 000 000] //the fee to issue an asset, currently 1024_000_000 SUN 5: WITNESS_PAY_PER_BLOCK, [0, 100 000 000 000 000 000] //the block producing reward, currently 32_000_000 SUN 6: WITNESS_STANDBY_ALLOWANCE, [0, 100 000 000 000 000 000] //the votes reward for top 127 super representative candidates, currently 115_200_000_000 SUN 7: CREATE_NEW_ACCOUNT_FEE_IN_SYSTEM_CONTRACT, //the fee to create an account in system, currently 0 SUN 8: CREATE_NEW_ACCOUNT_BANDWIDTH_RATE, //the consumption of bandwidth or TRX while creating an account, using together with #7 9: ALLOW_CREATION_OF_CONTRACTS, //to enable the VM 10: REMOVE_THE_POWER_OF_THE_GR, //to clear the votes of GR 11: ENERGY_FEE, [0,100 000 000 000 000 000] //SUN 12: EXCHANGE_CREATE_FEE, [0, 100 000 000 000 000 000] //SUN 13: MAX_CPU_TIME_OF_ONE_TX, [0, 1000] //ms 14: ALLOW_UPDATE_ACCOUNT_NAME, //to allow users to change account name and allow account duplicate name, currently 0, means false 15: ALLOW_SAME_TOKEN_NAME, //to allow create a token with duplicate name, currently 1, means true 16: ALLOW_DELEGATE_RESOURCE, //to enable the resource delegation 17: TOTAL_ENERGY_LIMIT, //to modify the energy limit 18: ALLOW_TVM_TRANSFER_TRC10, //to allow smart contract to transfer TRC-10 token, currently 0, means false Example (Using wallet-cli): createproposal id value id: the serial number (0 ~ 18) value: the parameter value Note: In TRON network, 1 TRX = 1000_000 SUN 2.4.3 Vote for a Proposal Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): approveProposal id is_or_not_add_approval id: proposal id is_or_not_add_approval: YES vote or cancel YES vote 2.4.4 Cancel Proposal Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): deleteProposal id id: proposal id 2.4.5 Query Proposal Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more api detail, please refer to Tron-http 3. Account Model 3.1 Introduction TRON uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like TRX balance, tokens balance, bandwidth, etc. TRX and tokens can be transferred from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a super representative candidate, vote, etc. All TRON's activities are based on account. 3.2 How to Create an Account 1. Use a wallet to generate the address and private key. To activate the account, you need to transfer TRX or transfer token to the new created account. generate an account 2. Use an account already existed in TRON network to create an account 3.3 Key-pair Generation Algorithm Tron signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random bumber, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then calculate P = d * G as the public key, G is the elliptic curve base point. 3.4 Address Format Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address comes out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 calculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. Character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" 3.5 Signature Signature introduction, please refer to: https://github.com/tronprotocol/Documentation/blob/fix_http/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E4%BA%A4%E6%98%93%E7%AD%BE%E5%90%8D%E6%B5%81%E7%A8%8B.md 4. Network Node 4.1 SuperNode 4.1.1 SuperNode Introduction Super Representative(abbr: SR) is the block producer in TRON network, there are 27 SR. They verify the transactions and write the transactions into the blocks, they take turns to produce blocks. The super Representatives' information is public to everyone in TRON network. The best way to browse is using tronscan . 4.1.2 SuperNode Deployment SuperNode Deployment 4.1.3 Recommended Hardware Configuration minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.2 FullNode 4.2.1 FullNode Introduction FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service. 4.2.2 FullNode Deployment please refer to TRON-Deployment 4.2.3 Recommended Hardware Configuration Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.3 SolidityNode 4.3.1 SolidityNode Introduction SolidityNode only synchronize solidified blocks data from the fullNode it specifies, It also provie api service. 4.3.2 SolidityNode Deployment Please refer to TRON-Deployment 4.3.3 Recommended Hardware Configuration Minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T 4.4 TRON Network Instructure TRON network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: SuperNode, FullNode, SolidityNode. SuperNode produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-tron code can join TRON network as a node. 4.5 FullNode and SolidityNode Fast Deployment Download fast deployment script, run the script according to different types of node. please refer to Node Fast Deployment 4.6 MainNet, TestNet, PrivateNet MainNet, TestNet, PrivateNet all use the same code, only the node start configuration varies. 4.6.1 MainNet MainNet configuration 4.6.2 TestNet TestNet configuration 4.6.3 PrivateNet 4.6.3.1 Preconditions at least two accounts generate an account at least deploy one SuperNode to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions SuperNode and FullNode comprise the private network 4.6.3.2 Deployment 4.6.3.2.1 Step 1: SuperNode Deployment 1. download private_net_config.conf wget https://github.com/tronprotocol/tron-deployment/blob/master/private_net_config.conf 2. add your private key in localwitness 3. set genesis.block.witnesses as the private key's corresponding address 4. set p2p.version, any positive integer but 11111 5. set the first SR needSyncCheck = false, others can be set true 6. set node.discovery.enable = true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command line parameters introduction: --witness: start witness function, i.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: localwitness: witnesses: version: enable: 4.6.3.2.2 Step 2: FullNode Deployment 1. Download private_net_config.conf wget https://github.com/tronprotocol/tron-deployment/blob/master/private_net_config.conf 2. set seed.node ip.list with SR's ip and port 3. set p2p.version the same as SuperNode's p2p.version 4. set genesis.block the same as genesis.block 5. set needSyncCheck true 6. set node.discovery.enable true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command lines parameters --witness: start witness function\uff0ci.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable: 4.7 DB Engine 4.7.1 Rocksdb 4.7.1.1 Configuration Use rocksdb as the data storage engine, need to set db.engine to \"ROCKSDB\" Note: rocksdb only support db.version=2, do not support db.version=1 The optimization parameters rocksdb support: 4.7.1.2 Use rocksdb's data backup function Choose rocksdb to be the data storage engine, you can use it's data backup function while running Note: FullNode can use data backup function. In order not to affect SuperNode's block producing performance, SuperNode does not support backup service, but SuperNode's backup service node can use this function. 4.7.1.3 Convert leveldb data to rocksdb data The data storage structure of leveldb and rocksdb is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert leveldb data to rocksdb data. Usage: cd to the source code root directory ./gradlew build #build the source code java -jar build/libs/DBConvert.jar #run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: nohup java -jar FullNode.jar -d your_database_dir & Then, you should run DBConvert.jar this way: java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path \u548c dst_db_path . Example: cp -rf output-directory /tmp/output-directory cd /tmp java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. 4.7.1.4 rocksdb vs leveldb You can refer to: rocksdb vs leveldb ROCKSDB vs LEVELDB 5. Smart Contract 5.1 TRON Smart Contract Introduction Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can run in the way it is designed. TRON smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically. 5.2 TRON Smart Contract Features TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features. 5.2.1 Smart Contract TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; } message Param { bool indexed = 1; string name = 2; string type = 3; // SolidityType type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7\uff1b int64 origin_energy_limit = 8; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: TRX transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_energy_limit: energy consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contracts. 5.2.2 The Usage of the Function of Smart Contract 1. constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while being called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. 2. message calls Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used. 3. delegate call/call code/libary There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically load code from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. 4. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the definition of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. 5. built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 1\uff09TVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2\uff09Different accounts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 3\uff09SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 4\uff09SuperNode approves or disapproves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 5\uff09SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 6\uff09SuperNode deletes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 7\uff09TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 8\uff09TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 9\uff09Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 10\uff09Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 11\uff09Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160. 5.2.3 Contract Address Using in Solidity Language Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes. 1. address conversion Need to convert TRON's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) tron address to solidity address type * @param tronAddress uint256 tronAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromTronInt(uint256 tronAddress) public view returns(address){ return address(tronAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. 2. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address tronAddress) public view returns (uint256){ // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c 3. variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8). 5.2.4 The Special Constants Differ from Ethereum Currency Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract. Block block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded block.coinbase (address): SuperNode address that produced the current block block.difficulty (uint): current block difficulty, not recommended, set 0 block.gaslimit (uint): current block gas limit, not supported, set 0 block.number (uint): current block number block.timestamp (uint): current block timestamp gasleft() returns (uint256): remaining gas msg.data (bytes): complete call data msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft() msg.sender (address): message sender (current call) msg.sig (bytes4): first 4 bytes of call data (function identifier) msg.value (uint): the amount of SUN send with message now (uint): current block timestamp (block.timestamp) tx.gasprice (uint): the gas price of transaction, not recommended, set 0 tx.origin (address): transaction initiator 5.3 Energy Introduction Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource. 5.3.1 How to Get Energy Freeze TRX to get energy. Example (Using wallet-cli): freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] Freeze TRX to get energy, energy obtained = user's TRX frozen amount / total amount of frozen TRX in TRON * 50_000_000_000. Example: If there are only two users, A freezes 2 TRX, B freezes 2 TRX the energy they can get is: A: 25_000_000_000 and energy_limit is 25_000_000_000 B: 25_000_000_000 and energy_limit is 25_000_000_000 when C freezes 1 TRX: the energy they can get is: A: 20_000_000_000 and energy_limit is 20_000_000_000 B: 20_000_000_000 and energy_limit is 20_000_000_000 B: 10_000_000_000 and energy_limit is 10_000_000_000 Energy Recovery The energy consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72_000_000 Energy if there is no continuous consumption or TRX freeze one hour later, the energy consumption amount will be 72_000_000 - (72_000_000 * (60*60/60*60*24)) Energy = 69_000_000 Energy 24 hours later, the energy consumption amount will be 0 Energy 5.3.2 How to Set Fee Limit (Caller Must Read) Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of energy consumed while call the contract can be converted to TRX or SUN, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Energy, TRX and SUN, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great energy, it will not consume too much energy from the caller. Before you set fee limit, you need to know several conception: 1. The legal fee limit is a integer between 0 - 10^9, unit is SUN. 2. Different smart contracts consume different amount of energy due to their complexity. The same trigger in the same contract almost consumes the same amount fo energy[1]. When the contract is triggered, the commands will be executed one by one and consume energy. If it reaches the fee limit, commands will fail to be executed, and energy is not refundable. 3. Currently fee limit only refers to the energy converted to SUN that will be consumed from the caller[2]. The energy consumed by triggering contract also includes developer's share. 4. For a vicious contract, if it encounters execution timeout or bug crash, all it's energy will be consumed. 5. Developer may undertake a proportion of energy consumption(like 90%). But if the developer's energy is not enough for consumption, the rest of the energy consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough energy, then it will burn equivalent amount of TRX [2]. To encourage caller to trigger the contract, usually developer has enough energy. Example How to estimate the fee limit: Assume contract C's last execution consumes 18000 Energy, so estimate the energy consumption limit to be 20000 Energy[3] According to the frozen TRX amount and energy conversion, assume 1 TRX = 400 energy. When to burn TRX, 1 TRX = 10000 energy[4] Assume developer undertake 90% energy consumption, and developer has enough energy. Then the way to estimate the fee limit is: 1). A = 20000 energy * (1 TRX / 400 energy) = 50 TRX = 50_000_000 SUN, 2). B = 20000 energy * (1 TRX / 10000 energy) = 2 TRX = 2_000_000 SUN, 3). Take the greater number of A and B, which is 50_000_000 SUN, 4). Developer undertakes 90% energy consumption, caller undertakes 10% energy consumption, So, the caller is suggested to set fee limit to 50_000_000 SUN * 10% = 5_000_000 SUN Note: [1] The energy consumption of each execution may fluctuate slightly due to the situation of all the nodes. [2] TRON may change this policy. [3] The estimated energy consumption limit for the next execution should be greater than the last one. [4] 1 TRX = 10^4 energy is a fixed number for burning TRX to get energy, TRON may change it in future. 5.3.3 Energy Calculation (Developer Must Read) 1. In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available energy will be deducted. If the contract runs normally or revert, only the energy needed for the execution of the commands will be deducted. 2. Developer can set the proportion of the energy consumption it undertakes during the execution, this proportion cna be changed later. If the developer's energy is not enough, it will consume the caller's energy. 3. Currently, the total energy available when trigger a contract is composed of caller fee limit and developer's share Note: - If the developer is not sure about whether the contract is normal, do not set caller's energy consumption proportion to 0%, in case all developer's energy will be deducted due to vicious execution[1]. - We recommend to set caller's energy consumption proportion to 10% ~ 100%[2]. Example 1 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX frozen for 100000 energy. Smart contract C set the caller energy consumption proportion to 100% which means the caller will pay for the energy consumption completely. A triggers C, the fee limit set is 30000000 (unit SUN, 30 TRX) So during this trigger the energy A can use is from two parts: - A's energy by freezing TRX; - The energy converted from the amount of TRX burning according to a fixed rate; If fee limit is greater than the energy obtained from freezing TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (30 - 10) TRX = 20 TRX available, so the energy it can keep consuming is 20 TRX / 100 SUN = 200000 energy. Finally, in this call, the energy A can use is (100000 + 200000) = 300000 energy. If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error come out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md Example 2 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX frozen for 100000 energy. Smart contract C set the caller energy consumption proportion to 40% which means the developer will pay for the rest 60% energy consumption. Developer D freezes 50 TRX to get 500000 energy. A triggers C, the fee limit set is 200000000 (unit SUN, 200 TRX). So during this trigger the energy A can use is from three parts: - A's energy by freezing TRX -- X; - The energy converted from the amount of TRX bruning according to a fixed rate -- Y; If fee limit is greater than the energy obtained from freezing TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (200 - 10) TRX = 190 TRX available, but A only has 90 TRX left, so the energy it can keep consuming is 90 TRX / 100 SUN = 900000 energy; - D's energy by freezing TRX -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the energy A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the energy A can use is (X + Y) / 40% If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error comes out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to (https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md) Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the energy consumption. If Assert-style error comes out, it will consume all energy from the developer itsef. Assert-style error introduction, refer to https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent. 5.4 Smart Contract Development Tool 5.4.1 TronStudio Support the build, debug, run, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-studio-intro 5.4.2 TronBox Support the build, deploy, transplant, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-box-user-guide 5.4.3 TronWeb Provide http api service for the usage of smart contract. https://developers.tron.network/docs/tron-web-intro 5.4.4 TronGrid Provide smart contract event query service. https://developers.tron.network/docs/tron-grid-intro 5.5 Using Command Lines Tool to Develop Smart Contract First you can use TronStudio to write, build and debug the smart contract. After you finish the development of the contract, you can copy it to SimpleWebCompiler to compile to get ABI and ByteCode. We provide a simple data read/write smart contract code example to demonstrate: pragma solidity ^0.4.0; contract DataStore { mapping(uint256 => uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/tron.log Develop a Smart Contract Copy the code example above to remix to debug. Compile in SimpleWebCompiler for ABI and ByteCode Copy the code example above to SimpleWebCompiler to get ABI and ByteCode. Because TRON's compiler is a little different from Ethereum, so you can not get ABI and ByteCode by using Remix. But it will soon be supported. Using Wallet-cli to Deploy Download Wallet-Cli and build shell # download cource code git clone https://github.com/tronprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI from SimpleWebCompiler bytecode: ByteCode from SimpleWebCompiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The TRX consumption limit for the deployment, unit is SUN(1 SUN = 10^-6 TRX) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of TRX transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The TRX consumption limit for the trigger, unit is SUN(1 SUN = 10^-6 TRX) value: The amount of TRX transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract. 6. Built-in Contracts and API 6.1 Built-in Contracts Please refer to: https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E6%B3%A2%E5%9C%BA%E5%8D%8F%E8%AE%AE/%E4%BA%A4%E6%98%93%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B%E8%AF%B4%E6%98%8E.md 6.2 GRPC API Introduction Please refer to: https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E6%B3%A2%E5%9C%BA%E5%8D%8F%E8%AE%AE/%E6%B3%A2%E5%9C%BA%E9%92%B1%E5%8C%85RPC-API.md 6.3 Http API Introduction Please refer to: https://github.com/tronprotocol/Documentation/blob/master/TRX_CN/Tron-http.md 7. TRC-10 Token Introduction TRON network support two types of token, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract. 7.1 How to Issue a TRC-10 Token Http Api: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"trx_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN 7.2 Participate TRC-10 Token Http Api: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 7.3 TRC-10 Token Transfer Http Api: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token 8. Resource Model 8.1 Resource Model Introduction TRON network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by TRON's exclusive RAM model, TRON's RAM resource is almost infinite. TRON network imports two resource conceptions: Bandwidth points and Energy. Bandwidth Point represents Bandwidth, Energy represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Energy 8.2 Bandwidth Points The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the frozen TRX in the network and the self-frozen TRX amount, the Bandwidth Points an account possesses is not fixed. 8.2.1 How to Get Bandwidth Points 1. By Freezing TRX to get Bandwidth Points, Bandwidth Points = the amount of TRX self-frozen / the total amount of TRX frozen for Bandwidth Points in the network * 43_200_000_000 2. Every account has a fixed amount of free Bandwidth Points(5000) every day 8.2.2 Bandwidth Points Consumption Except for query operation, any transaction consumes Bandwidth points. There's another situation: When you transfer(TRX or token) to an account that does not exist in the network, this operation will first create that account in the network and then do the transfer. It only consumes Bandwidth points for account creation, no extra Bandwidth points consumption for transfer. Create a new account transaction, Bandwidth points consumption sequence: 1. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 2; 2. Burn 0.1 TRX; Token transfer transaction, Bandwidth points consumption sequence: 1. \u4f9d\u6b21\u9a8c\u8bc1 \u53d1\u884cToken\u8d44\u4ea7\u603b\u7684\u514d\u8d39Bandwidth Points\u662f\u5426\u8db3\u591f\u6d88\u8017\uff0c\u8f6c\u8d26\u53d1\u8d77\u8005\u7684Token\u5269\u4f59\u514d\u8d39Bandwidth Points\u662f\u5426\u8db3\u591f\u6d88\u8017\uff0c Token\u53d1\u884c\u8005\u51bb\u7ed3TRX\u83b7\u53d6Bandwidth Points\u5269\u4f59\u91cf\u662f\u5426\u8db3\u591f\u6d88\u8017\u3002\u5982\u679c\u6ee1\u8db3\u5219\u6263\u9664Token\u53d1\u884c\u8005\u7684Bandwidth Points\uff0c\u4efb\u610f\u4e00\u4e2a\u4e0d\u6ee1\u8db3\u5219\u8fdb\u5165\u4e0b\u4e00\u6b65\u3002 2. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 3; 3. Free Bandwidth points. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 4; 4. Bandwidth points from burning TRX, the rate = the number of bytes of the transaction * 10 SUN; Ordinary transaction, Bandwidth points consumption sequence: 1. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 2; 2. Free Bandwidth points. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 3; 3. Bandwidth points from burning TRX, the rate = the number of bytes of the transaction * 10 SUN; 8.2.3 Bandwidth Points Recovery Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. For the specific formula: Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. 8.3 Energy 5.3 Energy Introduction 8.4 Resource Delegation In TRON network, an account can freeze TRX for Bandwidth or Energy for other accounts. The primary account owns the frozen TRX and TRON power, the recipient account owns the Bandwidth or Energy. Like ordinary freezing, resource delegation freezing is also at least 3 days. Example(Using wallet-cli) freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] [receiverAddress] frozen_balance: the amount of TRX to freeze (unit SUN) frozen_duration: the freezing period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Energy receiverAddress: recipient account address 8.5 Other Fees Type Fee Create a witness 9999 TRX Issue a token 1024 TRX Create an account 0.1 TRX Create an exchange 1024 TRX 9. DEX Introduction TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs. 9.1 What is an Exchange Pair The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX. 9.2 Exchange Pair Creation Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.3 Exchange Pair Transaction Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.4 Exchange Pair Injection The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.5 Exchange Pair Withdrawal The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw': https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md) 9.6 Query 9.6.1 Transaction Query ListExchanges: Query the list of all the exchange pairs GetPaginatedExchangeList: Query the list of all the exchange pairs by pagination GetExchangeById: Query an exchange pair by exchange pair id Please refer to: https://github.com/tronprotocol/documentation/blob/master/TRX/Tron-http.md 9.6.2 Price Calculation The token price is determined by the ratio of the balance of the two tokens. 9.6.3 Calculate the Amount of Token You Can Get sellTokenQuant is the amount of the first_token you want to sell; buyTokenQuant is the amount of second_token you can get; supply = 1_000_000_000_000_000_000L; supplyQuant = -supply * (1.0 - Math.pow(1.0 + (double) sellTokenQuant/\uff08firstTokenBalance + sellTokenQuant, 0.0005)); buyTokenQuant = \uff08long\uff09balance * (Math.pow(1.0 + (double) supplyQuant / supply, 2000.0) - 1.0); 10. Multi-Signatures Please refer to: TRON Multi-signatures 11. Shielded Transaction Please refer to: TRON Shielded Transaction 12. Wallet Introduction 12.1 wallet-cli Introduction Please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/README.md 12.2 Get Transaction ID Hash.sha256(transaction.getRawData().toByteArray()) 12.3 Get Block ID private byte[] generateBlockId(long blockNum, byte[] blockHash) { byte[] numBytes = Longs.toByteArray(blockNum); byte[] hash = blockHash; System.arraycopy(numBytes, 0, hash, 0, 8); return hash; } 12.4 How to Build a Transaction Locally According to the defination of the transaction, you need to fill up all the fields of the transaction. You need to set reference block and expiration time information, so you need to connect to the Mainnet. We recommend to use the latest block on fullnode as the value of reference block, use the latest block time plus N minutes as the value of expiration time. The network judgment condition is if (expiration > latest block time and expiration < latest block time + 24 hours) means the transaction is in period of validity. Otherwise, it will be an overdue transaction, will not be accepted by the Mainnet. Way to set reference block: set RefBlockHash the bytes from the 8 to 16(not included) of the hash of the latest block, set BlockBytes the bytes from 6 to 8(not included) of the height of the latest block. public static Transaction setReference(Transaction transaction, Block newestBlock) { long blockHeight = newestBlock.getBlockHeader().getRawData().getNumber(); byte[] blockHash = getBlockHash(newestBlock).getBytes(); byte[] refBlockNum = ByteArray.fromLong(blockHeight); Transaction.raw rawData = transaction.getRawData().toBuilder() .setRefBlockHash(ByteString.copyFrom(ByteArray.subArray(blockHash, 8, 16))) .setRefBlockBytes(ByteString.copyFrom(ByteArray.subArray(refBlockNum, 6, 8))) .build(); return transaction.toBuilder().setRawData(rawData).build(); } Way to set expiration time and transaction timestamp: public static Transaction createTransaction(byte[] from, byte[] to, long amount) { Transaction.Builder transactionBuilder = Transaction.newBuilder(); Block newestBlock = WalletClient.getBlock(-1); Transaction.Contract.Builder contractBuilder = Transaction.Contract.newBuilder(); Contract.TransferContract.Builder transferContractBuilder = Contract.TransferContract .newBuilder(); transferContractBuilder.setAmount(amount); ByteString bsTo = ByteString.copyFrom(to); ByteString bsOwner = ByteString.copyFrom(from); transferContractBuilder.setToAddress(bsTo); transferContractBuilder.setOwnerAddress(bsOwner); try { Any any = Any.pack(transferContractBuilder.build()); contractBuilder.setParameter(any); } catch (Exception e) { return null; } contractBuilder.setType(Transaction.Contract.ContractType.TransferContract); transactionBuilder.getRawDataBuilder().addContract(contractBuilder) .setTimestamp(System.currentTimeMillis()) //in the form of millisecond .setExpiration(newestBlock.getBlockHeader().getRawData().getTimestamp() + 10 * 60 * 60 * 1000); Transaction transaction = transactionBuilder.build(); Transaction refTransaction = setReference(transaction, newestBlock); return refTransaction; } 12.5 Related Demo Build transaction locally, signature demo, please refer to: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java nodejs demo, please refer to: https://github.com/tronprotocol/tron-demo/tree/master/demo/nodejs","title":"1. Project Repository"},{"location":"Tron-overview/#1-project-repository","text":"Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the definition of the api and data structure. wallet-cli is the official command line wallet. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf","title":"1. Project Repository"},{"location":"Tron-overview/#2-srs-and-committee","text":"","title":"2. SRs and Committee"},{"location":"Tron-overview/#3-account-model","text":"","title":"3. Account Model"},{"location":"Tron-overview/#4-network-node","text":"","title":"4. Network Node"},{"location":"Tron-overview/#5-smart-contract","text":"","title":"5. Smart Contract"},{"location":"Tron-overview/#6-built-in-contracts-and-api","text":"","title":"6. Built-in Contracts and API"},{"location":"Tron-overview/#7-trc-10-token-introduction","text":"TRON network support two types of token, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract.","title":"7. TRC-10 Token Introduction"},{"location":"Tron-overview/#8-resource-model","text":"","title":"8. Resource Model"},{"location":"Tron-overview/#9-dex-introduction","text":"TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs.","title":"9. DEX Introduction"},{"location":"Tron-overview/#10-multi-signatures","text":"Please refer to: TRON Multi-signatures","title":"10. Multi-Signatures"},{"location":"Tron-overview/#11-shielded-transaction","text":"Please refer to: TRON Shielded Transaction","title":"11. Shielded Transaction"},{"location":"Tron-overview/#12-wallet-introduction","text":"","title":"12. Wallet Introduction"},{"location":"advanced-configuration/","text":"Advanced Configurations we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default. LevelDB You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = \"database\", index.directory = \"index\", # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, witness, witness_schedule. # Otherwise, db configs will remain defualt and data will be stored in # the path of \"output-directory\" or which is set by \"-d\" (\"--output-directory\"). # Attention: name is a required field that must be set !!! properties = [ { name = \"account\", path = \"/path/to/accout\", // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database accout will be stored in the path of /path/to/accout/database while the index be stored in /path/to/accout/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options. gRPC You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } } backup You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one which with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ \"192.168.0.101\" ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ \"192.168.0.100\" ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"Advanced Configurations"},{"location":"advanced-configuration/#advanced-configurations","text":"we provide some configuration items for LevelDB and gRPC in config.conf file, for fine-grained performance tuning. You may custom these items only if you have deep understanding on them, otherwise keep them as default.","title":"Advanced Configurations"},{"location":"advanced-configuration/#leveldb","text":"You can custom LevelDB options in the storage part of config.conf , which looks like: storage { # Directory for storing persistent data db.directory = \"database\", index.directory = \"index\", # You can custom these 14 databases' configs: # account, account-index, asset-issue, block, block-index, # block_KDB, peers, properties, recent-block, trans, # utxo, votes, witness, witness_schedule. # Otherwise, db configs will remain defualt and data will be stored in # the path of \"output-directory\" or which is set by \"-d\" (\"--output-directory\"). # Attention: name is a required field that must be set !!! properties = [ { name = \"account\", path = \"/path/to/accout\", // relative or absolute path createIfMissing = true, paranoidChecks = true, verifyChecksums = true, compressionType = 1, // 0 - no compression, 1 - compressed with snappy blockSize = 4096, // 4 KB = 4 * 1024 B writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B cacheSize = 10485760, // 10 MB = 10 * 1024 * 1024 B maxOpenFiles = 100 } ] } As shown in the example above, the data of database accout will be stored in the path of /path/to/accout/database while the index be stored in /path/to/accout/index . And, the example also shows our default value of LevelDB options from createIfMissing to maxOpenFiles . You can just refer to the docs of LevelDB to figure out details of these options.","title":"LevelDB"},{"location":"advanced-configuration/#grpc","text":"You can custom gPRC options in the node.rpc part of config.conf , which looks like: node { rpc { port = 50051 # Number of gRPC thread, default availableProcessors / 2 # thread = 16 # The maximum number of concurrent calls permitted for each incoming connection # maxConcurrentCallsPerConnection = # The HTTP/2 flow control window, default 1MB # flowControlWindow = # Connection being idle for longer than which will be gracefully terminated maxConnectionIdleInMillis = 60000 # Connection lasting longer than which will be gracefully terminated # maxConnectionAgeInMillis = # The maximum message size allowed to be received on the server, default 4MB # maxMessageSize = # The maximum size of header list allowed to be received, default 8192 # maxHeaderListSize = } }","title":"gRPC"},{"location":"advanced-configuration/#backup","text":"You can custom backup options in the node.backup part of config.conf , which looks like: node.backup { # my priority, each member should use different priority priority = # members should use same port port = # peer's ip list, can't contain mine members = [] } policy: 1. the one which synchronized first will become master. 2. if synchronization is completed at the same time, the one which with big priority will become master. E.g. create backups for node A(192.168.0.100) and node B(192.168.0.100 ): node A's configuration: node.backup { priority = 8 port = 10001 members = [ \"192.168.0.101\" ] } node B's configuration: node.backup { priority = 5 port = 10001 members = [ \"192.168.0.100\" ] } You may refer to the source code of io.grpc.netty.NettyServerBuilder class to see details or just make a decision according to the brief comments above.","title":"backup"},{"location":"glossary/","text":"energyUsage The Energy conumption of the contract caller in one contract trigger. energyFee The number of TRX burned from the contract caller for Energy conumption in one contract trigger. originEnergyUsage The total Energy conumption of the contract developer in one contract trigger. energyUsageTotal The total Energy conumption of the contract developer and the contract caller combined. Feelimit When the user triggers or create the contract, this is used to set the usage limit of the Energy consumption got from burning TRX or freezing TRX, Energy got from freezing TRX will be used first. CallValue When the user triggers or create the contract, this can be used to send TRX to the contract. consume_user_resource_percent For a contract, Resource consumption is composed of two parts, one part is afforded by contract developer and the other part is afforded by contract caller. This is the percentage of the two parts in the Resource consumption. origin_energy_limit The usage limit of the Energy consumption of the developer in one contract trigger, should be greater than 0. net_usage The Bandwidth consumption in one contract trigger. (NetFee not included) net_fee The TRX burned for Bandwidth consumption in one contract trigger. Bandwidth The Bandwidth Points consumed by a transaction is the size of the byte array in this transaction. If the byte array length of a transaction is 100, then the transaction needs to consume 100 Bandwidth Points. Energy The creation and operation of a smart contract consume CPU resources. It takes time for smart contracts to operate in virtual machines (VMs), and the time consumed in the system is calculated in microseconds. CPU resources are consumed in energy, which means 1 Energy = 1 Microsecond (\u03bcs). If a contract takes 100 \u03bcs to execute in a VM, it needs to consume 100 Energy. TRON Power(TP) 1 Frozen TRX = 1 TP, TP can be used to vote, 1 TP = 1 vote. Super Representative(SR) The current block producing Top 27 nodes.","title":"Glossary"},{"location":"api/http/","text":"API INDEX: transaction account shielded transactions createtransaction updateaccount getexpandedspendingkey gettransactionsign createaccount getakfromask gettransactionbyid createaddress getnkfromnsk gettransactioninfobyid getaccountnet getspendingkey gettransactioncountbyblocknum getaccount getdiversifier getdeferredtransactionbyid generateaddress getincomingviewingkey canceldeferredtransactionbyid validateaddress getzenpaymentaddress getdeferredtransactioninfobyid getaccountresource scannotebyivk getsignweight setaccountid scanandmarknotebyivk addtransactionsign getaccountbyid scannotebyovk accountpermissionupdate getrcm getdelegatedresource getmerkletreevoucherinfo getdelegatedresourceaccountindex isspend freezebalance createspendauthsig block unfreezebalance createshieldnullifier getnowblock unfreezeasset getshieldtransactionhash getblockbynum withdrawbalance createshieldedtransaction getblockbyid votewitnessaccount createshieldedtransaction withoutspendauthsig getblockbylimitnext updatewitness getnewshieldedaddress getblockbylatestnum createwitness getbrokerage getreward updateBrokerage asset exchange transfer createassetissue exchangecreate easytransferbyprivate participateassetissue exchangeinject easytransferassetbyprivate getassetissuebyaccount exchangewithdraw transferasset getassetissuebyname exchangetransaction easytransfer getassetissuelistbyname getexchangebyid easytransferasset getassetissuelist getpaginatedexchangelist getpaginatedassetissuelist getpaginatedexchangelist getassetissuebyid listexchanges updateasset getpaginatedexchangelist proposal smart contract others getpaginatedproposallist deploycontract broadcasttransaction proposalcreate getcontract broadcasthex getproposalbyid triggerconstantcontract listnodes listproposals triggersmartcontract listwitnesses proposalapprove clearabi getnextmaintenancetime proposaldelete updateenergylimit getnodeinfo getapprovedlist updatesetting getchainparameters HexString and Base58check Transcode Demo JAVA: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java#L92 PHP: https://github.com/tronprotocol/Documentation/blob/master/TRX_CN/index.php Since v3.6, parameter 'visible' is added, when 'visible' is set true, no need to transcode the relevant address and string. This parameter is valid for all api, including solidityNode api and FullNode api. When 'visible' is set true, the format of the input address must be base58, input string must text string, so does the format of the output. If 'visible' is set false or null, the api acts the same as previous version. If the format of the parameters do not match with the set of visible, it will throw out an error. Way to set the 'visible' parameter: 1. For the api needs no parameter: by adding 'visible' parameter in the url example: http://127.0.0.1:8090/wallet/listexchanges?visible=true 2. For POST method api: By adding 'visible' parameter to the most out layer of the json example: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"amount\": 1000000, \"visible\": true }' 3. For GET method api: By adding 'visible' parameter in the url, as way 1. SolidityNode Api SolidityNode api's default http port is 8091, when solidityNode is started, http service will be started too. /walletsolidity/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccount -d '{ \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }' Parameter address: Default hexString Return: Account object walletsolidity/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listwitnesses Parameter: No parameter Return: The list of all the witnesses /walletsolidity/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getassetissuelist Parameter: No parameter Return: The list of all the tokens /walletsolidity/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getpaginatedassetissuelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: the index of the start token Parameter limit: the amount of tokens per page Return: The list of tokens by pagination /walletsolidity/getassetissuebyname(Since Odyssey-v3.2) Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error /walletsolidity/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelistbyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: The list of tokens /walletsolidity/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyid -d '{ \"value\": \"1000001\" }' Parameter value: Token id Return: Token object /walletsolidity/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getnowblock Parameter: No parameter Return: the latest block from solidityNode /walletsolidity/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbynum -d '{ \"num\": 100 }' Parameter num: Block height Return: Block information /walletsolidity/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction information /walletsolidity/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioncountbyblocknum -d '{ \"num\": 100 }' Parameter num: Block height Return: The number of transactions /walletsolidity/gettransactioninfobyid Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction fee & block height /walletsolidity/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresource -d '{ \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information /walletsolidity/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresourceaccountindex -d '{ \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\" }' Parameter value: Address, default hexString Return: Energy delegation index /walletsolidity/getexchangebyid(Since Odyssey-v3.2) Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getexchangebyid -d '{ \"id\": 1 }' Parameter id: Exchange pair id Return: Exchange pair object /walletsolidity/listexchanges(Since Odyssey-v3.2) Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listexchanges Parameter: No parameter Return: The list of all the exchange pairs /walletsolidity/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccountbyid -d '{ \"account_id\": \"6161616162626262\" }' Parameter account_id: Account id, default hexString Return: Account object /walletsolidity/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbyid-d '{ \"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\" }' Parameter value: Block id Return: Block object /walletsolidity/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylimitnext -d '{ \"startNum\": 1, \"endNum\": 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks /walletsolidity/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylatestnum -d '{ \"num\": 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks /walletextension/gettransactionsfromthis\uff08No longer supported in the latest version\uff09 Description: Query the transactions initiated by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionsfromthis -d '{ \"account\": { \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }, \"offset\": 0, \"limit\": 10, \"startTime\": 1546099200000, \"endTime\": 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionsfromthis /walletextension/gettransactionstothis\uff08No longer supported in the latest version\uff09 Description: Query the transactions received by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionstothis -d '{ \"account\": { \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }, \"offset\": 0, \"limit\": 10, \"startTime\": 1546099200000, \"endTime\": 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionstothis /wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8091/wallet/getnodeinfo Parameter: No parameter Return: The node information /walletsolidity/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: transaction id Return: Deferred transaction object /walletsolidity/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: transaction id Return: Deferred transaction fee & block height /walletsolidity/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/walletsolidity/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameter out_points: Note information Return: A merkle tree of a note /walletsolidity/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) /walletsolidity/scanandmarknotebyivk Description: To get all the notes with spent status by ivk demo: curl -X POST http://127.0.0.1:8090/walletsolidity/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Parameter ak: Ak key Parameter nk: Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) /walletsolidity/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ovk: Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) /walletsolidity/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/walletsolidity/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter txid: Transaction id Parameter index: Note index Return: Note status FullNode Api FullNode api's default http port is 8090, when FullNode is started, http service will be started too. wallet/createtransaction Description: Create a transfer transaction, if to address is not existed, then create the account on the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ \"to_address\": \"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\", \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\", \"amount\": 1000 }' Parameter to_address: To address, default hexString Parameter owner_address: Owner address, default hexString Parameter amount: Transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/gettransactionsign Description: To sign a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionsign -d '{ \"transaction\": { \"txID\": \"454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000, \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"to_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"267e\", \"ref_block_hash\": \"9a447d222e8de9f2\", \"expiration\": 1530893064000, \"timestamp\": 1530893006233 } }, \"privateKey\": \"your private key\" }' Parameter transaction: Transaction object Parameter privateKey: Private key Return: Transaction after sign Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/broadcasttransaction Description: Broadcast transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasttransaction -d '{ \"signature\": [ \"97c825b41c77de2a8bd65b3df55cd4c0df59c307c0187e42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01\" ], \"txID\": \"454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000, \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"to_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"267e\", \"ref_block_hash\": \"9a447d222e8de9f2\", \"expiration\": 1530893064000, \"timestamp\": 1530893006233 } }' Parameter: Transaction after sign Return: The result of the broadcast wallet/broadcasthex Description: Broadcast transaction hex string after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasthex -d '{ \"transaction\":\"0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00\" }' Parameter: Transaction hex after sign Return: The result of the broadcast wallet/updateaccount Description: Update the name of an account demo: curl -X POST http://127.0.0.1:8090/wallet/updateaccount -d '{ \"account_name\": \"0x7570646174654e616d6531353330383933343635353139\", \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" }' Parameter account_name: Account name, default hexString Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/votewitnessaccount Description: Vote for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/votewitnessaccount -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"votes\": [ { \"vote_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"vote_count\": 5 } ] }' Parameter owner_address: Owner address, default hexString Parameter votes: 'vote_address' stands for the address of the witness you want to vote, default hexString, 'vote_count' stands for the number of votes you want to vote Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getBrokerage Description: Query the ratio of brokerage of the witness demo: curl -X GET http://127.0.0.1:8090/wallet/getBrokerage -d '{ \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address: The address of the witness's account, default hexString Return: The ratio of brokerage of the witness wallet/getReward Description: Query unclaimed reward demo: curl -X GET http://127.0.0.1:8090/wallet/getReward -d '{ \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address: The address of the voter's account, default hexString Return: Unclaimed reward wallet/updateBrokerage Description: Update the ratio of brokerage demo: curl -X POST http://127.0.0.1:8090/wallet/updateBrokerage -d '{ \"owner_address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\", \"brokerage\":30 }' Parameter owner_address: The address of the witness's account, default hexString Parameter brokerage: The ratio of brokerage you want to update to Return: Transaction object wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\": \"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\": 4321, \"trx_num\": 1, \"num\": 1, \"start_time\": 1530894315158, \"end_time\": 1533894312158, \"description\": \"007570646174654e616d6531353330363038383733343633\", \"url\": \"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\": 10000, \"public_free_asset_net_limit\": 10000, \"frozen_supply\": { \"frozen_amount\": 1, \"frozen_days\": 2 } }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN wallet/updatewitness Description: Update the witness' website url demo: curl -X POST http://127.0.0.1:8090/wallet/updatewitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"update_url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameter owner_address: Owner address, default hexString Parameter update_url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/createaccount Description: Create an account demo: curl -X POST http://127.0.0.1:8090/wallet/createaccount -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" }' Parameter owner_address: Owner address, default hexString Parameter account_address: New address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It costs 0.1 TRX wallet/createwitness Description: Apply to become a witness demo: curl -X POST http://127.0.0.1:8090/wallet/createwitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameter owner_address: Owner address, default hexString Parameter url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/easytransfer Description: Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransfer -d '{ \"passPhrase\": \"your password\", \"toAddress\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"amount\": 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter amount: Transfer TRX amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferasset Description: Easy token transfer demo\uff1acurl -X POST http://127.0.0.1:8090/wallet/easytransferasset -d '{ \"passPhrase\": \"your password\", \"toAddress\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"assetId\": \"1000001\", \"amount\": 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Transfer token amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/createaddress Description: Create an address with a password demo: curl -X POST http://127.0.0.1:8090/wallet/createaddress -d '{ \"value\": \"3230313271756265696a696e67\" }' Parameter value: Password, default hexString Return: An address Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\": 100, \"asset_name\": \"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/freezebalance Description: Freeze TRX demo: curl -X POST http://127.0.0.1:8090/wallet/freezebalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"frozen_balance\": 10000, \"frozen_duration\": 3, \"resource\": \"BANDWIDTH\", \"receiver_address\": \"414332f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter frozen_balance: TRX freeze amount Parameter frozen_duration: TRX freeze duration, at least 3 days Parameter resource: TRX freeze type, 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will receive the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezebalance Description: Unfreeze the frozen TRX that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezebalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"resource\": \"BANDWIDTH\", \"receiver_address\": \"414332f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter resource: Frozen TRX unfreeze type 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will lose the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezeasset Description: Unfreeze the frozen token that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezeasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/withdrawbalance Description: Withdraw reward to account balance for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/withdrawbalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It can only withdraw once for every 24 hours wallet/updateasset Description: Update token information demo: curl -X POST http://127.0.0.1:8090/wallet/updateasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"description\": \"\", \"url\": \"\", \"new_limit\": 1000000, \"new_public_limit\": 100 }' Parameter owner_address: The issuers address of the token, default hexString Parameter description: The description of token, default hexString Parameter url: The token's website url, default hexString Parameter new_limit: Each token holder's free bandwidth Parameter new_public_limit: The total free bandwidth of the token Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/listnodes Description: Query the list of nodes connected to the ip of the api demo: curl -X GET http://127.0.0.1:8090/wallet/listnodes Parameter: No parameter Return: The list of nodes wallet/getassetissuebyaccount Description: Query the token issue information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyaccount -d '{ \"address\": \"41F9395ED64A6E1D4ED37CD17C75A1D247223CAF2D\" }' Parameter address: Token issuer's address, default hexString Return: Token object wallet/getaccountnet Description: Query the bandwidth information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountnet -d '{ \"address\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\" }' Parameter address: Address, default hexString Return: Bandwidth information wallet/getassetissuebyname Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error wallet/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuelistbyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: The list of tokens wallet/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyid -d '{ \"value\": \"1000001\" }' Parameter value: Token id Return: Token object wallet/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8090/wallet/getnowblock Parameter: No parameter Return: The latest block wallet/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbynum -d '{ \"num\": 1 }' Parameter num: Block height Return: Block information wallet/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbyid-d '{ \"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\" }' Parameter value: Block id Return: Block object wallet/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylimitnext -d '{ \"startNum\": 1, \"endNum\": 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks wallet/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylatestnum -d '{ \"num\": 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks wallet/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction information wallet/gettransactioninfobyid(Since Odyssey-v3.2) Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction fee & block height wallet/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioncountbyblocknum -d '{ \"num\": 100 }' Parameter num: Block height Return: The number of transactions wallet/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8090/wallet/getaccount -d '{ \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }' Parameter address: Default hexString Return: Account object wallet/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8090/wallet/listwitnesses Parameter: No parameter Return: The list of all the witnesses wallet/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8090/wallet/getassetissuelist Parameter: No parameter Return: The list of all the tokens wallet/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedassetissuelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: The index of the start token Parameter limit: The amount of tokens per page Return: The list of tokens by pagination wallet/getpaginatedproposallist(Since Odyssey-v3.5) Description: Query the list of all the proposals by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedproposallist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: The index of the start proposal Parameter limit: The amount of proposals per page Return: The list of proposals by pagination wallet/getpaginatedexchangelist(Odyssey-v3.2\u5f00\u59cb\u652f\u6301) Description: Query the list of all the exchange pairs by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedexchangelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: The index of the start exchange pair Parameter limit: The amount of exchange pairs per page Return: The list of exchange pairs by pagination wallet/getnextmaintenancetime Description: Query the time interval till the next vote round demo: curl -X GET http://127.0.0.1:8090/wallet/getnextmaintenancetime Parameter: No parameter Return: The time interval till the next vote round(unit: ms) wallet/easytransferbyprivate Description: TRX Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferbyprivate -d '{ \"privateKey\": \"D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366\", \"toAddress\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\", \"amount\": 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter amount: TRX transfer amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferassetbyprivate Description: Token easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferassetbyprivate -d '{ \"privateKey\": \"D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366\", \"toAddress\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\", \"assetId\": \"1000001\", \"amount\": 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Token transfer amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/generateaddress Description: Generate address and private key demo: curl -X GET http://127.0.0.1:8090/wallet/generateaddress Parameter: No parameter Return: Address and private key Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/validateaddress Description: Check the validity of the address demo: curl -X POST http://127.0.0.1:8090/wallet/validateaddress -d '{ \"address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\" }' Return: The check result wallet/deploycontract Description: Deploy a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/deploycontract -d '{ \"abi\": \"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\", \"bytecode\": \"608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029\", \"parameter\": \"\", \"call_value\": 100, \"name\": \"SomeContract\", \"consume_user_resource_percent\": 30, \"fee_limit\": 10, \"origin_energy_limit\": 10, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameter abi: Abi Parameter bytecode: Bytecode, default hexString Parameter parameter: The list of the parameters of the constructor, It should be converted hexString after encoded according to ABI encoder. If constructor has no parameter, this can be optional Parameter consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call (Optional) Parameter token_id: The id of trc10 token transfer to the contract (Optional) Parameter owner_address: Owner address of the contract, default hexString Parameter name: Contract name Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/triggersmartcontract Description: Trigger smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/triggersmartcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"fee_limit\": 10, \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameter contract_address: Contract address, default hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a js tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call Parameter token_id: The id of trc10 token transfer to the contract Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/getcontract Description: Query a contract demo: curl -X POST http://127.0.0.1:8090/wallet/getcontract -d '{ \"value\": \"4189139CB1387AF85E3D24E212A008AC974967E561\" }' Parameter value: Contract address, default hexString Return: Smart contract object wallet/proposalcreate Description: Create a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalcreate -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"parameters\": [ { \"key\": 0, \"value\": 100000 }, { \"key\": 1, \"value\": 2 } ] }' Parameter owner_address: Creator address Parameter parameters: Proposal parameters Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getproposalbyid Description: Query a proposal by proposal id demo: curl -X POST http://127.0.0.1:8090/wallet/getproposalbyid -d '{ \"id\": 1 }' Parameter id: Proposal id Return: The proposal information wallet/listproposals Description: Query all the proposals demo: curl -X POST http://127.0.0.1:8090/wallet/listproposals Parameter: No parameter Return: The list of all the proposals wallet/proposalapprove Description: To approve a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalapprove -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1, \"is_add_approval\": true }' Parameter owner_address: The address that makes the approve action, default hexString Parameter proposal_id: Proposal id Parameter is_add_approval: Whether to approve Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/proposaldelete Description: To delete a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposaldelete -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1 }' Parameter owner_address: Owner address of the proposal, default hexString Parameter proposal_id: Proposal id Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getaccountresource Description: Query the resource information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountresource -d '{ \"address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\" }' Parameter address: Address, default hexString Return: The resource information wallet/exchangecreate Description: Create an exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangecreate -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"first_token_id\": \"token_a\", \"first_token_balance\": 100, \"second_token_id\": \"token_b\", \"second_token_balance\": 200 }' Parameter first_token_id: The first token's id, default hexString Parameter first_token_balance: The first token's balance Parameter second_token_id: The second token's id, default hexString Parameter second_token_balance: The second token's balance Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'first_token_balance' and 'second_token_balance' is the smallest unit of the token wallet/exchangeinject Description: Inject funds for exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangeinject -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token inject amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangewithdraw Description: Withdraw from exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangewithdraw -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token withdraw amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangetransaction Description: Participate the transaction of exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangetransaction -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100, \"expected\": 10 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Sell token amount Parameter expected: Expected token amount to get Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' and 'expected' is the smallest unit of the token wallet/getexchangebyid Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8090/wallet/getexchangebyid -d '{ \"id\": 1 }' Parameter id: Exchange pair id Return: Exchange pair information wallet/listexchanges Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8090/wallet/listexchanges Parameter: No parameter Return: The list of all the exchange pairs wallet/getchainparameters Description: Query the parameters of the blockchain used for witnessses to create a proposal demo: curl -X GET http://127.0.0.1:8090/wallet/getchainparameters Parameter: No parameter Return: The list of parameters of the blockchain wallet/updatesetting Description: Update the consume_user_resource_percent parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"consume_user_resource_percent\": 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter consume_user_resource_percent: Consume user's resource percentage Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/updateenergylimit Description: Update the origin_energy_limit parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"origin_energy_limit\": 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresource -d '{ \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information wallet/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindex -d '{ \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\" }' Parameter value: Address, default hexString Return: Energy delegation index wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8090/wallet/getnodeinfo Parameter: No Parameter Return: The node information wallet/setaccountid Description: To set an account id for an account demo: curl -X POST http://127.0.0.1:8090/wallet/setaccountid -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"account_id\": \"6161616162626262\" }' Parameter owner_address: Owner address, default hexString Parameter account_id: Account id, default hexString Return: Transaction object wallet/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountbyid -d '{ \"account_id\": \"6161616162626262\" }' Parameter account_id: Account id, default hexString Return: Account object wallet/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Deferred transaction object wallet/canceldeferredtransactionbyid Description: Query a deferred transaction by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/canceldeferredtransactionbyid -d '{ \"transactionId\": \"34e6b6497b71100756790a7f20cd729376768dd2bebb6a4a9c5e87b920d5de10\", \"ownerAddress\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" }' Parameter owner_address: Owner address of the transaction, default hexString Parameter transactionId: Transaction id Return: Transaction object wallet/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Deferred transaction fee & block height wallet/triggerconstantcontract Description: Trigger the constant of the smart contract, the transaction is off the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/triggerconstantcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"fee_limit\": 10, \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameter contract_address: Smart contract address, defualt hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a hs tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/clearabi Description: To clear the abi of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/clearabi -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"contract_address\": \"417bcb781f4743afaacf9f9528f3ea903b3782339f\" }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object wallet/addtransactionsign Description: To sign the transaction of trigger constant contract demo: curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"contract_address\": \"417bcb781f4743afaacf9f9528f3ea903b3782339f\" }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object after sign wallet/getsignweight Description: Query the current signatures total weight of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{ \"visible\": true, \"signature\": [ \"36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200\" ], \"txID\": \"4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\", \"Permission_id\": 2 } ], \"ref_block_bytes\": \"0380\", \"ref_block_hash\": \"6cdc8193f096be0f\", \"expiration\": 1556249055000, \"timestamp\": 1556248995694 }, \"raw_data_hex\": \"0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d\" }' Parameter: Transaction object after sign Return: The current signatures total weight wallet/getapprovedlist Description: Query the signatures list of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{ \"visible\": true, \"signature\": [ \"36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200\" ], \"txID\": \"4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\", \"Permission_id\": 2 } ], \"ref_block_bytes\": \"0380\", \"ref_block_hash\": \"6cdc8193f096be0f\", \"expiration\": 1556249055000, \"timestamp\": 1556248995694 }, \"raw_data_hex\": \"0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d\" }' Parameter: Transaction object after sign Return: The list of the signatures wallet/accountpermissionupdate Description: To set multi-signature for an account demo: curl -X POST http://127.0.0.1:8090/wallet/accountpermissionupdate -d '{ \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"owner\": { \"type\": 0, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [ { \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"witness\": { \"type\": 1, \"permission_name\": \"witness\", \"threshold\": 1, \"keys\": [ { \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"actives\": [ { \"type\": 2, \"permission_name\": \"active12323\", \"threshold\": 2, \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", \"keys\": [ { \"address\": \"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\", \"weight\": 1 }, { \"address\": \"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\", \"weight\": 1 } ] } ], \"visible\": true }' Parameter owner_address: Owner address of the account, default hexString Parameter owner: Account owner permission Parameter witness: Account witness permission, only for witness Parameter actives: Operation permission Return: Transaction object wallet/getexpandedspendingkey Description: To get expanded spending keys from spending key demo: curl -X POST http://127.0.0.1:8090/wallet/getexpandedspendingkey -d '{ \"value\": \"06b02aaa00f230b0887ff57a6609d76691369972ac3ba568fe7a8a0897fce7c4\" }' Parameter value: Spending key Return: Expanded spending keys, it consists of three keys: ask, nsk and ovk. wallet/getakfromask Description: To get ak key from ask key demo: curl -X POST http://127.0.0.1:8090/wallet/getakfromask -d '{ \"value\": \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" }' Parameter value: Ask key Return: Ak key wallet/getnkfromnsk Description: To get nk key from nsk key demo: curl -X POST http://127.0.0.1:8090/wallet/getnkfromnsk -d '{ \"value\": \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" }' Parameter value: Nsk key Return: Nk key wallet/getspendingkey Description: To get spending key demo: curl -X GET http://127.0.0.1:8090/wallet/getspendingkey Parameter: No Parameter Return: Spending key wallet/getdiversifier Description: To get diversifier demo: curl -X GET http://127.0.0.1:8090/wallet/getdiversifier Parameter: No Parameter Return: Diversifier wallet/getincomingviewingkey Description: To get incoming viewing key demo: curl -X POST http://127.0.0.1:8090/wallet/getincomingviewingkey -d '{ \"ak\":\"b443f1a303ef5837ba95750b48b6fef15f9c77f63a8c28c161bcd6613f423b5c\", \"nk\":\"632137e69179df3d10e252fcce85d13464c3163fe7a619edf8d43ebefa8162d9\" }' Parameter ak: Ak Parameter nk: Nk Return: Incoming viewing key wallet/getzenpaymentaddress Description: To get payment address demo: curl -X POST http://127.0.0.1:8090/wallet/getzenpaymentaddress -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameter ivk: Ivk Parameter d: D Return: Payment address wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ak\": \"bf051629fd8122cd9dd8591d72947b026c214cf7cdac1f68eff97179727d38e9\", \"nsk\": \"42963d26af8122204273fa3489d9efd6babf1f7179ff193c955a1f3d9c2df10c\", \"ovk\": \"bc9848a83966709655b12efadc9e978785858316045e0115a0e72567a9a2a823\", \"shielded_spends\": [ { \"note\": { \"value\": 500000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" }, \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\", \"voucher\": { \"tree\": { \"left\": { \"content\": \"a3d5c9b2db9699f32afec5febbd5586ce9ff33a0bef6fee5691028313b8e1f6a\" }, \"parents\": [ { \"content\": \"d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae548\" }, { \"content\": \"d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae15\" } ] }, \"rt\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\" }, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae1520d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae5482001000000000000000000000000000000000000000000000000000000000000000600000000000000\" } ], \"shielded_receives\": [ { \"note\": { \"value\": 40000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ak: Ak Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/scanandmarknotebyivk Description: To get all the notes with spent status by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Parameter ak: Ak key Parameter nk: Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ovk: Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/getrcm Description: To get a random commitment trapdoor demo: curl -X GET http://127.0.0.1:8090/wallet/getrcm Parameter: No Parameter Return: A random commitment trapdoor wallet/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameter out_points: Note information Return: A merkle tree of a note wallet/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter txid: Transaction id Parameter index: Note index Return: Note status wallet/createspendauthsig Description: To create a signature for a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/createspendauthsig -d '{ \"ask\": \"e3ebcba1531f6d9158d9c162660c5d7c04dadf77d85d7436a9c98b291ff69a09\", \"tx_hash\": \"3b78fee6e956f915ffe082284c5f18640edca9c57a5f227e5f7d7eb65ad61502\", \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" }' Parameter ask: Ask key Parameter tx_hash: Transaction hash Parameter alpha: Alpha Return: A signature wallet/createshieldnullifier Description: To create a shielded nullifier demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"voucher\": { \"tree\": { \"left\": { \"content\": \"a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143\" } }, \"rt\": \"7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e\" }, \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\" }' Parameter note: Note information Parameter voucher: Voucher information Parameter ak: Ak Parameter nk: Nk Return: A shielded nullifier wallet/getshieldtransactionhash Description: To get a shielded transaction hash demo: curl -X POST http://127.0.0.1:8090/wallet/getshieldtransactionhash -d '{ \"txID\": \"de639a64497d86bb27e34a2953093a0cc488ec4c7bc9624ac5857d3799748595\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"binding_signature\": \"2b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b\", \"spend_description\": [ { \"value_commitment\": \"cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a869\", \"anchor\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\", \"nullifier\": \"93e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35\", \"rk\": \"10c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d16\", \"zkproof\": \"abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b1\" } ], \"receive_description\": [ { \"value_commitment\": \"f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a\", \"note_commitment\": \"ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e\", \"epk\": \"719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e6\", \"c_enc\": \"3a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f\", \"c_out\": \"50be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da\", \"zkproof\": \"a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a80\" } ] }, \"type_url\": \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\": \"ShieldedTransferContract\" } ], \"ref_block_bytes\": \"0d59\", \"ref_block_hash\": \"7356ce5c35d8265e\", \"expiration\": 1559237283000, \"timestamp\": 1559201285590 }, \"raw_data_hex\": \"0a020d5922087356ce5c35d8265e40b899a3ceb02d5a940b0833128f0b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412d50a1acb020a20cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a8691220fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c285651a2093e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35222010c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d162ac001abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b122c2070a20f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a1220ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e1a20719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e622c4043a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f2a5050be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da32c001a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a802a402b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b70d68b8ebdb02d\" }' Parameter transaction: Transaction object Return: a shielded transaction hash wallet/createshieldedtransaction Description: To create shielded transaction Please refer to: demo Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/getnewshieldedaddress Description: To get new shieldedAddress demo: curl -X GET http://127.0.0.1:8090/wallet/getnewshieldedaddress Parameter: No Parameter Return: Spending key Return: Ask key Return: Nsk key Return: Outgoing viewing key Return: Ak Key Return: Nk key Return: incoming viewing key Return: Diversifier Return: pkD Return: payment address","title":"Http Api"},{"location":"api/http/#hexstring-and-base58check-transcode-demo","text":"JAVA: https://github.com/tronprotocol/wallet-cli/blob/master/src/main/java/org/tron/demo/TransactionSignDemo.java#L92 PHP: https://github.com/tronprotocol/Documentation/blob/master/TRX_CN/index.php Since v3.6, parameter 'visible' is added, when 'visible' is set true, no need to transcode the relevant address and string. This parameter is valid for all api, including solidityNode api and FullNode api. When 'visible' is set true, the format of the input address must be base58, input string must text string, so does the format of the output. If 'visible' is set false or null, the api acts the same as previous version. If the format of the parameters do not match with the set of visible, it will throw out an error. Way to set the 'visible' parameter: 1. For the api needs no parameter: by adding 'visible' parameter in the url example: http://127.0.0.1:8090/wallet/listexchanges?visible=true 2. For POST method api: By adding 'visible' parameter to the most out layer of the json example: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\", \"amount\": 1000000, \"visible\": true }' 3. For GET method api: By adding 'visible' parameter in the url, as way 1.","title":"HexString and Base58check Transcode Demo"},{"location":"api/http/#soliditynode-api","text":"SolidityNode api's default http port is 8091, when solidityNode is started, http service will be started too. /walletsolidity/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccount -d '{ \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }' Parameter address: Default hexString Return: Account object walletsolidity/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listwitnesses Parameter: No parameter Return: The list of all the witnesses /walletsolidity/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getassetissuelist Parameter: No parameter Return: The list of all the tokens /walletsolidity/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getpaginatedassetissuelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: the index of the start token Parameter limit: the amount of tokens per page Return: The list of tokens by pagination /walletsolidity/getassetissuebyname(Since Odyssey-v3.2) Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error /walletsolidity/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuelistbyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: The list of tokens /walletsolidity/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getassetissuebyid -d '{ \"value\": \"1000001\" }' Parameter value: Token id Return: Token object /walletsolidity/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8091/walletsolidity/getnowblock Parameter: No parameter Return: the latest block from solidityNode /walletsolidity/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbynum -d '{ \"num\": 100 }' Parameter num: Block height Return: Block information /walletsolidity/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction information /walletsolidity/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioncountbyblocknum -d '{ \"num\": 100 }' Parameter num: Block height Return: The number of transactions /walletsolidity/gettransactioninfobyid Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/gettransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction fee & block height /walletsolidity/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresource -d '{ \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information /walletsolidity/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdelegatedresourceaccountindex -d '{ \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\" }' Parameter value: Address, default hexString Return: Energy delegation index /walletsolidity/getexchangebyid(Since Odyssey-v3.2) Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getexchangebyid -d '{ \"id\": 1 }' Parameter id: Exchange pair id Return: Exchange pair object /walletsolidity/listexchanges(Since Odyssey-v3.2) Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8091/walletsolidity/listexchanges Parameter: No parameter Return: The list of all the exchange pairs /walletsolidity/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getaccountbyid -d '{ \"account_id\": \"6161616162626262\" }' Parameter account_id: Account id, default hexString Return: Account object /walletsolidity/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbyid-d '{ \"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\" }' Parameter value: Block id Return: Block object /walletsolidity/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylimitnext -d '{ \"startNum\": 1, \"endNum\": 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks /walletsolidity/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getblockbylatestnum -d '{ \"num\": 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks /walletextension/gettransactionsfromthis\uff08No longer supported in the latest version\uff09 Description: Query the transactions initiated by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionsfromthis -d '{ \"account\": { \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }, \"offset\": 0, \"limit\": 10, \"startTime\": 1546099200000, \"endTime\": 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionsfromthis /walletextension/gettransactionstothis\uff08No longer supported in the latest version\uff09 Description: Query the transactions received by an account demo: curl -X POST http://127.0.0.1:8091/walletextension/gettransactionstothis -d '{ \"account\": { \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }, \"offset\": 0, \"limit\": 10, \"startTime\": 1546099200000, \"endTime\": 1552028828000 }' Parameter address: Address, default hexString Parameter offset: The start index of the transactions, must not greater then 10000 Parameter limit: The number of transactions expected to return, maximum 50, offset+limit must smaller than 10000 Parameter startTime: Query start time Parameter endTime: Query end time, Default latest 7 days Return: The list of transactions Note: This api is no longer supported in the latest version, you can use the central node api: 47.90.247.237:8091/walletextension/gettransactionstothis /wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8091/wallet/getnodeinfo Parameter: No parameter Return: The node information /walletsolidity/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: transaction id Return: Deferred transaction object /walletsolidity/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8091/walletsolidity/getdeferredtransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: transaction id Return: Deferred transaction fee & block height /walletsolidity/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/walletsolidity/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameter out_points: Note information Return: A merkle tree of a note /walletsolidity/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) /walletsolidity/scanandmarknotebyivk Description: To get all the notes with spent status by ivk demo: curl -X POST http://127.0.0.1:8090/walletsolidity/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Parameter ak: Ak key Parameter nk: Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) /walletsolidity/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/walletsolidity/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ovk: Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) /walletsolidity/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/walletsolidity/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter txid: Transaction id Parameter index: Note index Return: Note status","title":"SolidityNode Api"},{"location":"api/http/#fullnode-api","text":"FullNode api's default http port is 8090, when FullNode is started, http service will be started too. wallet/createtransaction Description: Create a transfer transaction, if to address is not existed, then create the account on the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/createtransaction -d '{ \"to_address\": \"41e9d79cc47518930bc322d9bf7cddd260a0260a8d\", \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\", \"amount\": 1000 }' Parameter to_address: To address, default hexString Parameter owner_address: Owner address, default hexString Parameter amount: Transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/gettransactionsign Description: To sign a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionsign -d '{ \"transaction\": { \"txID\": \"454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000, \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"to_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"267e\", \"ref_block_hash\": \"9a447d222e8de9f2\", \"expiration\": 1530893064000, \"timestamp\": 1530893006233 } }, \"privateKey\": \"your private key\" }' Parameter transaction: Transaction object Parameter privateKey: Private key Return: Transaction after sign Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/broadcasttransaction Description: Broadcast transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasttransaction -d '{ \"signature\": [ \"97c825b41c77de2a8bd65b3df55cd4c0df59c307c0187e42321dcc1cc455ddba583dd9502e17cfec5945b34cad0511985a6165999092a6dec84c2bdd97e649fc01\" ], \"txID\": \"454f156bf1256587ff6ccdbc56e64ad0c51e4f8efea5490dcbc720ee606bc7b8\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000, \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"to_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\" } ], \"ref_block_bytes\": \"267e\", \"ref_block_hash\": \"9a447d222e8de9f2\", \"expiration\": 1530893064000, \"timestamp\": 1530893006233 } }' Parameter: Transaction after sign Return: The result of the broadcast wallet/broadcasthex Description: Broadcast transaction hex string after sign demo: curl -X POST http://127.0.0.1:8090/wallet/broadcasthex -d '{ \"transaction\":\"0A8A010A0202DB2208C89D4811359A28004098A4E0A6B52D5A730802126F0A32747970652E676F6F676C65617069732E636F6D2F70726F746F636F6C2E5472616E736665724173736574436F6E747261637412390A07313030303030311215415A523B449890854C8FC460AB602DF9F31FE4293F1A15416B0580DA195542DDABE288FEC436C7D5AF769D24206412418BF3F2E492ED443607910EA9EF0A7EF79728DAAAAC0EE2BA6CB87DA38366DF9AC4ADE54B2912C1DEB0EE6666B86A07A6C7DF68F1F9DA171EEE6A370B3CA9CBBB00\" }' Parameter: Transaction hex after sign Return: The result of the broadcast wallet/updateaccount Description: Update the name of an account demo: curl -X POST http://127.0.0.1:8090/wallet/updateaccount -d '{ \"account_name\": \"0x7570646174654e616d6531353330383933343635353139\", \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\" }' Parameter account_name: Account name, default hexString Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/votewitnessaccount Description: Vote for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/votewitnessaccount -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"votes\": [ { \"vote_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"vote_count\": 5 } ] }' Parameter owner_address: Owner address, default hexString Parameter votes: 'vote_address' stands for the address of the witness you want to vote, default hexString, 'vote_count' stands for the number of votes you want to vote Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getBrokerage Description: Query the ratio of brokerage of the witness demo: curl -X GET http://127.0.0.1:8090/wallet/getBrokerage -d '{ \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address: The address of the witness's account, default hexString Return: The ratio of brokerage of the witness wallet/getReward Description: Query unclaimed reward demo: curl -X GET http://127.0.0.1:8090/wallet/getReward -d '{ \"address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\"}' Parameter address: The address of the voter's account, default hexString Return: Unclaimed reward wallet/updateBrokerage Description: Update the ratio of brokerage demo: curl -X POST http://127.0.0.1:8090/wallet/updateBrokerage -d '{ \"owner_address\":\"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\", \"brokerage\":30 }' Parameter owner_address: The address of the witness's account, default hexString Parameter brokerage: The ratio of brokerage you want to update to Return: Transaction object wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\": \"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\": 4321, \"trx_num\": 1, \"num\": 1, \"start_time\": 1530894315158, \"end_time\": 1533894312158, \"description\": \"007570646174654e616d6531353330363038383733343633\", \"url\": \"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\": 10000, \"public_free_asset_net_limit\": 10000, \"frozen_supply\": { \"frozen_amount\": 1, \"frozen_days\": 2 } }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN wallet/updatewitness Description: Update the witness' website url demo: curl -X POST http://127.0.0.1:8090/wallet/updatewitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"update_url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameter owner_address: Owner address, default hexString Parameter update_url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/createaccount Description: Create an account demo: curl -X POST http://127.0.0.1:8090/wallet/createaccount -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"account_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\" }' Parameter owner_address: Owner address, default hexString Parameter account_address: New address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It costs 0.1 TRX wallet/createwitness Description: Apply to become a witness demo: curl -X POST http://127.0.0.1:8090/wallet/createwitness -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"url\": \"007570646174654e616d6531353330363038383733343633\" }' Parameter owner_address: Owner address, default hexString Parameter url: Website url, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{ \"owner_address\": \"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100 }' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/easytransfer Description: Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransfer -d '{ \"passPhrase\": \"your password\", \"toAddress\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"amount\": 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter amount: Transfer TRX amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferasset Description: Easy token transfer demo\uff1acurl -X POST http://127.0.0.1:8090/wallet/easytransferasset -d '{ \"passPhrase\": \"your password\", \"toAddress\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"assetId\": \"1000001\", \"amount\": 100 }' Parameter passPhrase: Password, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Transfer token amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/createaddress Description: Create an address with a password demo: curl -X POST http://127.0.0.1:8090/wallet/createaddress -d '{ \"value\": \"3230313271756265696a696e67\" }' Parameter value: Password, default hexString Return: An address Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\": 100, \"asset_name\": \"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token wallet/freezebalance Description: Freeze TRX demo: curl -X POST http://127.0.0.1:8090/wallet/freezebalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"frozen_balance\": 10000, \"frozen_duration\": 3, \"resource\": \"BANDWIDTH\", \"receiver_address\": \"414332f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter frozen_balance: TRX freeze amount Parameter frozen_duration: TRX freeze duration, at least 3 days Parameter resource: TRX freeze type, 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will receive the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezebalance Description: Unfreeze the frozen TRX that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezebalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"resource\": \"BANDWIDTH\", \"receiver_address\": \"414332f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter resource: Frozen TRX unfreeze type 'BANDWIDTH' or 'ENERGY' Parameter receiverAddress: The address that will lose the resource, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/unfreezeasset Description: Unfreeze the frozen token that is due demo: curl -X POST http://127.0.0.1:8090/wallet/unfreezeasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/withdrawbalance Description: Withdraw reward to account balance for witnesses demo: curl -X POST http://127.0.0.1:8090/wallet/withdrawbalance -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\" }' Parameter owner_address: Owner address, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: It can only withdraw once for every 24 hours wallet/updateasset Description: Update token information demo: curl -X POST http://127.0.0.1:8090/wallet/updateasset -d '{ \"owner_address\": \"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"description\": \"\", \"url\": \"\", \"new_limit\": 1000000, \"new_public_limit\": 100 }' Parameter owner_address: The issuers address of the token, default hexString Parameter description: The description of token, default hexString Parameter url: The token's website url, default hexString Parameter new_limit: Each token holder's free bandwidth Parameter new_public_limit: The total free bandwidth of the token Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/listnodes Description: Query the list of nodes connected to the ip of the api demo: curl -X GET http://127.0.0.1:8090/wallet/listnodes Parameter: No parameter Return: The list of nodes wallet/getassetissuebyaccount Description: Query the token issue information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyaccount -d '{ \"address\": \"41F9395ED64A6E1D4ED37CD17C75A1D247223CAF2D\" }' Parameter address: Token issuer's address, default hexString Return: Token object wallet/getaccountnet Description: Query the bandwidth information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountnet -d '{ \"address\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\" }' Parameter address: Address, default hexString Return: Bandwidth information wallet/getassetissuebyname Description: Query a token by token name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: Token object Note: Since Odyssey-v3.2, getassetissuebyid or getassetissuelistbyname is recommended, as since v3.2, token name can be repeatable. If the token name you query is not unique, this api will throw out an error wallet/getassetissuelistbyname(Since Odyssey-v3.2) Description: Query the list of tokens by name demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuelistbyname -d '{ \"value\": \"44756354616E\" }' Parameter value: Token name, default hexString Return: The list of tokens wallet/getassetissuebyid(Since Odyssey-v3.2) Description: Query a token by token id demo: curl -X POST http://127.0.0.1:8090/wallet/getassetissuebyid -d '{ \"value\": \"1000001\" }' Parameter value: Token id Return: Token object wallet/getnowblock Description: Query the latest block information demo: curl -X GET http://127.0.0.1:8090/wallet/getnowblock Parameter: No parameter Return: The latest block wallet/getblockbynum Description: Query a block information by block height demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbynum -d '{ \"num\": 1 }' Parameter num: Block height Return: Block information wallet/getblockbyid Description: Query a block information by block id demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbyid-d '{ \"value\": \"0000000000038809c59ee8409a3b6c051e369ef1096603c7ee723c16e2376c73\" }' Parameter value: Block id Return: Block object wallet/getblockbylimitnext Description: Query a list of blocks by range demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylimitnext -d '{ \"startNum\": 1, \"endNum\": 2 }' Parameter startNum: The start block height, itself included Parameter endNum: The end block height, itself not included Return: The list of the blocks wallet/getblockbylatestnum Description: Query the several latest blocks demo: curl -X POST http://127.0.0.1:8090/wallet/getblockbylatestnum -d '{ \"num\": 5 }' Parameter num: The number of the blocks expected to return Return: The list of the blocks wallet/gettransactionbyid Description: Query an transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction information wallet/gettransactioninfobyid(Since Odyssey-v3.2) Description: Query the transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Transaction fee & block height wallet/gettransactioncountbyblocknum(Since Odyssey-v3.2) Description: Query th the number of transactions in a specific block demo: curl -X POST http://127.0.0.1:8090/wallet/gettransactioncountbyblocknum -d '{ \"num\": 100 }' Parameter num: Block height Return: The number of transactions wallet/getaccount Description: Query an account information demo: curl -X POST http://127.0.0.1:8090/wallet/getaccount -d '{ \"address\": \"41E552F6487585C2B58BC2C9BB4492BC1F17132CD0\" }' Parameter address: Default hexString Return: Account object wallet/listwitnesses Description: Qyery the list of the witnesses demo: curl -X GET http://127.0.0.1:8090/wallet/listwitnesses Parameter: No parameter Return: The list of all the witnesses wallet/getassetissuelist Description: Query the list of all the tokens demo: curl -X GET http://127.0.0.1:8090/wallet/getassetissuelist Parameter: No parameter Return: The list of all the tokens wallet/getpaginatedassetissuelist Description: Query the list of all the tokens by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedassetissuelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: The index of the start token Parameter limit: The amount of tokens per page Return: The list of tokens by pagination wallet/getpaginatedproposallist(Since Odyssey-v3.5) Description: Query the list of all the proposals by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedproposallist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: The index of the start proposal Parameter limit: The amount of proposals per page Return: The list of proposals by pagination wallet/getpaginatedexchangelist(Odyssey-v3.2\u5f00\u59cb\u652f\u6301) Description: Query the list of all the exchange pairs by pagination demo: curl -X POST http://127.0.0.1:8090/wallet/getpaginatedexchangelist -d '{ \"offset\": 0, \"limit\": 10 }' Parameter offset: The index of the start exchange pair Parameter limit: The amount of exchange pairs per page Return: The list of exchange pairs by pagination wallet/getnextmaintenancetime Description: Query the time interval till the next vote round demo: curl -X GET http://127.0.0.1:8090/wallet/getnextmaintenancetime Parameter: No parameter Return: The time interval till the next vote round(unit: ms) wallet/easytransferbyprivate Description: TRX Easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferbyprivate -d '{ \"privateKey\": \"D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366\", \"toAddress\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\", \"amount\": 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter amount: TRX transfer amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/easytransferassetbyprivate Description: Token easy transfer demo: curl -X POST http://127.0.0.1:8090/wallet/easytransferassetbyprivate -d '{ \"privateKey\": \"D95611A9AF2A2A45359106222ED1AFED48853D9A44DEFF8DC7913F5CBA727366\", \"toAddress\": \"4112E621D5577311998708F4D7B9F71F86DAE138B5\", \"assetId\": \"1000001\", \"amount\": 10000 }' Parameter privateKey: Private key, default hexString Parameter toAddress: To address, default hexString Parameter assetId: Token id Parameter amount: Token transfer amount Return: Transaction object & the result of the broadcast Note: Using this api may leak out private key, please ensure using this api in a secure network The unit of 'amount' is the smallest unit of the token wallet/generateaddress Description: Generate address and private key demo: curl -X GET http://127.0.0.1:8090/wallet/generateaddress Parameter: No parameter Return: Address and private key Note: Using this api may leak out private key, please ensure using this api in a secure network wallet/validateaddress Description: Check the validity of the address demo: curl -X POST http://127.0.0.1:8090/wallet/validateaddress -d '{ \"address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\" }' Return: The check result wallet/deploycontract Description: Deploy a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/deploycontract -d '{ \"abi\": \"[{\\\"constant\\\":false,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"set\\\",\\\"outputs\\\":[],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"constant\\\":true,\\\"inputs\\\":[{\\\"name\\\":\\\"key\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"get\\\",\\\"outputs\\\":[{\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"payable\\\":false,\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"}]\", \"bytecode\": \"608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029\", \"parameter\": \"\", \"call_value\": 100, \"name\": \"SomeContract\", \"consume_user_resource_percent\": 30, \"fee_limit\": 10, \"origin_energy_limit\": 10, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameter abi: Abi Parameter bytecode: Bytecode, default hexString Parameter parameter: The list of the parameters of the constructor, It should be converted hexString after encoded according to ABI encoder. If constructor has no parameter, this can be optional Parameter consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call (Optional) Parameter token_id: The id of trc10 token transfer to the contract (Optional) Parameter owner_address: Owner address of the contract, default hexString Parameter name: Contract name Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/triggersmartcontract Description: Trigger smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/triggersmartcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"fee_limit\": 10, \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameter contract_address: Contract address, default hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a js tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter call_token_value: The amount of trc10 token transfer to the contract for each call Parameter token_id: The id of trc10 token transfer to the contract Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/getcontract Description: Query a contract demo: curl -X POST http://127.0.0.1:8090/wallet/getcontract -d '{ \"value\": \"4189139CB1387AF85E3D24E212A008AC974967E561\" }' Parameter value: Contract address, default hexString Return: Smart contract object wallet/proposalcreate Description: Create a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalcreate -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"parameters\": [ { \"key\": 0, \"value\": 100000 }, { \"key\": 1, \"value\": 2 } ] }' Parameter owner_address: Creator address Parameter parameters: Proposal parameters Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getproposalbyid Description: Query a proposal by proposal id demo: curl -X POST http://127.0.0.1:8090/wallet/getproposalbyid -d '{ \"id\": 1 }' Parameter id: Proposal id Return: The proposal information wallet/listproposals Description: Query all the proposals demo: curl -X POST http://127.0.0.1:8090/wallet/listproposals Parameter: No parameter Return: The list of all the proposals wallet/proposalapprove Description: To approve a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposalapprove -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1, \"is_add_approval\": true }' Parameter owner_address: The address that makes the approve action, default hexString Parameter proposal_id: Proposal id Parameter is_add_approval: Whether to approve Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/proposaldelete Description: To delete a proposal demo: curl -X POST http://127.0.0.1:8090/wallet/proposaldelete -d '{ \"owner_address\": \"419844F7600E018FD0D710E2145351D607B3316CE9\", \"proposal_id\": 1 }' Parameter owner_address: Owner address of the proposal, default hexString Parameter proposal_id: Proposal id Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getaccountresource Description: Query the resource information of an account demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountresource -d '{ \"address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\" }' Parameter address: Address, default hexString Return: The resource information wallet/exchangecreate Description: Create an exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangecreate -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"first_token_id\": \"token_a\", \"first_token_balance\": 100, \"second_token_id\": \"token_b\", \"second_token_balance\": 200 }' Parameter first_token_id: The first token's id, default hexString Parameter first_token_balance: The first token's balance Parameter second_token_id: The second token's id, default hexString Parameter second_token_balance: The second token's balance Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'first_token_balance' and 'second_token_balance' is the smallest unit of the token wallet/exchangeinject Description: Inject funds for exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangeinject -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token inject amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangewithdraw Description: Withdraw from exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangewithdraw -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Token withdraw amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' is the smallest unit of the token wallet/exchangetransaction Description: Participate the transaction of exchange pair demo: curl -X POST http://127.0.0.1:8090/wallet/exchangetransaction -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"exchange_id\": 1, \"token_id\": \"74726f6e6e616d65\", \"quant\": 100, \"expected\": 10 }' Parameter owner_address: Owner address of the exchange pair, default hexString Parameter exchange_id: Exchange pair id Parameter token_id: Token id, default hexString Parameter quant: Sell token amount Parameter expected: Expected token amount to get Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'quant' and 'expected' is the smallest unit of the token wallet/getexchangebyid Description: Query an exchange pair by exchange pair id demo: curl -X POST http://127.0.0.1:8090/wallet/getexchangebyid -d '{ \"id\": 1 }' Parameter id: Exchange pair id Return: Exchange pair information wallet/listexchanges Description: Query the list of all the exchange pairs demo: curl -X GET http://127.0.0.1:8090/wallet/listexchanges Parameter: No parameter Return: The list of all the exchange pairs wallet/getchainparameters Description: Query the parameters of the blockchain used for witnessses to create a proposal demo: curl -X GET http://127.0.0.1:8090/wallet/getchainparameters Parameter: No parameter Return: The list of parameters of the blockchain wallet/updatesetting Description: Update the consume_user_resource_percent parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"consume_user_resource_percent\": 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter consume_user_resource_percent: Consume user's resource percentage Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/updateenergylimit Description: Update the origin_energy_limit parameter of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/updatesetting -d '{ \"owner_address\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"contract_address\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\", \"origin_energy_limit\": 7 }' Parameter owner_address: Owner address of the smart contract, default hexString Parameter contract_address: Smart contract address, default hexString Parameter origin_energy_limit: The maximum resource consumption of the creator in one execution or creation Parameter permission_id: Optional, for multi-signature use Return: Transaction object wallet/getdelegatedresource(Since Odyssey-v3.2) Description: Query the energy delegation information demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresource -d '{ \"fromAddress\": \"419844f7600e018fd0d710e2145351d607b3316ce9\", \"toAddress\": \"41c6600433381c731f22fc2b9f864b14fe518b322f\" }' Parameter fromAddress: Energy from address, default hexString Parameter toAddress: Energy to address, default hexString Return: Energy delegation information wallet/getdelegatedresourceaccountindex(Since Odyssey-v3.2) Description: Query the energy delegation index by an account demo: curl -X POST http://127.0.0.1:8090/wallet/getdelegatedresourceaccountindex -d '{ \"value\": \"419844f7600e018fd0d710e2145351d607b3316ce9\" }' Parameter value: Address, default hexString Return: Energy delegation index wallet/getnodeinfo(Since Odyssey-v3.2) Description: Query the current node infromation demo: curl -X GET http://127.0.0.1:8090/wallet/getnodeinfo Parameter: No Parameter Return: The node information wallet/setaccountid Description: To set an account id for an account demo: curl -X POST http://127.0.0.1:8090/wallet/setaccountid -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"account_id\": \"6161616162626262\" }' Parameter owner_address: Owner address, default hexString Parameter account_id: Account id, default hexString Return: Transaction object wallet/getaccountbyid Description: Query an account information by account id demo: curl -X POST http://127.0.0.1:8090/wallet/getaccountbyid -d '{ \"account_id\": \"6161616162626262\" }' Parameter account_id: Account id, default hexString Return: Account object wallet/getdeferredtransactionbyid Description: Query the deferred transaction infromation by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactionbyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Deferred transaction object wallet/canceldeferredtransactionbyid Description: Query a deferred transaction by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/canceldeferredtransactionbyid -d '{ \"transactionId\": \"34e6b6497b71100756790a7f20cd729376768dd2bebb6a4a9c5e87b920d5de10\", \"ownerAddress\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\" }' Parameter owner_address: Owner address of the transaction, default hexString Parameter transactionId: Transaction id Return: Transaction object wallet/getdeferredtransactioninfobyid Description: Query the deferred transaction fee, block height by transaction id demo: curl -X POST http://127.0.0.1:8090/wallet/getdeferredtransactioninfobyid -d '{ \"value\": \"309b6fa3d01353e46f57dd8a8f27611f98e392b50d035cef213f2c55225a8bd2\" }' Parameter value: Transaction id Return: Deferred transaction fee & block height wallet/triggerconstantcontract Description: Trigger the constant of the smart contract, the transaction is off the blockchain demo: curl -X POST http://127.0.0.1:8090/wallet/triggerconstantcontract -d '{ \"contract_address\": \"4189139CB1387AF85E3D24E212A008AC974967E561\", \"function_selector\": \"set(uint256,uint256)\", \"parameter\": \"00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002\", \"fee_limit\": 10, \"call_value\": 100, \"owner_address\": \"41D1E7A6BC354106CB410E65FF8B181C600FF14292\" }' Parameter contract_address: Smart contract address, defualt hexString Parameter function_selector: Function call, must not leave a blank space Parameter parameter: The parameter passed to 'function_selector', the format must match with the VM's requirement. You can use a hs tool provided by remix to convert a parameter like [1,2] to the format that VM requires Parameter fee_limit: The maximum TRX burns for resource consumption Parameter call_value: The TRX transfer to the contract for each call Parameter owner_address: Owner address that triggers the contract, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of TRX in the parameters is SUN wallet/clearabi Description: To clear the abi of a smart contract demo: curl -X POST http://127.0.0.1:8090/wallet/clearabi -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"contract_address\": \"417bcb781f4743afaacf9f9528f3ea903b3782339f\" }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object wallet/addtransactionsign Description: To sign the transaction of trigger constant contract demo: curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d '{ \"owner_address\": \"41a7d8a35b260395c14aa456297662092ba3b76fc0\", \"contract_address\": \"417bcb781f4743afaacf9f9528f3ea903b3782339f\" }' Parameter owner_address: Owner address of the smart contract Parameter contract_address: Smart contract address, default hexString Return: Transaction object after sign wallet/getsignweight Description: Query the current signatures total weight of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{ \"visible\": true, \"signature\": [ \"36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200\" ], \"txID\": \"4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\", \"Permission_id\": 2 } ], \"ref_block_bytes\": \"0380\", \"ref_block_hash\": \"6cdc8193f096be0f\", \"expiration\": 1556249055000, \"timestamp\": 1556248995694 }, \"raw_data_hex\": \"0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d\" }' Parameter: Transaction object after sign Return: The current signatures total weight wallet/getapprovedlist Description: Query the signatures list of a transaction after sign demo: curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{ \"visible\": true, \"signature\": [ \"36c9d227b9dd6b6f377d018bb2df784be884f28c743dc97edfdaa8bd64b2ffb058bca24a4eb8b4543a052a4f353fee8cb9e606ff739c74d22f9451c7a35c8f5200\" ], \"txID\": \"4d928f7adfbad5c82f5b8518a6f7b7c5e459d06d1cb5306c61fad8a793587d2d\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"amount\": 1000000, \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"to_address\": \"TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW\" }, \"type_url\": \"type.googleapis.com/protocol.TransferContract\" }, \"type\": \"TransferContract\", \"Permission_id\": 2 } ], \"ref_block_bytes\": \"0380\", \"ref_block_hash\": \"6cdc8193f096be0f\", \"expiration\": 1556249055000, \"timestamp\": 1556248995694 }, \"raw_data_hex\": \"0a02038022086cdc8193f096be0f40989eb0bda52d5a69080112630a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412320a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18c0843d280270eeceacbda52d\" }' Parameter: Transaction object after sign Return: The list of the signatures wallet/accountpermissionupdate Description: To set multi-signature for an account demo: curl -X POST http://127.0.0.1:8090/wallet/accountpermissionupdate -d '{ \"owner_address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"owner\": { \"type\": 0, \"permission_name\": \"owner\", \"threshold\": 1, \"keys\": [ { \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"witness\": { \"type\": 1, \"permission_name\": \"witness\", \"threshold\": 1, \"keys\": [ { \"address\": \"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\": 1 } ] }, \"actives\": [ { \"type\": 2, \"permission_name\": \"active12323\", \"threshold\": 2, \"operations\": \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", \"keys\": [ { \"address\": \"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\", \"weight\": 1 }, { \"address\": \"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\", \"weight\": 1 } ] } ], \"visible\": true }' Parameter owner_address: Owner address of the account, default hexString Parameter owner: Account owner permission Parameter witness: Account witness permission, only for witness Parameter actives: Operation permission Return: Transaction object wallet/getexpandedspendingkey Description: To get expanded spending keys from spending key demo: curl -X POST http://127.0.0.1:8090/wallet/getexpandedspendingkey -d '{ \"value\": \"06b02aaa00f230b0887ff57a6609d76691369972ac3ba568fe7a8a0897fce7c4\" }' Parameter value: Spending key Return: Expanded spending keys, it consists of three keys: ask, nsk and ovk. wallet/getakfromask Description: To get ak key from ask key demo: curl -X POST http://127.0.0.1:8090/wallet/getakfromask -d '{ \"value\": \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\" }' Parameter value: Ask key Return: Ak key wallet/getnkfromnsk Description: To get nk key from nsk key demo: curl -X POST http://127.0.0.1:8090/wallet/getnkfromnsk -d '{ \"value\": \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\" }' Parameter value: Nsk key Return: Nk key wallet/getspendingkey Description: To get spending key demo: curl -X GET http://127.0.0.1:8090/wallet/getspendingkey Parameter: No Parameter Return: Spending key wallet/getdiversifier Description: To get diversifier demo: curl -X GET http://127.0.0.1:8090/wallet/getdiversifier Parameter: No Parameter Return: Diversifier wallet/getincomingviewingkey Description: To get incoming viewing key demo: curl -X POST http://127.0.0.1:8090/wallet/getincomingviewingkey -d '{ \"ak\":\"b443f1a303ef5837ba95750b48b6fef15f9c77f63a8c28c161bcd6613f423b5c\", \"nk\":\"632137e69179df3d10e252fcce85d13464c3163fe7a619edf8d43ebefa8162d9\" }' Parameter ak: Ak Parameter nk: Nk Return: Incoming viewing key wallet/getzenpaymentaddress Description: To get payment address demo: curl -X POST http://127.0.0.1:8090/wallet/getzenpaymentaddress -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameter ivk: Ivk Parameter d: D Return: Payment address wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ivk\":\"8c7852e10862d8eec058635974f70f24c1f8d73819131bb5b54028d0a9408a03\", \"d\":\"736ba8692ed88a5473e009\" }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/createshieldedtransactionwithoutspendauthsig Description: To create shielded transaction without using ask demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldedtransactionwithoutspendauthsig -d '{ \"ak\": \"bf051629fd8122cd9dd8591d72947b026c214cf7cdac1f68eff97179727d38e9\", \"nsk\": \"42963d26af8122204273fa3489d9efd6babf1f7179ff193c955a1f3d9c2df10c\", \"ovk\": \"bc9848a83966709655b12efadc9e978785858316045e0115a0e72567a9a2a823\", \"shielded_spends\": [ { \"note\": { \"value\": 500000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" }, \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\", \"voucher\": { \"tree\": { \"left\": { \"content\": \"a3d5c9b2db9699f32afec5febbd5586ce9ff33a0bef6fee5691028313b8e1f6a\" }, \"parents\": [ { \"content\": \"d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae548\" }, { \"content\": \"d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae15\" } ] }, \"rt\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\" }, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20d0420777afdc4151c3f14fbe4c714d82dc15873edb1ca65ebb3887334a4bae1520d9c38484296b3aa8f5e8b59d418a3775e2bb414e75498ad352e4614f05aae5482001000000000000000000000000000000000000000000000000000000000000000600000000000000\" } ], \"shielded_receives\": [ { \"note\": { \"value\": 40000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] }' Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ak: Ak Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/scannotebyivk Description: To get all the notes by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/scanandmarknotebyivk Description: To get all the notes with spent status by ivk demo: curl -X POST http://127.0.0.1:8090/wallet/scanandmarknotebyivk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ivk\": \"80a481c3c739e54b4e0608090b3a1a6e9f8dce42346e95bf5a2d8a487bf45c05\", \"ak\": \"1d4f9b5551f4aa9443ceb263f0e208eb7e26080264571c5ef06de97a646fe418\", \"nk\": \"748522c7571a9da787e43940c9a474aa0c5c39b46c338905deb6726fa3678bdb\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ivk: Incoming viewing key Parameter ak: Ak key Parameter nk: Nk key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/scannotebyovk Description: To get all the notes by ovk demo: curl -X POST http://127.0.0.1:8090/wallet/scannotebyovk -d '{ \"start_block_index\": 0, \"end_block_index\": 100, \"ovk\": \"705145aa18cbe6c11d5d0011419a98f3d5b1d341eb4727f1315597f4bdaf8539\" }' Parameter start_block_index: The start block height, itself included Parameter end_block_index: The end block height, itself not included Parameter ovk: Outgoing viewing key Return: Notes list Note: Range limit (end_block_index - start_block_index <= 1000) wallet/getrcm Description: To get a random commitment trapdoor demo: curl -X GET http://127.0.0.1:8090/wallet/getrcm Parameter: No Parameter Return: A random commitment trapdoor wallet/getmerkletreevoucherinfo Description: To get a merkle tree infromation of a note demo: curl -X POST http://127.0.0.1:8090/wallet/getmerkletreevoucherinfo -d '{ \"out_points\":[{ \"hash\":\"185b3e085723f5862b3a3c3cf54d52f5c1eaf2541e3a1e0ecd08bc12cd958d74\", \"index\":0 }] }' Parameter out_points: Note information Return: A merkle tree of a note wallet/isspend Description: To check whether a note is spent or not demo: curl -X POST http://127.0.0.1:8090/wallet/isspend -d '{ \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\", \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"txid\": \"7d09e471bb047d3ac044d5d6691b3721a2dddbb683ac02c207fbe78af6302463\", \"index\": 1 }' Parameter ak: Ak key Parameter nk: Nk key Parameter note: Note information Parameter txid: Transaction id Parameter index: Note index Return: Note status wallet/createspendauthsig Description: To create a signature for a transaction demo: curl -X POST http://127.0.0.1:8090/wallet/createspendauthsig -d '{ \"ask\": \"e3ebcba1531f6d9158d9c162660c5d7c04dadf77d85d7436a9c98b291ff69a09\", \"tx_hash\": \"3b78fee6e956f915ffe082284c5f18640edca9c57a5f227e5f7d7eb65ad61502\", \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\" }' Parameter ask: Ask key Parameter tx_hash: Transaction hash Parameter alpha: Alpha Return: A signature wallet/createshieldnullifier Description: To create a shielded nullifier demo: curl -X POST http://127.0.0.1:8090/wallet/createshieldnullifier -d '{ \"note\": { \"payment_address\": \"ztron1aqgauawtkelxfu2w6s48cwh0mchjt6kwpj44l4wym3pullx0294j4r4v7kpm75wnclzycsw73mq\", \"rcm\": \"74a16c1b27ec7fbf06881d9d35ddaab1554838b1bddcd54f6bd8a9fb4ba0b80a\", \"value\": 500000000 }, \"voucher\": { \"tree\": { \"left\": { \"content\": \"a4d763fae3fee78964ccdf7567ec3062c95a5b97825d731202d3dfa6cb01c143\" } }, \"rt\": \"7dc3652c2a16e8518a8be0e3e038f9d28c3eb96f13e8da8acc2a9b650702f33e\" }, \"ak\": \"a3e65d509b675aaa2aeda977ceff11eebd76218079b6f543d78a615e396ca129\", \"nk\": \"62cfda9bea09a53cf2a21022057913734a8458969e11e0bb9c59ead48fbce83e\" }' Parameter note: Note information Parameter voucher: Voucher information Parameter ak: Ak Parameter nk: Nk Return: A shielded nullifier wallet/getshieldtransactionhash Description: To get a shielded transaction hash demo: curl -X POST http://127.0.0.1:8090/wallet/getshieldtransactionhash -d '{ \"txID\": \"de639a64497d86bb27e34a2953093a0cc488ec4c7bc9624ac5857d3799748595\", \"raw_data\": { \"contract\": [ { \"parameter\": { \"value\": { \"binding_signature\": \"2b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b\", \"spend_description\": [ { \"value_commitment\": \"cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a869\", \"anchor\": \"fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c28565\", \"nullifier\": \"93e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35\", \"rk\": \"10c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d16\", \"zkproof\": \"abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b1\" } ], \"receive_description\": [ { \"value_commitment\": \"f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a\", \"note_commitment\": \"ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e\", \"epk\": \"719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e6\", \"c_enc\": \"3a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f\", \"c_out\": \"50be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da\", \"zkproof\": \"a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a80\" } ] }, \"type_url\": \"type.googleapis.com/protocol.ShieldedTransferContract\" }, \"type\": \"ShieldedTransferContract\" } ], \"ref_block_bytes\": \"0d59\", \"ref_block_hash\": \"7356ce5c35d8265e\", \"expiration\": 1559237283000, \"timestamp\": 1559201285590 }, \"raw_data_hex\": \"0a020d5922087356ce5c35d8265e40b899a3ceb02d5a940b0833128f0b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412d50a1acb020a20cbe1063adbe7e10919421fa6133f03150253913f5aff02d165e2c019cea4a8691220fb1115d5ddd16c5427c3a608d6b5add5967e70f51c890307c6142083a2c285651a2093e329d464e1dbddc8bb4d2dcc939a796dfe11e985d4e9033a15edf0e3df4f35222010c702d6dff1509502ee5acc0b01d4b4531b2ff53b0dd54488aea6031b5e6d162ac001abf64b3beacfd873b1db764c3da9f739993518f3f740e761cb8af60682b7171892895c3ccfb550c3cf757e906dbf5313a3676b8226b0b84960f76a185c8d3fdfc3fa9c08479a704852d7b3dfeb913cf13e01c25657561e00a06c61e7c65b50b812902ddc4f17bfe2bcb2f247c2dc6132d0f0e0abcecc0332fdd99077af10d07bbdb88c4fd257948428e233c57f84eee8b2eeab2162c1aeccf2e1dfaa306d5803a8b2d281a549440fbd5a3657a830c1ca07a384cea446aa077b195b29b23023b122c2070a20f6d45db8ec5a1c8dbbde040b4ea138efbe8db2d0597ed2306ff3fdd0620b3c5a1220ec3f5472ac8114a9a07987d1c2a0e1254504e352d9574971e77084293900312e1a20719eeb5ebaeeccc55c9f0d73767aadf0c0513603400ccb50bd789637d984b8e622c4043a6c4fe0e79f5b23fed34a419c4728d0b26bca23180a22871743b0a9444c27663cf07c55a0ea6db504d70421768bf17384e180b2ad8b8be88ff5cf662c53a4ba086effc3a4b1df39265f71dfac884bff5a69e1dcdcae8aecf6ae443168ffab692a5c1e4908b415dd830dcf6432fae1c32461132080da74d6b83d3d00887eb2ce9965a749f8d8410ea4182969371ac2fd5e0e74d27d883492a08e6209cd9959d74bb67c2a9fe7faac5a4777f1bff19cf0b6398a2faa9b194bbb93d60f132f382f7d693a722e8cbca1da084ee7e0c371397419a7259d1fa0943078cfe5ea352e4b53907bb6c04ca8ad409fb0ae0b110a6b312200e21ab79d543ae7aeb16802cf87afdac1e8954038caa42818f4ca2847fd642360c098accfeeade4abd1cc9ca3315a4336be224ba3516973c7dae3f41875457236675993df38d3a544470c4f9335d77b005e6a9aec40fd881b34852ec9bbbcc3d24ee92930eae770a5462ce04c4e37b0524ef07e00e8d58c810d6aefb19fa7bc2c3a2fdfab6dd4fe73dbecc0795a280f9b7ca35cc8bc1062aed8e26bd81ba33c6f4c318974636f6d796723e77772ced3dbc1f42afec6fc9bb61f8beac704affea9baf2e2de226250c1d427c7d78b1eb1d239e1f3eb6af0f017b80541333f4fce17340048d826b9b0be8477c996ad8bfc3440dc686fdff6d0d63986db4d95962d7977289cbfd14c745de7c79d4dc0bcd220e5b4ced5b409e79142e0f336e44ca29a9a87f6f43707d8c4936e895236dd2b393a478a8bc27b1f682496ba84a0ddc549da06cb7855c4d8680dc66ac40240733b7f2a5050be6e77854d4c427b2af4f16e5275f0b0c206b3ea2d2a24ffb287ea356f323523354cd83d15e7c48e6f1fa103dfca3d49ca2263dbb0cd8bfb35d72cdcad1351de6fba7a30aea27184a68bcda19cc6da32c001a4e6c50d5753092d005689922c2bdeafc98775bce59db840974163ace23c13fec18112e32aae1c39842c645ed172ad8fa277e63c1e3d6d7fb12eb15d56b573237b776f562a81d0e6be362d147d8604fdfec421482270ca82950de1883fda06e719f5d256d7a039769bffc570a1778d70c17295d1c0336a6ae0903d2460dc139a9563c2d40f37bffefa73003a55af1ff0861b6f79ef40099b6a0cb25ab3f40727210e4629647d0711abff125712a5f0d64fcb6e6a6b0b34478d7da0552b493a802a402b8ae5e11ecad3e6946f54b7ad513bd8692a3edae72d29e266b28e47c9b37ccdb38e3b6433575694b6681136b1734f85afcfe672061d2ee7368755ad0b96a80b70d68b8ebdb02d\" }' Parameter transaction: Transaction object Return: a shielded transaction hash wallet/createshieldedtransaction Description: To create shielded transaction Please refer to: demo Parameter transparent_from_address: Transparent sender's address Parameter from_amount: Send amount from transparent address Parameter ask: Ask Parameter nsk: Nsk Parameter ovk: Ovk Parameter shielded_receives: Shielded receive information Parameter shieldedSpends: Shielded spend information Parameter transparent_to_address: Transparent receiver's address Parameter to_amount: Send amount to transparent address Return: Transaction object wallet/getnewshieldedaddress Description: To get new shieldedAddress demo: curl -X GET http://127.0.0.1:8090/wallet/getnewshieldedaddress Parameter: No Parameter Return: Spending key Return: Ask key Return: Nsk key Return: Outgoing viewing key Return: Ak Key Return: Nk key Return: incoming viewing key Return: Diversifier Return: pkD Return: payment address","title":"FullNode Api"},{"location":"api/rpc/","text":"RPC List For the specific definition of API, please refer to the following link: https://github.com/tronprotocol/protocol/blob/master/api/api.proto https://github.com/tronprotocol/protocol/blob/master/core/Contract.proto NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. 1. Get account information Interface statement: rpc GetAccount (Account) returns (Account) {} Nodes: Fullnode and SolidityNode 2. TRX transfer Interface statement: rpc CreateTransaction (TransferContract) returns (Transaction) {} Nodes: Fullnode 3. Broadcast transaction Interface statement: rpc BroadcastTransaction (Transaction) returns (Return) {} Nodes: Fullnode Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after witness verification. 4. Create an account Interface statement: rpc CreateAccount (AccountCreateContract) returns (Transaction) {} Nodes: FullNode 5. Account name update Interface statement: rpc UpdateAccount (AccountUpdateContract) returns (Transaction) {} Nodes: Fullnode 6. Vote for super representative candidates Interface statement: rpc VoteWitnessAccount (VoteWitnessContract) returns (Transaction) {} Nodes: FullNode 7. Query the ratio of brokerage of the witness Interface statement: rpc GetBrokerageInfo (BytesMessage) returns (NumberMessage) {} Nodes: FullNode 8. Query unclaimed reward Interface statement: rpc GetRewardInfo (BytesMessage) returns (NumberMessage) {} Nodes: FullNode 9. Update the ratio of brokerage Interface statement: rpc UpdateBrokerage (UpdateBrokerageContract) returns (TransactionExtention) {} Nodes: FullNode 10. Issue a token Interface statement: rpc CreateAssetIssue (AssetIssueContract) returns (Transaction) {} Nodes: FullNode 11. Query of list of super representative candidates Interface statement: rpc ListWitnesses (EmptyMessage) returns (WitnessList) {} Nodes: FullNode and SolidityNode 12. Application for super representative Interface statement: rpc CreateWitness (WitnessCreateContract) returns (Transaction) {} Nodes: FullNode Description: To apply to become TRON\u2019s Super Representative candidate. 13. Information update of Super Representative candidates Interface statement: rpc UpdateWitness (WitnessUpdateContract) returns (Transaction) {} Nodes: FullNode Description: Update the website url of the SR. 14. Token transfer Interface statement\u2028: rpc TransferAsset (TransferAssetContract) returns (Transaction){} Node: FullNode 15. Participate a token Interface statement: rpc ParticipateAssetIssue (ParticipateAssetIssueContract) returns (Transaction) {} Nodes: FullNode 16. Query the list of nodes connected to the ip of the api Interface statement: rpc ListNodes (EmptyMessage) returns (NodeList) {} Nodes: FullNode and SolidityNode 17. Query the list of all issued tokens Interface statement: rpc GetAssetIssueList (EmptyMessage) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 18. Query the token issued by a given account Interface statement: rpc GetAssetIssueByAccount (Account) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 19. Query the token information by token name Interface statement: rpc GetAssetIssueByName (BytesMessage) returns (AssetIssueContract) {} Nodes: FullNode and Soliditynode 20. Query the list of tokens by timestamp Interface statement: rpc GetAssetIssueListByTimestamp (NumberMessage) returns (AssetIssueList){} Nodes: SolidityNode 21. Get current block information Interface statement: rpc GetNowBlock (EmptyMessage) returns (Block) {} Nodes: FullNode and SolidityNode 22. Get a block by block height Interface statement: rpc GetBlockByNum (NumberMessage) returns (Block) {} Nodes: FullNode and SolidityNode 23. Get the total number of transactions Interface statement: rpc TotalTransaction (EmptyMessage) returns (NumberMessage) {} Nodes: FullNode and SolidityNode 24. Query the transaction by transaction id Interface statement: rpc getTransactionById (BytesMessage) returns (Transaction) {} Nodes: SolidityNode 25. Query the transaction by timestamp Interface statement: rpc getTransactionsByTimestamp (TimeMessage) returns (TransactionList) {} Nodes: SolidityNode 26. Query the transactions initiated by an account Interface statement: rpc getTransactionsFromThis (Account) returns (TransactionList) {} Nodes: SolidityNode 27. Query the transactions received by an account Interface statement: rpc getTransactionsToThis (Account) returns (NumberMessage) {} Nodes: SolidityNode 28. Freeze TRX Interface statement: rpc FreezeBalance (FreezeBalanceContract) returns (Transaction) {} Nodes: FullNode 29. Unfreeze TRX Interface statement: rpc UnfreezeBalance (UnfreezeBalanceContract) returns (Transaction) {} Nodes: FullNode 30. Block producing reward redemption Interface statement: rpc WithdrawBalance (WithdrawBalanceContract) returns (Transaction) {} Nodes: FullNode 31. Unfreeze token balance Interface statement: rpc UnfreezeAsset (UnfreezeAssetContract) returns (Transaction) {} Nodes: FullNode 32. Query the next maintenance time Interface statement: rpc GetNextMaintenanceTime (EmptyMessage) returns (NumberMessage) {} Nodes: FullNode 33. Query the transaction fee & block information Interface statement: rpc GetTransactionInfoById (BytesMessage) returns (TransactionInfo) {} Nodes: SolidityNode 34. Query block information by block id Interface statement: rpc GetBlockById (BytesMessage) returns (Block) {} Nodes: FullNode 35. Update token information Interface statement: rpc UpdateAsset (UpdateAssetContract) returns (Transaction) {} Nodes: Fullnode Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption. 36. Query the list of all the tokens by pagination Interface statement: rpc GetPaginatedAssetIssueList (PaginatedMessage) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 37. To sign a transaction Interface statement: rpc GetTransactionSign (TransactionSign) returns (Transaction) {} Nodes: FullNode 38. Address and private key creation Interface statement: rpc CreateAdresss (BytesMessage) returns (BytesMessage) {} Nodes: Fullnode 39. TRX easy transfer Interface statement: rpc EasyTransfer (EasyTransferMessage) returns (EasyTransferResponse) {} Nodes: FullNode 40. Deploy a smart contract Interface statement: rpc DeployContract (CreateSmartContract) returns (TransactionExtention) {} Nodes: FullNode and SolidityNode 41. Trigger a smart contract Interface statement: rpc TriggerContract (TriggerSmartContract) returns (TransactionExtention) {} Nodes: FullNode 42. Create a shielded transaction Interface statement: rpc CreateShieldedTransaction (PrivateParameters) returns (TransactionExtention) {} Nodes: FullNode 43. Get a Merkle tree information of a note Interface statement: rpc GetMerkleTreeVoucherInfo (OutputPointInfo) returns (IncrementalMerkleVoucherInfo) {} Nodes: FullNode 44. Scan note by ivk Interface statement: rpc ScanNoteByIvk (IvkDecryptParameters) returns (DecryptNotes) {}; Nodes: FullNode 45. Scan note by ovk Interface statement: rpc ScanNoteByOvk (OvkDecryptParameters) returns (DecryptNotes) {}; Nodes: FullNode 46. Get spending key Interface statement: rpc GetSpendingKey (EmptyMessage) returns (BytesMessage) {} Nodes: FullNode 47. Get expanded spending key Interface statement: rpc GetExpandedSpendingKey (BytesMessage) returns (ExpandedSpendingKeyMessage) {} Nodes: FullNode 48. Get ak from ask Interface statement: rpc GetAkFromAsk (BytesMessage) returns (BytesMessage) {} Nodes: FullNode 49. Get nk from nsk Interface statement: rpc GetNkFromNsk (BytesMessage) returns (BytesMessage) {} Nodes: FullNode 50. Get incoming viewing key Interface statement: rpc GetIncomingViewingKey (ViewingKeyMessage) returns (IncomingViewingKeyMessage) {} Nodes: FullNode 51. Get diversifier Interface statement: rpc GetDiversifier (EmptyMessage) returns (DiversifierMessage) {} Nodes: FullNode 52. Get zen payment address Interface statement: rpc GetZenPaymentAddress (IncomingViewingKeyDiversifierMessage) returns (PaymentAddressMessage) {} Nodes: FullNode 53. Get rcm Interface statement: rpc GetRcm (EmptyMessage) returns (BytesMessage) {} Nodes: FullNode 54. Get a note status of is spent or not Interface statement: rpc IsSpend (NoteParameters) returns (SpendResult) {} Nodes: FullNode 55. Create a shielded transaction without using ask Interface statement: rpc CreateShieldedTransactionWithoutSpendAuthSig (PrivateParametersWithoutAsk) returns (TransactionExtention) {}; Nodes: FullNode 56. Create a shielded transaction hash Interface statement: rpc GetShieldTransactionHash (Transaction) returns (BytesMessage) {}; Nodes: FullNode 57. Create a signature for a shielded transaction Interface statement: rpc CreateSpendAuthSig (SpendAuthSigParameters) returns (BytesMessage) {}; Nodes: FullNode 58. Create a shield nullifier Interface statement: rpc CreateShieldNullifier (NfParameters) returns (BytesMessage) {}; Nodes: FullNode 59. Get new shielded address Interface statement: rpc GetNewShieldedAddress (EmptyMessage) returns (ShieldedAddressInfo){} Nodes: FullNode","title":"Rpc Api"},{"location":"api/rpc/#rpc-list","text":"For the specific definition of API, please refer to the following link: https://github.com/tronprotocol/protocol/blob/master/api/api.proto https://github.com/tronprotocol/protocol/blob/master/core/Contract.proto NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. 1. Get account information Interface statement: rpc GetAccount (Account) returns (Account) {} Nodes: Fullnode and SolidityNode 2. TRX transfer Interface statement: rpc CreateTransaction (TransferContract) returns (Transaction) {} Nodes: Fullnode 3. Broadcast transaction Interface statement: rpc BroadcastTransaction (Transaction) returns (Return) {} Nodes: Fullnode Description: Transfer, vote, issuance of token, or participation in token offering. Sending signed transaction information to node, and broadcasting it to the entire network after witness verification. 4. Create an account Interface statement: rpc CreateAccount (AccountCreateContract) returns (Transaction) {} Nodes: FullNode 5. Account name update Interface statement: rpc UpdateAccount (AccountUpdateContract) returns (Transaction) {} Nodes: Fullnode 6. Vote for super representative candidates Interface statement: rpc VoteWitnessAccount (VoteWitnessContract) returns (Transaction) {} Nodes: FullNode 7. Query the ratio of brokerage of the witness Interface statement: rpc GetBrokerageInfo (BytesMessage) returns (NumberMessage) {} Nodes: FullNode 8. Query unclaimed reward Interface statement: rpc GetRewardInfo (BytesMessage) returns (NumberMessage) {} Nodes: FullNode 9. Update the ratio of brokerage Interface statement: rpc UpdateBrokerage (UpdateBrokerageContract) returns (TransactionExtention) {} Nodes: FullNode 10. Issue a token Interface statement: rpc CreateAssetIssue (AssetIssueContract) returns (Transaction) {} Nodes: FullNode 11. Query of list of super representative candidates Interface statement: rpc ListWitnesses (EmptyMessage) returns (WitnessList) {} Nodes: FullNode and SolidityNode 12. Application for super representative Interface statement: rpc CreateWitness (WitnessCreateContract) returns (Transaction) {} Nodes: FullNode Description: To apply to become TRON\u2019s Super Representative candidate. 13. Information update of Super Representative candidates Interface statement: rpc UpdateWitness (WitnessUpdateContract) returns (Transaction) {} Nodes: FullNode Description: Update the website url of the SR. 14. Token transfer Interface statement\u2028: rpc TransferAsset (TransferAssetContract) returns (Transaction){} Node: FullNode 15. Participate a token Interface statement: rpc ParticipateAssetIssue (ParticipateAssetIssueContract) returns (Transaction) {} Nodes: FullNode 16. Query the list of nodes connected to the ip of the api Interface statement: rpc ListNodes (EmptyMessage) returns (NodeList) {} Nodes: FullNode and SolidityNode 17. Query the list of all issued tokens Interface statement: rpc GetAssetIssueList (EmptyMessage) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 18. Query the token issued by a given account Interface statement: rpc GetAssetIssueByAccount (Account) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 19. Query the token information by token name Interface statement: rpc GetAssetIssueByName (BytesMessage) returns (AssetIssueContract) {} Nodes: FullNode and Soliditynode 20. Query the list of tokens by timestamp Interface statement: rpc GetAssetIssueListByTimestamp (NumberMessage) returns (AssetIssueList){} Nodes: SolidityNode 21. Get current block information Interface statement: rpc GetNowBlock (EmptyMessage) returns (Block) {} Nodes: FullNode and SolidityNode 22. Get a block by block height Interface statement: rpc GetBlockByNum (NumberMessage) returns (Block) {} Nodes: FullNode and SolidityNode 23. Get the total number of transactions Interface statement: rpc TotalTransaction (EmptyMessage) returns (NumberMessage) {} Nodes: FullNode and SolidityNode 24. Query the transaction by transaction id Interface statement: rpc getTransactionById (BytesMessage) returns (Transaction) {} Nodes: SolidityNode 25. Query the transaction by timestamp Interface statement: rpc getTransactionsByTimestamp (TimeMessage) returns (TransactionList) {} Nodes: SolidityNode 26. Query the transactions initiated by an account Interface statement: rpc getTransactionsFromThis (Account) returns (TransactionList) {} Nodes: SolidityNode 27. Query the transactions received by an account Interface statement: rpc getTransactionsToThis (Account) returns (NumberMessage) {} Nodes: SolidityNode 28. Freeze TRX Interface statement: rpc FreezeBalance (FreezeBalanceContract) returns (Transaction) {} Nodes: FullNode 29. Unfreeze TRX Interface statement: rpc UnfreezeBalance (UnfreezeBalanceContract) returns (Transaction) {} Nodes: FullNode 30. Block producing reward redemption Interface statement: rpc WithdrawBalance (WithdrawBalanceContract) returns (Transaction) {} Nodes: FullNode 31. Unfreeze token balance Interface statement: rpc UnfreezeAsset (UnfreezeAssetContract) returns (Transaction) {} Nodes: FullNode 32. Query the next maintenance time Interface statement: rpc GetNextMaintenanceTime (EmptyMessage) returns (NumberMessage) {} Nodes: FullNode 33. Query the transaction fee & block information Interface statement: rpc GetTransactionInfoById (BytesMessage) returns (TransactionInfo) {} Nodes: SolidityNode 34. Query block information by block id Interface statement: rpc GetBlockById (BytesMessage) returns (Block) {} Nodes: FullNode 35. Update token information Interface statement: rpc UpdateAsset (UpdateAssetContract) returns (Transaction) {} Nodes: Fullnode Description: Token update can only be initiated by the token issuer to update token description, url, maximum bandwidth consumption by each account and total bandwidth consumption. 36. Query the list of all the tokens by pagination Interface statement: rpc GetPaginatedAssetIssueList (PaginatedMessage) returns (AssetIssueList) {} Nodes: FullNode and SolidityNode 37. To sign a transaction Interface statement: rpc GetTransactionSign (TransactionSign) returns (Transaction) {} Nodes: FullNode 38. Address and private key creation Interface statement: rpc CreateAdresss (BytesMessage) returns (BytesMessage) {} Nodes: Fullnode 39. TRX easy transfer Interface statement: rpc EasyTransfer (EasyTransferMessage) returns (EasyTransferResponse) {} Nodes: FullNode 40. Deploy a smart contract Interface statement: rpc DeployContract (CreateSmartContract) returns (TransactionExtention) {} Nodes: FullNode and SolidityNode 41. Trigger a smart contract Interface statement: rpc TriggerContract (TriggerSmartContract) returns (TransactionExtention) {} Nodes: FullNode 42. Create a shielded transaction Interface statement: rpc CreateShieldedTransaction (PrivateParameters) returns (TransactionExtention) {} Nodes: FullNode 43. Get a Merkle tree information of a note Interface statement: rpc GetMerkleTreeVoucherInfo (OutputPointInfo) returns (IncrementalMerkleVoucherInfo) {} Nodes: FullNode 44. Scan note by ivk Interface statement: rpc ScanNoteByIvk (IvkDecryptParameters) returns (DecryptNotes) {}; Nodes: FullNode 45. Scan note by ovk Interface statement: rpc ScanNoteByOvk (OvkDecryptParameters) returns (DecryptNotes) {}; Nodes: FullNode 46. Get spending key Interface statement: rpc GetSpendingKey (EmptyMessage) returns (BytesMessage) {} Nodes: FullNode 47. Get expanded spending key Interface statement: rpc GetExpandedSpendingKey (BytesMessage) returns (ExpandedSpendingKeyMessage) {} Nodes: FullNode 48. Get ak from ask Interface statement: rpc GetAkFromAsk (BytesMessage) returns (BytesMessage) {} Nodes: FullNode 49. Get nk from nsk Interface statement: rpc GetNkFromNsk (BytesMessage) returns (BytesMessage) {} Nodes: FullNode 50. Get incoming viewing key Interface statement: rpc GetIncomingViewingKey (ViewingKeyMessage) returns (IncomingViewingKeyMessage) {} Nodes: FullNode 51. Get diversifier Interface statement: rpc GetDiversifier (EmptyMessage) returns (DiversifierMessage) {} Nodes: FullNode 52. Get zen payment address Interface statement: rpc GetZenPaymentAddress (IncomingViewingKeyDiversifierMessage) returns (PaymentAddressMessage) {} Nodes: FullNode 53. Get rcm Interface statement: rpc GetRcm (EmptyMessage) returns (BytesMessage) {} Nodes: FullNode 54. Get a note status of is spent or not Interface statement: rpc IsSpend (NoteParameters) returns (SpendResult) {} Nodes: FullNode 55. Create a shielded transaction without using ask Interface statement: rpc CreateShieldedTransactionWithoutSpendAuthSig (PrivateParametersWithoutAsk) returns (TransactionExtention) {}; Nodes: FullNode 56. Create a shielded transaction hash Interface statement: rpc GetShieldTransactionHash (Transaction) returns (BytesMessage) {}; Nodes: FullNode 57. Create a signature for a shielded transaction Interface statement: rpc CreateSpendAuthSig (SpendAuthSigParameters) returns (BytesMessage) {}; Nodes: FullNode 58. Create a shield nullifier Interface statement: rpc CreateShieldNullifier (NfParameters) returns (BytesMessage) {}; Nodes: FullNode 59. Get new shielded address Interface statement: rpc GetNewShieldedAddress (EmptyMessage) returns (ShieldedAddressInfo){} Nodes: FullNode","title":"RPC List"},{"location":"architecture/database/","text":"Rocksdb 1. Configuration Use rocksdb as the data storage engine, need to set db.engine to \"ROCKSDB\" Note: rocksdb only support db.version=2, do not support db.version=1 The optimization parameters rocksdb support: 2. Use rocksdb's data backup function Choose rocksdb to be the data storage engine, you can use it's data backup funchtion while running Note: FullNode can use data backup function. In order not to affect SuperNode's block producing performance, SuperNode does not support backup service, but SuperNode's backup service node can use this function. 3. Convert leveldb data to rocksdb data The data storage structure of leveldb and rocksdb is not compatible, please make sure the node use the same type of data engine all the time. We provide data conversion script which can convert leveldb data to rocksdb data. Usage: cd to the source code root directory ./gradlew build #build the source code java -jar build/libs/DBConvert.jar #run data conversion command Note: If the node's data storage directory is self-defined, before run DBConvert.jar, you need to add the following parameters: src_db_path : specify LevelDB source directory, default output-directory/database dst_db_path : specify RocksDb source directory, default output-directory-dst/database Example, if you run the script like this: nohup java -jar FullNode.jar -d your_database_dir & then, you should run DBConvert.jar this way: java -jar build/libs/DBConvert.jar your_database_dir/database output-directory-dst/database Note: You have to stop the running of the node, and then to run the data conversion script. If you do not want to stop the running of the node for too long, after node is shut down, you can copy leveldb's output-directory to the new directory, and then restart the node. Run DBConvert.jar in the previous directory of the new directory, and specify the parameters: src_db_path \u548c dst_db_path . Example: cp -rf output-directory /tmp/output-directory cd /tmp java -jar DBConvert.jar output-directory/database output-directory-dst/database All the whole data conversion process may take 10 hours. 4. rocksdb vs leveldb you can refer to: rocksdb vs leveldb ROCKSDB vs LEVELDB","title":"Database"},{"location":"architecture/database/#rocksdb","text":"","title":"Rocksdb"},{"location":"architecture/network/","text":"TRON Network Instructure TRON network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: SuperNode, FullNode, SolidityNode. SuperNode produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-tron code can join TRON network as a node. SuperNode Super Representative(abbr: SR) is the block producer in TRON network, there are 27 SR. They verify the transactions and write the transactions into the blocks, they take turns to produce blocks. The super Representatives' information is public to everyone in TRON network. The best way to browse is using tronscan . Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T FullNode FullNode has the complete block chain data, can update data in real time. It can broadcast the transactions and provide api service. Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T SolidityNode SolidityNode only synchronize solidified blocks data from the fullNode it specifies, It also provie api service. NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. Recommended Hardware Configuration: minimum requirement: CPU: 16 cores, RAM: 32G, Bandwidth: 100M, Disk: 1T Recommended requirement: CPU: > 64 cores RAM: > 64G, Bandwidth: > 500M, Disk: > 20T MainNet, TestNet, PrivateNet MainNet, TestNet, PrivateNet all use the same code, only the node start configuration varies. 1. MainNet MainNet configuration 2. TestNet TestNet configuration 3. PrivateNet 3.1 Preconditions at least two accounts generate an account at least deploy one SuperNode to produce blocks deploy serval FullNodes to synchronize blocks and broadcast transactions SuperNode and FullNode comprise the private network 3.2 Deployment 3.2.1 Step 1: SuperNode Deployment 1. download private_net_config.conf wget https://github.com/tronprotocol/tron-deployment/blob/master/private_net_config.conf 2. add your private key in localwitness 3. set genesis.block.witnesses as the private key's corresponding address 4. set p2p.version, any positive integer but 11111 5. set the first SR needSyncCheck = false, others can be set true 6. set node.discovery.enable = true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command line parameters introduction: --witness: start witness function, i.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: localwitness: witnesses: version: enable: 3.2.2 Step 2: FullNode Deployment 1. Download private_net_config.conf wget https://github.com/tronprotocol/tron-deployment/blob/master/private_net_config.conf 2. set seed.node ip.list with SR's ip and port 3. set p2p.version the same as SuperNode's p2p.version 4. set genesis.block the same as genesis.block 5. set needSyncCheck true 6. set node.discovery.enable true 7. run the script nohup java -Xmx6g -XX:+HeapDumpOnOutOfMemoryError -jar FullNode.jar --witness -c private_net_config.conf command lines parameters --witness: start witness function\uff0ci.e.: --witness --log-config: specify the log configuration file path, i.e.: --log-config logback.xml -c: specify the configuration file path, i.e.: -c config.conf The usage of the log file: You can change the level of the module to control the log output. The default level of each module is INFO, for example: only print the message with the level higher than warn: The parameters in configuration file that need to modify: ip.list: p2p.version: genesis.block: needSyncCheck: node.discovery.enable:","title":"Network"},{"location":"architecture/network/#tron-network-instructure","text":"TRON network uses Peer-to-Peer(P2P) network instructure, all nodes status equal. There are three types of node: SuperNode, FullNode, SolidityNode. SuperNode produces blocks, FullNode synchronizes blocks and broadcasts transactions, SolidityNode synchronizes solidified blocks. Any device that deploy the java-tron code can join TRON network as a node.","title":"TRON Network Instructure"},{"location":"architecture/network/#mainnet-testnet-privatenet","text":"MainNet, TestNet, PrivateNet all use the same code, only the node start configuration varies.","title":"MainNet, TestNet, PrivateNet"},{"location":"architecture/plugin/","text":"TRON Event Subscription Introduction TIP: https://github.com/tronprotocol/TIPs/issues/12 TRON Event Subscription supports 4 types of event: Transaction Event The parameters passed to Subscriber: transactionId: transaction hash blockHash: block hash blockNumber: block number energyUsage: energy usage energyFee: energy fee originEnergyUsage: origin energy usage energyUsageTotal: total energy usage total Block Event The parameters passed to Subscriber: blockHash: block hash blockNumber: block number transactionSize: the number of transactions in a block latestSolidifiedBlockNumber: the latest solidified block number transactionList: the transactions hash list Contract Event The parameters passed to Subscriber: transactionId: transaction id contractAddress: contract address callerAddress: contract caller address blockNumber: the number of the block contract related events recorded blockTimestamp: the block time stamp eventSignature: event signature topicMap: the map of topic in solidity language data: the data information in solidity language removed: 'true' means the log is removed Contract Log Event The parameters passed to Subscriber: transactionId: transaction hash contractAddress: contract address callerAddress: contract caller address blockNumber: the number of the block contract related events recorded blockTimestamp: the block time stamp contractTopics: the list of topic in solidity language data: the data information in solidity language removed: 'true' means the log is removed Contract Event and Contract Log Even support event filter function which includes: fromBlock: the start block number toBlock: the end block number contractAddress: contract adsresses list contractTopics: contract topics list Note : History data query is not supported. New features 1. Supporting event plug-ins, kafka & mongodb plug-ins have been released, developers can also customize their own plug-ins according to their own needs. 2. Supporting subscription of chain data, such as block, transaction, contract log, contract event and so on. For transaction events, developers can get information such as internal transactions, contract info and so on; for contract events, developers could configure the contract addresses list or contract topic list to receive the specified events, and event subscription has a very low latency. The deployed fullnode can receive event information immediately after the contract is executed. 3. Event query service tron-eventquery, online Event query service provided. Developers can query trigger information in the last seven days through https, and the query address is https://api.tronex.io Github project event plugin event query Event plugin kafka deployment mongo deployment Event query Tron Event Query Service TronEventQuery is implemented with Tron's new event subscribe model. It uses same query interface with Tron-Grid. Users can also subscribe block trigger, transaction trigger, contract log trigger, and contract event trigger. TronEvent is independent of a particular branch of java-tron, the new event subscribes model will be released on version 3.5 of java-tron. For more information of tron event subscribe model, please refer to https://github.com/tronprotocol/TIPs/issues/12 Event query deployment Event query http api","title":"Plugin"},{"location":"architecture/plugin/#tron-event-subscription","text":"","title":"TRON Event Subscription"},{"location":"clients/tron-grid/","text":"TronGrid provides TRON clients running in the cloud, so you don't have to run one yourself to work with TRON on your next project. TronGrid offers an easy to use hosted API, load balanced full nodes, secure and reliable developer tools with direct access to the TRON Network. TronGrid uses a set of NodeJS apps to talk with Redis and PostgreSQL to provide a simple, fast and reliable query interface for the Tron API. TronGrid supports 2 types of api: FullNode & SolidityNode api TronGrid supports all the FullNode and SolidityNode api calls, you only need to add the url: https://api.trongrid.io/ , like: https://api.trongrid.io/wallet/getnowblock TronGrid v3 (TG3) api version As this is the first iteration of the improved TronGrid, it starts with v1. Example: https://api.trongrid.io/v1 Parameters, Queries, & Return Values Addresses in TG3 can be passed in base58 or hex formats. Query parameters can be passed in camelCase or snake_case. All returned JSON properties will be in snake_case (at the first level at least). NB: In this document, we will primarily use base58 and snake_case formats. Account APIs 1. Get Account Info By Address API: https://api.trongrid.io/v1/accounts/:address Params: address: The account\u2019s address in base58 or hex format (0x... and 41...) Options: only_confirmed Shows only the situation at latest confirmed block. true | false default false . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq7?only_confirmed=false 2. Get Transactions By Account Address API: https://api.trongrid.io/v1/accounts/:address/transactions Params: address: The account\u2019s address. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . only_to Only transaction to address. true | false default false . only_from Only transaction from address. true | false default false . limit The requested number of transaction per page. Default 20 . Max 200 . fingerprint The fingerprint of the last transaction returned by the previous page. order_by Pre sorts the results during the query. order_by=block_number,asc , order_by=block_timestamp,desc . min_block_timestamp The minimum transaction timestamp default 0 . max_block_timestamp The maximum transaction timestamp default now . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/transactions?only_to=true&only_from=true 3. Get Account Resources By Address API: https://api.trongrid.io/v1/accounts/:address/resources Params: address: The account\u2019s address. Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/resources Asset APIs 1. Get All Assets API: https://api.trongrid.io/v1/assets Options: order_by Sorts the results. Accepted fields: total_supply,asc | total_supply,desc , start_time,asc | start_time,desc , end_time,asc | end_time,desc , id,asc | id,desc . Example: order_by=total_supply,asc . 2. Get Assets By Identifier API: https://api.trongrid.io/v1/assets/:identifier Params: identifier: The identifier to be used to retrieve the asset. It can be the ID of the asset, or the issuer address. 3. Get Assets By Name API: https://api.trongrid.io/v1/assets/:name/list Params: name: The name of the asset. Options: limit The requested number of assets per page. Default 20 . Max 200 . When there is a pagination, the minimum limit is set to 20 . fingerprint The fingerprint of the last asset returned by the previous page. order_by Pre sorts the results during the query. order_by=total_supply,asc (starts from the rarest token). order_by=start_time,desc (starts from the most recent ICO). Block APIs 1. Returns Events By Block Identifier API: https://api.trongrid.io/v1/blocks/:identifier/events Params: identifier: It can be either latest, a block number or a block id. Contract APIs 1. Get Events By Contract Address API: https://api.trongrid.io/v1/contracts/:address/events Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . event_name The name of the event. block_number The block number for which the events are required. min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20. fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default). 2. Get Transactions By Contract Address API: https://api.trongrid.io/v1/contracts/:address/transactions Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20 . fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default). Transaction APIs 1. Get Events By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction. 2. Get Transaction By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction.","title":"Tron grid"},{"location":"clients/tron-grid/#account-apis","text":"1. Get Account Info By Address API: https://api.trongrid.io/v1/accounts/:address Params: address: The account\u2019s address in base58 or hex format (0x... and 41...) Options: only_confirmed Shows only the situation at latest confirmed block. true | false default false . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq7?only_confirmed=false 2. Get Transactions By Account Address API: https://api.trongrid.io/v1/accounts/:address/transactions Params: address: The account\u2019s address. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . only_to Only transaction to address. true | false default false . only_from Only transaction from address. true | false default false . limit The requested number of transaction per page. Default 20 . Max 200 . fingerprint The fingerprint of the last transaction returned by the previous page. order_by Pre sorts the results during the query. order_by=block_number,asc , order_by=block_timestamp,desc . min_block_timestamp The minimum transaction timestamp default 0 . max_block_timestamp The maximum transaction timestamp default now . Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/transactions?only_to=true&only_from=true 3. Get Account Resources By Address API: https://api.trongrid.io/v1/accounts/:address/resources Params: address: The account\u2019s address. Example: https://api.trongrid.io/v1/accounts/TLCuBEirVzB6V4menLZKw1jfBTFMZbuKq/resources","title":"Account APIs"},{"location":"clients/tron-grid/#asset-apis","text":"1. Get All Assets API: https://api.trongrid.io/v1/assets Options: order_by Sorts the results. Accepted fields: total_supply,asc | total_supply,desc , start_time,asc | start_time,desc , end_time,asc | end_time,desc , id,asc | id,desc . Example: order_by=total_supply,asc . 2. Get Assets By Identifier API: https://api.trongrid.io/v1/assets/:identifier Params: identifier: The identifier to be used to retrieve the asset. It can be the ID of the asset, or the issuer address. 3. Get Assets By Name API: https://api.trongrid.io/v1/assets/:name/list Params: name: The name of the asset. Options: limit The requested number of assets per page. Default 20 . Max 200 . When there is a pagination, the minimum limit is set to 20 . fingerprint The fingerprint of the last asset returned by the previous page. order_by Pre sorts the results during the query. order_by=total_supply,asc (starts from the rarest token). order_by=start_time,desc (starts from the most recent ICO).","title":"Asset APIs"},{"location":"clients/tron-grid/#block-apis","text":"1. Returns Events By Block Identifier API: https://api.trongrid.io/v1/blocks/:identifier/events Params: identifier: It can be either latest, a block number or a block id.","title":"Block APIs"},{"location":"clients/tron-grid/#contract-apis","text":"1. Get Events By Contract Address API: https://api.trongrid.io/v1/contracts/:address/events Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . event_name The name of the event. block_number The block number for which the events are required. min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20. fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default). 2. Get Transactions By Contract Address API: https://api.trongrid.io/v1/contracts/:address/transactions Params: address: The address of the deployed contract. Options: only_confirmed Shows only confirmed. true | false default false . only_unconfirmed Shows only unconfirmed. true | false default false . min_block_timestamp The minimum block timestamp default 0 . max_block_timestamp The maximum block timestamp default now . limit For pagination. Limit 20 . fingerprint The fingerprint of last event retrieved in the page. order_by Sort the events. Accepted values: block_timestamp,asc , block_timestamp,desc (default).","title":"Contract APIs"},{"location":"clients/tron-grid/#transaction-apis","text":"1. Get Events By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction. 2. Get Transaction By Transaction ID API: https://api.trongrid.io/v1/transactions/:id/events Params: id: The id of the transaction.","title":"Transaction APIs"},{"location":"clients/wallet-cli/","text":"Usage Guide Download wallet-cli git clone https://github.com/tronprotocol/wallet-cli Edit config.conf in src/main/resources net { type = mainnet #type = testnet } fullnode = { ip.list = [ \"fullnode ip : port\" ] } soliditynode = { ip.list = [ \"solidity ip : port\" ] }//note: solidity node is optional Build and run wallet-cli by command line Create a new command line terminal window. cd wallet-cli ./gradlew build ./gradlew run Build and run web wallet cd wallet-cli ./gradlew build cd build/libs java -jar wallet-cli.jar How wallet-cli connects to java-tron: Wallet-cli connect to java-tron by grpc protocol. Java-tron nodes can be deployed locally or remotely. We can set the connected java-tron node IP in config.conf of wallet-cli. Tutorials Wallet-cli supported command list: RegisterWallet RegisterWallet Password Register a wallet in local. Generate a pair of ecc keys. Derive a AES Key by password and then use the AES algorithm to encrypt and save the private key. The account address is calculated by the public key sha3-256, and taking the last 20 bytes. All subsequent operations that require the use of a private key must enter the password. ImportWallet ImportWallet Password PrivateKey ImportwalletByBase64 ImportWallet Password PrivateKey ChangePassword ChangePassword oldPassword newPassword Login Login Password Logout Logout BackupWallet BackupWallet Private key will be returned. BackupWallet2Base64 BackupWallet2Base64 Private key will be returned in Base64 format. ChangePassword ChangePassword oldPassword newPassword GenerateAddress GenerateAddress A pair of address and private key will be returned. CreateAccount CreateAccount Address This will cost 0.1 TRX. GetAddress GetAddress Return the address of the current account login. GetAccount GetAccount Address GetBalance GetBalance Return the TRX balance of the current account login. GetAccountbyId GetAccountbyId accountId SetAccountId SetAccountId AccountId UpdateAccount UpdateAccount AccountName Only the account name can be updated. GetAccountNet GetAccountNet Address GetAccountResource GetAccountResource Address GetDelegatedResource GetDelegatedResource fromAddress toAddress GetDelegatedResourceAccountIndex GetDelegatedResourceAccountIndex address GetAssetissueByAccount GetAssetissueByAccount Address GetAssetIssueByName GetAssetIssueByName AssetName GetAssetIssueListbyName GetAssetIssueListbyName AssetName GetAssetIssuebyId GetAssetIssuebyId AssetId UpdateAsset UpdateAsset newLimit newPublicLimit description url ParticipateAssetIssue ParticipateAssetIssue ToAddress AssetName Amount AssetIssue AssetIssue AssetName TotalSupply TrxNum AssetNum Precision StartDate EndDate Description Url FreeNetLimitPerAccount PublicFreeNetLimit FrozenAmount0 FrozenDays0 ... FrozenAmountN FrozenDaysN ListAssetIssuePaginated ListAssetIssuePaginated offset limit Return the tokens issued in pagination. offset: the index of the start token limit: the amount of tokens per page Listassetissue Listassetissue Return all the tokens issued. TransferAsset TransferAsset ToAddress AssertName Amount This is used to transfer tokens. SendCoin SendCoin ToAddress Amount This is used to transfer TRX. CreateWitness CreateWitness Url To apply to become a super representative. It costs 1024 TRX. Url: SR's official website UpdateWitness UpdateWitness Url To update the url of the witness account login VoteWitness VoteWitness Address0 Count0 ... AddressN CountN FreezeBalance FreezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH, 1 ENERGY] [receiverAddress] UnfreezeBalance UnfreezeBalance [ResourceCode:0 BANDWIDTH, 1 ENERGY] [receiverAddress] WithdrawBalance WithdrawBalance Listwitnesses Listwitnesses CreateProposal CreateProposal id0 value0 ... idN valueN ApproveProposal ApproveProposal id is_or_not_add_approval DeleteProposal DeleteProposal proposalId ListProposals ListProposals ListProposalsPaginated ListProposalsPaginated offset limit Return the proposals in pagination. offset: the index of the start proposal limit: the amount of proposals per page GetProposal GetProposal proposalId GetChainParameters GetChainParameters Query the parameters of the blockchain used for witnessses to create a proposal. GetNextMaintenanceTime GetNextMaintenanceTime Query the time interval till the next vote round. ExchangeCreate ExchangeCreate first_token_id first_token_balance second_token_id second_token_balance To create an exchange pair based on bancor protocol. ExchangeInject ExchangeInject exchange_id token_id quant To inject funds for exchange pair. ExchangeWithdraw ExchangeWithdraw exchange_id token_id quant To withdraw from exchange pair. ExchangeTransaction ExchangeTransaction exchange_id token_id quant expected ListExchanges ListExchanges Query the list of all the exchange pairs ListExchangesPaginated ListExchangesPaginated offset limit Return the exchanges in pagination. offset: the index of the start exchange limit: the amount of exchanges per page GetExchange GetExchange exchangeId GetTransactionCountbyBlockNum GetTransactionCountbyBlockNum number GetTotalTransaction GetTotalTransaction GetTransactionsfromThis GetTransactionsfromThis Address offset limit Return the transactions in pagination. offset: the index of the start transaction limit: the amount of transactions per page GetTransactionstoThis GetTransactionstoThis Address offset limit Return the transactions in pagination. offset: the index of the start transaction limit: the amount of transactions per page GetTransactionbyId GetTransactionbyId txId GetTransactionInfobyId GetTransactionInfobyId txId GetBlockbyId GetBlockbyId blockId GetBlockbyLimitNext GetBlockbyLimitNext start_block_id and end_block_id GetBlockbyLatestNum GetBlockbyLatestNum DeployContract DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent origin_energy_limit value token_value token_id(e.g: TRXTOKEN, use # if not provided) Note: Please append the param for constructor tightly with byteCode without any space TriggerContract TriggerContract contractAddress method args isHex TriggerConstantContract TriggerConstantContract contractAddress method args isHex fee_limit value token_value token_id(e.g: TRXTOKEN, use # if not provided) ClearContractabi ClearContractabi contract_address GetContract GetContract contractAddress UpdateSetting UpdateSetting contract_address consume_user_resource_percent UpdateEnergyLimit UpdateEnergyLimit contract_address energy_limit UpdateAccountPermission UpdateAccountPermission ownerAddress permissions GetTransactionSignWeight GetTransactionSignWeight transaction_hex GetTransactionApprovedList GetTransactionApprovedList transaction_hex AddTransactionSign AddTransactionSign transaction_hex BroadcastTransaction BroadcastTransaction transaction_hex TestTransaction TestTransaction ToAddress assertName times [interval] ListNodes ListNodes Query the list of nodes connected to the ip of the api Getblock Getblock [BlockNum] BuyStorage BuyStorage quantity BuyStorageBytes BuyStorageBytes bytes SellStorage SellStorage quantity Shielded Transaction Related Shielded Transaction Related Exit Exit Exit wallet-cli Quit Quit Quit wallet-cli Help Help Input any one of them, you will get more tips. Command line operation flow example cd wallet-cli ./gradlew build ./gradlew run RegisterWallet 123456 (password = 123456) login 123456 getAddress (Print 'address = f286522619d962e6f93235ca27b2cb67a9e5c27b', backup it) BackupWallet 123456 (Print 'priKey = 22be575f19b9ac6e94c7646a19a4c89e06fe99e2c054bd242c0af2b6282a65e9', backup it) (BackupWallet2Base64 option) getbalance (Print 'Balance = 0') getbalance assetIssue 123456 testAssetIssue00001 10000000000000000 1 100 2018-4-1 2018-4-30 1 just-test https://github.com/tronprotocol/wallet-cli/ getaccount f286522619d962e6f93235ca27b2cb67a9e5c27b (Print balance: 9999900000 asset { key: \"testAssetIssue00001\" value: 10000000000000000 }) (cost trx 1000 trx for assetIssue) (You can query the trx balance and other asset balances for any account ) TransferAsset 123456 649DDB4AB82D558AD6809C7AB2BA43D1D1054B3F testAssetIssue00001 10000 How to freeze/unfreeze balance After the funds are frozen, the corresponding number of shares and bandwidth will be obtained. Shares can be used for voting and bandwidth can be used for trading. The rules for the use and calculation of share and bandwidth are described later in this article. Example: freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH, 1 ENERGY] [receiverAddress] freezeBalance 100000000 3 1 address frozen_balance: The amount of frozen funds\uff0cthe unit is SUN. The minimum value is 1000000 SUN (1 TRX) frozen_duration: Freeze time, this value is currently only allowed for 3 days unfreezeBalance [ResourceCode:0 BANDWIDTH, 1 ENERGY] [receiverAddress] After the freeze operation,frozen funds will be transferred from Account Balance to Frozen, You can view frozen funds from your account information. After being unfrozen, it is transferred back to Balance by Frozen, and the frozen funds cannot be used for trading. When more share or bandwidth is needed temporarily, additional funds may be frozen to obtain additional share and bandwidth. The unfrozen time is postponed until 3 days after the last freeze operation After the freezing time expires, funds can be unfrozen. How to vote Voting requires share. Share can be obtained by freezing funds. The share calculation method is: 1 unit of share can be obtained for every 1 TRX frozen. After unfreezing, previous vote will expire. You can avoid the invalidation of the vote by re-freezing and voting. Note: The Tron Network only records the status of your last vote, which means that each of your votes will cover all previous voting results. Example\uff1a VoteWitness Address0 Count0 ... AddressN CountN freezeBalance 100000000 3 1 address // Freeze 10 TRX and acquire 10 units of shares votewitness witness1 4 witness2 6 // Cast 4 votes for witness1 and 6 votes for witness2 at the same time. votewitness witness1 10 // Voted 10 votes for witness1. The final result of the above command was 10 votes for witness1 and 0 votes for witness2. How to issue TRC10 tokens Each account can only issue one TRC10 token. a. Issue TRC10 tokens Command: AssetIssue AssetName TotalSupply TrxNum AssetNum Precision StartDate EndDate Description Url FreeNetLimitPerAccount PublicFreeNetLimit FrozenAmount0 FrozenDays0 ... FrozenAmountN FrozenDaysN AssetName: The name of the issued TRC10 token TotalSupply: Total issuing amount = account balance of the issuer at the time of issuance + all the frozen amount, before asset transfer and the issuance. TrxNum,AssetNum: these two parameters determine the exchange rate between the issued token and the minimum unit of TRX (sun) when the token is issued. FreeNetLimitPerAccount: The maximum amount of bandwidth an account is allowed to use. Token issuers can freeze TRX to obtain bandwidth (TransferAssetContract only) PublicFreeNetLimit: The maximum amount of bandwidth issuing accounts are allowed user. Token issuers can freeze REX to obtain bandwidth (TransferAssetContract only). StartDate,EndDate: The start and end date of token issuance. Within this period time, other users can participate in token issuance. FrozenAmount0 FrozenDays0: Amount and time of token freeze. FrozenAmount0 must be bigger than 0, FrozenDays0 must be bigger than 1 and smaller than 3653. Example: AssetIssue TestTRX 100000 1 1 2 \"2019-04-04 11:48:00\" \"2019-04-05\" \"just for test\" www.test.com 100 100000 10000 10 10000 1 View published information: GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 11:50:02.688 INFO [main] [Client](Client.java: 361) assetIssue 0 ::: [ Id: 1000001 Owner_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ Name: TestTRX Order: 0 Total_supply: 100000 Trx_num: 1 Num: 1 Precision 2 Start_time: Thu Apr 04 11:48:00 CST 2019 End_time: Fri Apr 05 00:00:00 CST 2019 Vote_score: 0 Description: just for test Url: www.test.com Free asset net limit: 100 Public free asset net limit: 100000 Public free asset net usage: 0 Public latest free net time: 0 Frozen_supply { Amount: 10000 Frozen_days: 1 } Frozen_supply { Amount: 10000 Frozen_days: 10 } ] b. Update parameters of TRC10 token UpdateAsset FreeNetLimitPerAccount PublicFreeNetLimit Description Url Specific meaning of the parameters is the same with that of AssetIssue Example: UpdateAsset 1000 1000000 \"change description\" www.changetest.com View the modified information: GetAssetIssueByAccount TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 11:52:16.677 INFO [main] [Client](Client.java: 361) assetIssue 0 ::: [ Id: 1000001 Owner_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ Name: TestTRX Order: 0 Total_supply: 100000 Trx_num: 1 Num: 1 Precision 2 Start_time: Thu Apr 04 11:48:00 CST 2019 End_time: Fri Apr 05 00:00:00 CST 2019 Vote_score: 0 description: change description url: www.changetest.com Free asset net limit: 1000 public free asset net limit: 1000000 Public free asset net usage: 0 public latest free net time: 0 Frozen_supply { Amount: 10000 Frozen_days: 1 } Frozen_supply { Amount: 10000 Frozen_days: 10 } ] c. TRC10 transfer TransferAsset ToAddress AssertName Amount ToAddress: Address of the target account AssertName: TRC10 id, 1000001 in the example Amount: The number of TRC10 token to transfer Example: TransferAsset TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz 1000001 1000 View target account information after the transfer: getaccount TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz 11:54:33.118 INFO [main] [Client](Client.java:260) address: TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz ... assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 } ... } d. Participating in the issue of TRC10 ParticipateAssetIssue ToAddress AssetName Amount ToAddress: Account address of Token 10 issuers AssertName: TRC10 ID,1000001 in the example Amount: The number of TRC10 token to transfers It must happen during the release of Token 10, otherwise an error may occur Example: ParticipateAssetIssue TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 1000001 1000 View remaining balance: getaccount TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 11:59:57.558 INFO [main] [Client](Client.java:260) address: TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW ... assetV2 { id: 1000001 balance: 1000 latest_asset_operation_timeV2: null free_asset_net_usageV2: 0 } ... } e. unfreeze TRC10 token It must be unfrozen after the freezing period, unfreeze Token10, which has stopped being frozen. UnfreezeAsset f. Obtain information about Token 10 ListAssetIssue: Obtain all of the published Token 10 information GetAssetIssueByAccount Address: Obtain Token10 information according to the issuing address GetAssetIssueById AssetId: Obtain Token10 Information based on ID GetAssetIssueByName AssetName: Obtain Token10 Information based on names GetAssetIssueListByName AssetName: Get list information on Token10 based on names How to initiate a proposal Any proposal-related operations, except for viewing operations, must be performed by committee members. a. Initiate a proposal createProposal id0 value0 ... idN valueN id0: the serial number of the parameter. Every parameter of TRON network has a serial number. Go to \"http://tronscan.org/#/sr/committee\" to see the specifics Value0: the modified value In the example, modification No.4 (modifying token issuance fee) costs 1000TRX as follows: createProposal 4 1000 View initiated proposal: listproposals 12:20:50.288 INFO [main] [Client](Client.java:1043) proposal 0 ::: [ id: 1 state: PENDING createTime: 1554351564000 expirationTime: 1554616800000 parametersMap: {4=1000} approvalsList: [ ]] The corresponding id is 1 b. Approve/Cancel the proposal approveProposal id is_or_not_add_approval id: ID of the initiated proposal, 1 in the example is_or_not_add_approval: true for approve; false against Example: ApproveProposal 1 true in favor of the offer ApproveProposal 1 false Cancel the approved proposal c. Cancel the created proposal DeleteProposal proposalId proposalId: ID of the initiated proposal, 1 in the example The proposal must be canceled by the supernode that initiated the proposal Example\uff1a DeleteProposal 1 d. Obtain proposal information ListProposals: Obtain initiated proposals ListProposalsPaginated offset limit: Use the paging mode to obtain the initiated proposal GetProposal id: Obtain proposal information based on the proposal ID How to trade on the exchange The trading and price fluctuations of trading pairs are in accordance with the Bancor Agreement, which can be found in TRON's related documents. a. Create a trading pair exchangeCreate first_token_id first_token_balance second_token_id second_token_balance First_token_id, first_token_balance: ID and amount of the first token second_token_id, second_token_balance: ID and amount of the second token The ID is the ID of the issued TRC10 token. If it is TRX, the ID is \" _ \", the amount must be greater than 0, and less than 1,000,000,000,000,000. Example: exchangeCreate 1000001 10000 _ 10000 Create trading pairs with the IDs of 1000001 and TRX, the amount is 10000 for both. b. Capital injection exchangeInject exchange_id token_id quant exchange_id: The ID of the transaction pair to be funded token_id,quant: TokenId and quantity of capital injection When conducting capital injection, depending on the amount of capital injection, the proportion of each token in the transaction pair is deducted from the account and added to the transaction pair. Depending on the difference in the balance of the transaction, the same amount of money for the same token is different. c. Transactions exchangeTransaction exchange_id token_id quant expected exchange_id: ID of the transaction pair token_id, quant: The ID and quantity of tokens being exchanged, equivalent to selling expected: Expected quantity of another token The expected must be less than exchanged, otherwise, an error will be reported. Example\uff1a ExchangeTransaction 1 1000001 100 80 It is expected to acquire the 80 TRX by exchanging 1000001 from the transaction pair ID of 1, and the amount is 100 (equivalent to selling token10, the ID is 1000001, the amount is 100). d. Divestment exchangeWithdraw exchange_id token_id quant Exchange_id: The ID of the transaction pair to be divested Token_id,quant: TokenId and quantity of divestment When conducting divestment, depending on the amount of divestment, the proportion of each token in the transaction pair is deducted from the account and added to the transaction pair. Depending on the difference in the balance of the transaction, the same amount of money for the same token is different. e. Obtain information on trading pairs ListExchanges: List trading pairs ListexchangesPaginated offset limit: List trading pairs by page How to use the multi-signature feature of wallet-cli? Multi-signature allows other users to access the account in order to better manage it. There are three types of accesses: owner: access to the owner of account active: access to other features of accounts, and access that authorizes a certain feature . Block production authorization is not included if it's for witness purposes. witness: only for witness, block production authorization will be granted to one of the other users. The rest of the users will be granted: Updateaccountpermission TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ {\"owner_permission\":{\"type\":0, \"permission_name\":\"owner\",\"threshold\":1,\"keys\":[{\"address\":\"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\", \"weight\":1}]},\"witness_permission\":{\"type\":1,\"permission_name\":\"owner\",\"threshold\":1, \"keys\":[{\"address\":\"TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ\",\"weight\":1}]}, \"active_permissions\":[{\"type\":2,\"permission_name\":\"active12323\",\"threshold\":2, \"operations\":\"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", \"keys\":[{\"address\":\"TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR\",\"weight\":1}, {\"address\":\"TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP\",\"weight\":1}]}]} The account TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ gives the owner access to itself, active access to TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR and TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP. Active access will need signatures from both accounts in order to take effect. If the account is not a witness, it's not necessary to set witness_permission, otherwise an error will occur. Signed transaction SendCoin TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW 10000000000000000 will show \"Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancell transaction.\" This will require the transfer authorization of active access. Enter: 2 Then select accounts and put in local password, i.e. TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR needs a private key TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR to sign a transaction. Select another account and enter the local password. i.e. TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP will need a private key of TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP to sign a transaction. The weight of each account is 1, threshold of access is 2. When the requirements are met, users will be notified with \u201cSend 10000000000000000 drop to TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW successful !!\u201d\u3002 This is how multiple accounts user multi-signature when using the same cli. Use the instruction addTransactionSign according to the obtained transaction hex string if signing at multiple cli. After signing, the users will need to broadcast final transactions manually. Obtain weight information according to transaction: getTransactionSignWeight 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 The information displays as follows: 14:56:30.574 INFO [main] [Client](Client.java:1764) permission: { permission_type: Active permission_id: 2 permission_name: active12323 threshold: 2 parent_id: 0 operations: 7fff1fc0033e0000000000000000000000000000000000000000000000000000 keys: [ address: TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR weight: 1 address: TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP weight: 1 ] } current_weight: 2 result: { code: ENOUGH_PERMISSION } approved_list: [ TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR ] transaction: { txid: 7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b raw_data: { ref_block_bytes: 0318 ref_block_hash: 60e195d3609c8661 contract: { contract 0 ::: [ contract_type: TransferContract owner_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ to_address: TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW amount: 10000000000000000 ] } timestamp: Mon Apr 01 14:55:06 CST 2019 fee_limit: 0 } signature: { signature 0 :c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01 signature 1 :3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 } } Get signature information according to transactions: getTransactionApprovedList 0a8c010a020318220860e195d3609c86614096eadec79d2d5a6e080112680a2d747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e5472616e73666572436f6e747261637412370a1541a7d8a35b260395c14aa456297662092ba3b76fc01215415a523b449890854c8fc460ab602df9f31fe4293f18808084fea6dee11128027094bcb8bd9d2d1241c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b0112413d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 14:57:37.807 INFO [main] [Client](Client.java:1784) result: { code: SUCCESS } approved_list: [ TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR ] transaction: { txid: 7da63b6a1f008d03ef86fa871b24a56a501a8bbf15effd7aca635de6c738df4b raw_data: { ref_block_bytes: 0318 ref_block_hash: 60e195d3609c8661 contract: { contract 0 ::: [ contract_type: TransferContract owner_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ to_address: TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW amount: 10000000000000000 ] } timestamp: Mon Apr 01 14:55:06 CST 2019 fee_limit: 0 } signature: { signature 0 :c18ca91f1533ecdd83041eb0005683c4a39a2310ec60456b1f0075b4517443cf4f601a69788f001d4bc03872e892a5e25c618e38e7b81b8b1e69d07823625c2b01 signature 1 :3d61eb0f8868990cfa138b19878e607af957c37b51961d8be16168d7796675384e24043d121d01569895fcc7deb37648c59f538a8909115e64da167ff659c26101 } } How to use smart contracts a. deploy smart contracts DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent origin_energy_limit value token_value token_id contractName: name of smart contract ABI: Compile generated ABI code byteCode: Compile generated byte code constructor,params,isHex: Define the format of the bytecode\uff0cwhich determines the way to parse byteCode from parameters fee_limit: Transaction allows for the most consumed TRX consume_user_resource_percent: Percentage of user resource consumed, in the range [0, 100] origin_energy_limit: The most amount of developer Energy consumed by trigger contract once value: The amount of trx transferred to the contract account token_value: Number of TRX10 token_id: TRX10 Id Example: deployContract normalcontract544 [{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"uint256\"}], \"name\":\"findArgsByIndexTest\",\"outputs\":[{\"name\":\"z\",\"type\":\"uint256\"}],\"payable\":false, \"stateMutability\":\"nonpayable\",\"type\":\"function\"}] 608060405234801561001057600080fd5b50610134806100206000396000f3006080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029 # # false 1000000000 75 50000 0 0 # Get the result of the contract execution with the getTransactionInfoById command: getTransactionInfoById 4978dc64ff746ca208e51780cce93237ee444f598b24d5e9ce0da885fb3a3eb9 14:13:40.627 INFO [main] [Client](Client.java:1326) txid: 4978dc64ff746ca208e51780cce93237ee444f598b24d5e9ce0da885fb3a3eb9 fee: 6170500 blockNumber: 26 blockTimeStamp: 1554703977000 result: SUCCESS resMessage: contractResult: 6080604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663329000b58114610045575b600080fd5b34801561005157600080fd5b5061005d60043561006f565b60408051918252519081900360200190f35b604080516003808252608082019092526000916060919060208201838038833901905050905060018160008151811015156100a657fe5b602090810290910101528051600290829060019081106100c257fe5b602090810290910101528051600390829060029081106100de57fe5b6020908102909101015280518190849081106100f657fe5b906020019060200201519150509190505600a165627a7a72305820b24fc247fdaf3644b3c4c94fcee380aa610ed83415061ff9e65d7fa94a5a50a00029 contractAddress: TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG logList: receipt: EnergyUsage: 0 EnergyFee(SUN): 6170500 OriginEnergyUsage: 0 EnergyUsageTotal: 61705 NetUsage: 704 NetFee: 0 InternalTransactionList: b. trigger smart contarct TriggerContract contractAddress method args isHex fee_limit value token_value token_id contractAddress: smart contarct address method: The name of function and parameters, please refer to the example args: Parameter value isHex: The format of the parameters method and args,is hex string or not . fee_limit: The most amount of trx allows for the consumption token_value: Number of TRX10 token_id: TRC10 id\uff0cIf not, use \u2018#\u2019 instead Example: triggerContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG findArgsByIndexTest(uint256) 0 false 1000000000 0 0 # Get the result of the contract execution with the getTransactionInfoById command: getTransactionInfoById 7d9c4e765ea53cf6749d8a89ac07d577141b93f83adc4015f0b266d8f5c2dec4 14:27:50.055 INFO [main] [Client](Client.java:1326) txid: 7d9c4e765ea53cf6749d8a89ac07d577141b93f83adc4015f0b266d8f5c2dec4 fee: 54400 blockNumber: 318 blockTimeStamp: 1554704853000 result: SUCCESS resMessage: contractResult: 0000000000000000000000000000000000000000000000000000000000000001 contractAddress: TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG logList: receipt: EnergyUsage: 0 EnergyFee(SUN): 54400 OriginEnergyUsage: 0 EnergyUsageTotal: 544 NetUsage: 314 NetFee: 0 InternalTransactionList: c. get details of a smart contract GetContract contractAddress contractAddress: smart contarct address Example: GetContract TGdtALTPZ1FWQcc5MW7aK3o1ASaookkJxG contract :entrys { name: \"findArgsByIndexTest\" inputs { name: \"i\" type: \"uint256\" } outputs { name: \"z\" type: \"uint256\" } type: Function stateMutability: Nonpayable } contract owner:TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ contract ConsumeUserResourcePercent:75 contract energy limit:50000 d. update smart contract parameters UpdateEnergyLimit contract_address energy_limit Update parameter energy_limit UpdateSetting contract_address consume_user_resource_percent Update parameter consume_user_resource_percent How to use shielded transaction feature in wallet-cli? 1. To generate shielded address generateshieldedaddress number number: The number of addresses you want to generate, default is 1 Example: generateshieldedaddress 2 10:11:02.482 INFO [main] [Client](Client.java:1914) ShieldedAddress list: 10:11:02.526 INFO [main] [Client](Client.java:1919) ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 10:11:02.567 INFO [main] [Client](Client.java:1919) ztron1hn9r3wmytavslztwmlzvuzk3dqpdhwcmda2d0deyu5pwv32dp78saaslyt82w0078y6uzfg8x6w 10:11:02.567 INFO [main] [Client](Client.java:1923) GenerateShieldedAddress successful !! 2. To show the shielded address generated local listshieldedaddress Example: listshieldedaddress 10:11:55.370 INFO [main] [Client](Client.java:1928) ShieldedAddress : 10:11:55.371 INFO [main] [Client](Client.java:1930) ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 10:11:55.371 INFO [main] [Client](Client.java:1930) ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 10:11:55.371 INFO [main] [Client](Client.java:1930) ztron1hn9r3wmytavslztwmlzvuzk3dqpdhwcmda2d0deyu5pwv32dp78saaslyt82w0078y6uzfg8x6w 3. Transfer SendShieldedCoin publicFromAddress fromAmount shieldedInputNum input1 input2 input3 ... publicToAddress toAmount shieldedOutputNum shieldedAddress1 amount1 memo1 shieldedAddress2 amount2 memo2 ... publicFromAddress: Transparent sender address. If not needed, set null. fromAmount: The amount of asset want to be sent from transparent address. if publicFromAddress is null, fromAmount must be 0. shieldedInputNum: The number of notes input. 1 at maximum, 0 at minmum. input: The index of your unspent note, you can get it by calling listshieldednote . If shieldedInputNum is 0, no need to set. publicToAddress: Transparent receiver address. If not needed, set null. toAmount: The amount of asset want to be sent to transparent address. if publicToAddress is null, toAmount must be 0. shieldedOutputNum: The number of notes output. 2 at maximum, 0 at minmum. shieldedAddress1: Shielded address. amount1: The amount of asset want to be sent to shielded address. memo1: The note in one transaction. 512 bytes at most. If not needed, set null Example: Transfer from transparent address to shielded address sendshieldedcoin TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 210000000 0 null 0 2 ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 100000000 test1 ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 100000000 null Receive txid = 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 transaction hex string is hash: 259979e238ea70d76802a77c6fb50810a94a198e4ae7b8a5d51ae6b1a0d18fb9 txid: 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 raw_data: { ref_block_bytes: 04ac ref_block_hash: eb00771525105249 contract: { contract 0 ::: [ contract_type: ShieldedTransferContract transparent_from_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ from_amount: 210000000 receive_description: [ { value_commitment:de75bc31efea3a115c387d70721cb0f9aecfec2474f27475abcb980886ad0d3d note_commitment:3b89783436db7d908b0639a4da16ffe16be3af123dcac2d7bbd34c0e6d7d6544 epk:13905055444c524ada9730e591360fef353e7badfd5111aa483d2c18ff1aa325 c_enc:283bad882abc89bf5726535ccbbcb279ff6858bc5882c32380117ea693dfeb145377b4509e9d8ac7211519af29a07f95dd3c92c937352e12c33c8f23a1eab8669a7f4a0b87ae0173e47e2b63488f7568e3960101b9b30be87f7e8ccae954fab14776dfaf7157eddaf92e76385b3c03364a14689e661e225f13414e3a2930bb03b374e6afe01e3e1109963d9cf2a89598226f4617fda887390bf96227befcf13769ca733ed8b5966fcf4e24142399530b86dd2b310760eb5be40aeb617a8f417532417c7a6c1dabcf511be38545ff37be77a7868a9bcefed6d64c906975e55172f23e2bd5e5fad01fe881b43df1bc5305b01f6790929f06aa2ff76edd22d7f07a076a1df670424dd49b0f9736f2e732e69b46ee533dc9772a960c81f57555a98367554d2baece36155dd8cf8fc62b9474117bcf8eb9a7905e4b143d64c168ae2490d811749aaccc44f9a91a2630cb90bfc922e2b49a3083f18e2b227fc1db9c91a725c17bb5400b769c0c5c80c0083a3e0a8f00e72565b927ba4a95d6d79187219fb836282ebac38671929ac232739ee1a35b21e51ff01dd3d6de1a3a1a0b42ca8b1ae435f124860c2d9ecd5835ad0e94dd33a36edbd37ed2e581e28cc0d6740945dc5f71f9310fbabcd881036f3ccfb7524e7877de54c295577f43c7551accab575b9bcde331ee529d69e40540414f179d914c8b7c62e0e11547d3687d837bd129af855902f647a6eca89d83a4b4442e8b44d87839d0c95a79727ffed286ac78a512b20a03c8e5aeb7c997bd24e8e61a74cd6824afe1f844c14e52958f72896c91214d46 c_out:28084dab0df35e91f297508e71de534ed8ea9aaa5f9c2c5e8fcc472552107581c58a11fbfb500c05d3b75472e770e4aec9dafa97a4e11a0a145ee4f58eeb996e4d0b8f90a29480f43be490e6119989ef zkproof:8eed2aef1edf5d000f8bcdbb1bc228fa6ea4ca1e237da41dde6e49057398ca9db4f785f0327ff87cd2685594ab637c0989604856571d6b2373c949796d52a432094bce27d445e1ec751203480803c19c1ddd5b435f88c27a90700296f2d5473d11234dde23740cd532987b7e7a5eb129f67f63f2b64b07f980856d19dee4965ef2c8d9cea30778db888e0500d04d910d990fb2de69d5062a5e9bababfd54d23376c9aa53c6359551bd296658be04dc1392b1d30ea2d8572862deb1e9402d5d6c },{ value_commitment:c43166a68ea4585bd99a28f2b22be8c9acf35874ab19d94314eb7972a89723a4 note_commitment:93f76ff28e95094e2bbd3f3b8a0680bdfdc4f06cf67abb59d6cf6bb2a30ffb13 epk:28aeccd4e7c6ec30db5c8cfa0f0c530ade45a0e0802ae77279d35b1cf086f947 c_enc:6c62fde60d4c0cc48e84b1b023c6664332a244d8a2e650f41f323b9d05c0637959796b9ef6c3dabee35c81a409e8d5279197af772eddf3fd609822393d2e17fc215f09da41ebd991407b9b206e93fcdbbb3ccf53dcdacdb9759460cb35bd00e281ba2ebd6f04af46c3872b12bccb7b70f61397d27dbfee5e508ca02451047b25520307831ceb7cb39ea35305dae84b3a9a5871ade0f364a35b7214b1b7bb4e5b2bd80ab83740d3e00e57218e499ee2763fa683f9e2118eb7dab943cfac6cef8fd36d37e91cf08459d1077813d506040fa8b6c5cf76a75c7cf0a476a8eb36ad428db29a31d0eadcca7f70f8768a6893991899ba0a3f469ef5f0a8feb0877e4557a2ca1d41ca944db3de4d13125b82dabcbbf36624308eaff2055109446777ca592a3c4f62a9823cd53de6993d5edeaef7e9cd471fd7bc0973e46732c5dbc2f642504fb6fe840c99c012f2dcf035495237f2451dc7e708bf4e22010e86fe21c30aac0e9f3ad31feee69849d6eafeba8337690e163bb22c8d9aff2c55865663af5d4dd23132a7d6d9748dbdc86d71cf773a0a1a2768ce8da9e6fbecda29ab2eb1ad75705ab1fb448cd6c2987b814d759462e4930e124b48838319f5907f33911cb80a583e91c552d1d41de91ed02aba232b9a53331260c8061ae354646e96fde0818d695b7aa058d0ac09fb4f92cb412e218f4e9f9771c1cd067023e844c96ac188db8869c50b1297010d9c21dbce60d815a1c936170df77e057a13b4798f39f5bfc36f5acf36728ea7e017ab5fc39a06e2bbd42ad3118a8c2e5531fb6ae63adf525591ed1a c_out:ecf81a290d80573434d45024a8050a0d51c6e74f4ac2c539f6d68694b367a3568ba9187872d9b648fd4dcc9a01de7b2c8d1036d7b2e37b57d89c8df37e26be4bad0728e2922915901339b8a908fb2a56 zkproof:8b6ca51f29b66e7cc833e1b602f954d3ccc6ed80cf727ce0e4bd74500b32635d909fb7dda7be7d0807b93318e81108c4a1d2c4dc73e7b393b5cc66e18fb7a49d665f3bde62b1832ec01fabecdf8fa77668b78db3679376938820ada3ccf23f540c1fa1c32b4c3303c0ac72351da080c0bab70b8effdc304089601feb613f0c11b57822474a788479ca7322b6d3f606fea2208d45ff3c1f893617f628304ba6765a4eeb1ac52a0e666373e5c746ddc48a781331eff4e465f8993c1bbaafd25d3b } ] binding_signature: 1c9732654d45f51fd2cadf1baf0d85a50f55f08d181ef08eb704392d5ee03bc4bc77d56e26b706ab88cae85f6ac608abd2e16b2242653c90e058a3c8a3d23108 ] } timestamp: Fri Jul 19 10:28:20 CST 2019 fee_limit: 0 } txid: 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 raw_data: { ref_block_bytes: 04ac ref_block_hash: eb00771525105249 contract: { contract 0 ::: [ contract_type: ShieldedTransferContract transparent_from_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ from_amount: 210000000 receive_description: [ { value_commitment:de75bc31efea3a115c387d70721cb0f9aecfec2474f27475abcb980886ad0d3d note_commitment:3b89783436db7d908b0639a4da16ffe16be3af123dcac2d7bbd34c0e6d7d6544 epk:13905055444c524ada9730e591360fef353e7badfd5111aa483d2c18ff1aa325 c_enc:283bad882abc89bf5726535ccbbcb279ff6858bc5882c32380117ea693dfeb145377b4509e9d8ac7211519af29a07f95dd3c92c937352e12c33c8f23a1eab8669a7f4a0b87ae0173e47e2b63488f7568e3960101b9b30be87f7e8ccae954fab14776dfaf7157eddaf92e76385b3c03364a14689e661e225f13414e3a2930bb03b374e6afe01e3e1109963d9cf2a89598226f4617fda887390bf96227befcf13769ca733ed8b5966fcf4e24142399530b86dd2b310760eb5be40aeb617a8f417532417c7a6c1dabcf511be38545ff37be77a7868a9bcefed6d64c906975e55172f23e2bd5e5fad01fe881b43df1bc5305b01f6790929f06aa2ff76edd22d7f07a076a1df670424dd49b0f9736f2e732e69b46ee533dc9772a960c81f57555a98367554d2baece36155dd8cf8fc62b9474117bcf8eb9a7905e4b143d64c168ae2490d811749aaccc44f9a91a2630cb90bfc922e2b49a3083f18e2b227fc1db9c91a725c17bb5400b769c0c5c80c0083a3e0a8f00e72565b927ba4a95d6d79187219fb836282ebac38671929ac232739ee1a35b21e51ff01dd3d6de1a3a1a0b42ca8b1ae435f124860c2d9ecd5835ad0e94dd33a36edbd37ed2e581e28cc0d6740945dc5f71f9310fbabcd881036f3ccfb7524e7877de54c295577f43c7551accab575b9bcde331ee529d69e40540414f179d914c8b7c62e0e11547d3687d837bd129af855902f647a6eca89d83a4b4442e8b44d87839d0c95a79727ffed286ac78a512b20a03c8e5aeb7c997bd24e8e61a74cd6824afe1f844c14e52958f72896c91214d46 c_out:28084dab0df35e91f297508e71de534ed8ea9aaa5f9c2c5e8fcc472552107581c58a11fbfb500c05d3b75472e770e4aec9dafa97a4e11a0a145ee4f58eeb996e4d0b8f90a29480f43be490e6119989ef zkproof:8eed2aef1edf5d000f8bcdbb1bc228fa6ea4ca1e237da41dde6e49057398ca9db4f785f0327ff87cd2685594ab637c0989604856571d6b2373c949796d52a432094bce27d445e1ec751203480803c19c1ddd5b435f88c27a90700296f2d5473d11234dde23740cd532987b7e7a5eb129f67f63f2b64b07f980856d19dee4965ef2c8d9cea30778db888e0500d04d910d990fb2de69d5062a5e9bababfd54d23376c9aa53c6359551bd296658be04dc1392b1d30ea2d8572862deb1e9402d5d6c },{ value_commitment:c43166a68ea4585bd99a28f2b22be8c9acf35874ab19d94314eb7972a89723a4 note_commitment:93f76ff28e95094e2bbd3f3b8a0680bdfdc4f06cf67abb59d6cf6bb2a30ffb13 epk:28aeccd4e7c6ec30db5c8cfa0f0c530ade45a0e0802ae77279d35b1cf086f947 c_enc:6c62fde60d4c0cc48e84b1b023c6664332a244d8a2e650f41f323b9d05c0637959796b9ef6c3dabee35c81a409e8d5279197af772eddf3fd609822393d2e17fc215f09da41ebd991407b9b206e93fcdbbb3ccf53dcdacdb9759460cb35bd00e281ba2ebd6f04af46c3872b12bccb7b70f61397d27dbfee5e508ca02451047b25520307831ceb7cb39ea35305dae84b3a9a5871ade0f364a35b7214b1b7bb4e5b2bd80ab83740d3e00e57218e499ee2763fa683f9e2118eb7dab943cfac6cef8fd36d37e91cf08459d1077813d506040fa8b6c5cf76a75c7cf0a476a8eb36ad428db29a31d0eadcca7f70f8768a6893991899ba0a3f469ef5f0a8feb0877e4557a2ca1d41ca944db3de4d13125b82dabcbbf36624308eaff2055109446777ca592a3c4f62a9823cd53de6993d5edeaef7e9cd471fd7bc0973e46732c5dbc2f642504fb6fe840c99c012f2dcf035495237f2451dc7e708bf4e22010e86fe21c30aac0e9f3ad31feee69849d6eafeba8337690e163bb22c8d9aff2c55865663af5d4dd23132a7d6d9748dbdc86d71cf773a0a1a2768ce8da9e6fbecda29ab2eb1ad75705ab1fb448cd6c2987b814d759462e4930e124b48838319f5907f33911cb80a583e91c552d1d41de91ed02aba232b9a53331260c8061ae354646e96fde0818d695b7aa058d0ac09fb4f92cb412e218f4e9f9771c1cd067023e844c96ac188db8869c50b1297010d9c21dbce60d815a1c936170df77e057a13b4798f39f5bfc36f5acf36728ea7e017ab5fc39a06e2bbd42ad3118a8c2e5531fb6ae63adf525591ed1a c_out:ecf81a290d80573434d45024a8050a0d51c6e74f4ac2c539f6d68694b367a3568ba9187872d9b648fd4dcc9a01de7b2c8d1036d7b2e37b57d89c8df37e26be4bad0728e2922915901339b8a908fb2a56 zkproof:8b6ca51f29b66e7cc833e1b602f954d3ccc6ed80cf727ce0e4bd74500b32635d909fb7dda7be7d0807b93318e81108c4a1d2c4dc73e7b393b5cc66e18fb7a49d665f3bde62b1832ec01fabecdf8fa77668b78db3679376938820ada3ccf23f540c1fa1c32b4c3303c0ac72351da080c0bab70b8effdc304089601feb613f0c11b57822474a788479ca7322b6d3f606fea2208d45ff3c1f893617f628304ba6765a4eeb1ac52a0e666373e5c746ddc48a781331eff4e465f8993c1bbaafd25d3b } ] binding_signature: 1c9732654d45f51fd2cadf1baf0d85a50f55f08d181ef08eb704392d5ee03bc4bc77d56e26b706ab88cae85f6ac608abd2e16b2242653c90e058a3c8a3d23108 ] } timestamp: Fri Jul 19 10:28:20 CST 2019 fee_limit: 0 } Please confirm and input your permission id, if input y or Y means default 0, other non-numeric characters will cancell transaction. Please choose your key for sign. The 1th keystore file name is UTC--2019-07-11T07-48-10.599000000Z--TK46L2BNfbmbScnAnaqgZuobkSBVyNsvTM.json The 2th keystore file name is UTC--2018-11-20T07-47-52.297000000Z--TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ.json The 3th keystore file name is UTC--2019-05-30T08-27-49.302000000Z--TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW.json The 4th keystore file name is TN3zfjYUmMFK3ZsHSsrdJoNRtGkQmZLBLz.json The 5th keystore file name is UTC--2018-11-06T10-10-46.581000000Z--TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW.json The 6th keystore file name is UTC--2019-04-03T06-49-12.385000000Z--TNPFQFsKQBtSSXFA5epobUtHekN3xKC249.json The 7th keystore file name is UTC--2018-11-20T04-37-05.116000000Z--TKwhcDup8L2PH5r6hxp5CQvQzZqJLmKvZP.json The 8th keystore file name is UTC--2019-04-03T04-06-04.912000000Z--TDLGnqBSjqSeSbwF9KvNaZe7fnZm7VX4h3.json The 9th keystore file name is UTC--2018-11-20T07-49-24.311000000Z--TNhXo1GbRNCuorvYu5JFWN3m2NYr9QQpVR.json The 10th keystore file name is UTC--2019-05-28T11-16-34.827000000Z--TDQE4yb3E7dvDjouvu8u7GgSnMZbxAEumV.json The 11th keystore file name is UTC--2019-06-26T11-04-08.686000000Z--TJCnKsPa7y5okkXvQAidZBzqx3QyQ6sxMW.json The 12th keystore file name is UTC--2019-04-03T06-45-07.727000000Z--TAC5D6vMq1t7Hie2nYEbBoGYngDMLrbAFM.json The 13th keystore file name is UTC--2019-04-22T09-45-00.67000000Z--TT1smsmhxype64boboU8xTuNZVCKP1w6qT.json The 14th keystore file name is UTC--2019-06-10T07-33-39.349000000Z--TLYUrci5Qw5fUPho2GvFv38kAK4QSmdhhN.json Please choose between 1 and 14 2 Please input your password. 1qa@WS#ED current transaction hex string is 0ac6100a0204ac2208eb0077152510524940b0e0bfc0c02d5aa710083312a2100a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412e80f0a1541a7d8a35b260395c14aa456297662092ba3b76fc01080b1916422c2070a20de75bc31efea3a115c387d70721cb0f9aecfec2474f27475abcb980886ad0d3d12203b89783436db7d908b0639a4da16ffe16be3af123dcac2d7bbd34c0e6d7d65441a2013905055444c524ada9730e591360fef353e7badfd5111aa483d2c18ff1aa32522c404283bad882abc89bf5726535ccbbcb279ff6858bc5882c32380117ea693dfeb145377b4509e9d8ac7211519af29a07f95dd3c92c937352e12c33c8f23a1eab8669a7f4a0b87ae0173e47e2b63488f7568e3960101b9b30be87f7e8ccae954fab14776dfaf7157eddaf92e76385b3c03364a14689e661e225f13414e3a2930bb03b374e6afe01e3e1109963d9cf2a89598226f4617fda887390bf96227befcf13769ca733ed8b5966fcf4e24142399530b86dd2b310760eb5be40aeb617a8f417532417c7a6c1dabcf511be38545ff37be77a7868a9bcefed6d64c906975e55172f23e2bd5e5fad01fe881b43df1bc5305b01f6790929f06aa2ff76edd22d7f07a076a1df670424dd49b0f9736f2e732e69b46ee533dc9772a960c81f57555a98367554d2baece36155dd8cf8fc62b9474117bcf8eb9a7905e4b143d64c168ae2490d811749aaccc44f9a91a2630cb90bfc922e2b49a3083f18e2b227fc1db9c91a725c17bb5400b769c0c5c80c0083a3e0a8f00e72565b927ba4a95d6d79187219fb836282ebac38671929ac232739ee1a35b21e51ff01dd3d6de1a3a1a0b42ca8b1ae435f124860c2d9ecd5835ad0e94dd33a36edbd37ed2e581e28cc0d6740945dc5f71f9310fbabcd881036f3ccfb7524e7877de54c295577f43c7551accab575b9bcde331ee529d69e40540414f179d914c8b7c62e0e11547d3687d837bd129af855902f647a6eca89d83a4b4442e8b44d87839d0c95a79727ffed286ac78a512b20a03c8e5aeb7c997bd24e8e61a74cd6824afe1f844c14e52958f72896c91214d462a5028084dab0df35e91f297508e71de534ed8ea9aaa5f9c2c5e8fcc472552107581c58a11fbfb500c05d3b75472e770e4aec9dafa97a4e11a0a145ee4f58eeb996e4d0b8f90a29480f43be490e6119989ef32c0018eed2aef1edf5d000f8bcdbb1bc228fa6ea4ca1e237da41dde6e49057398ca9db4f785f0327ff87cd2685594ab637c0989604856571d6b2373c949796d52a432094bce27d445e1ec751203480803c19c1ddd5b435f88c27a90700296f2d5473d11234dde23740cd532987b7e7a5eb129f67f63f2b64b07f980856d19dee4965ef2c8d9cea30778db888e0500d04d910d990fb2de69d5062a5e9bababfd54d23376c9aa53c6359551bd296658be04dc1392b1d30ea2d8572862deb1e9402d5d6c22c2070a20c43166a68ea4585bd99a28f2b22be8c9acf35874ab19d94314eb7972a89723a4122093f76ff28e95094e2bbd3f3b8a0680bdfdc4f06cf67abb59d6cf6bb2a30ffb131a2028aeccd4e7c6ec30db5c8cfa0f0c530ade45a0e0802ae77279d35b1cf086f94722c4046c62fde60d4c0cc48e84b1b023c6664332a244d8a2e650f41f323b9d05c0637959796b9ef6c3dabee35c81a409e8d5279197af772eddf3fd609822393d2e17fc215f09da41ebd991407b9b206e93fcdbbb3ccf53dcdacdb9759460cb35bd00e281ba2ebd6f04af46c3872b12bccb7b70f61397d27dbfee5e508ca02451047b25520307831ceb7cb39ea35305dae84b3a9a5871ade0f364a35b7214b1b7bb4e5b2bd80ab83740d3e00e57218e499ee2763fa683f9e2118eb7dab943cfac6cef8fd36d37e91cf08459d1077813d506040fa8b6c5cf76a75c7cf0a476a8eb36ad428db29a31d0eadcca7f70f8768a6893991899ba0a3f469ef5f0a8feb0877e4557a2ca1d41ca944db3de4d13125b82dabcbbf36624308eaff2055109446777ca592a3c4f62a9823cd53de6993d5edeaef7e9cd471fd7bc0973e46732c5dbc2f642504fb6fe840c99c012f2dcf035495237f2451dc7e708bf4e22010e86fe21c30aac0e9f3ad31feee69849d6eafeba8337690e163bb22c8d9aff2c55865663af5d4dd23132a7d6d9748dbdc86d71cf773a0a1a2768ce8da9e6fbecda29ab2eb1ad75705ab1fb448cd6c2987b814d759462e4930e124b48838319f5907f33911cb80a583e91c552d1d41de91ed02aba232b9a53331260c8061ae354646e96fde0818d695b7aa058d0ac09fb4f92cb412e218f4e9f9771c1cd067023e844c96ac188db8869c50b1297010d9c21dbce60d815a1c936170df77e057a13b4798f39f5bfc36f5acf36728ea7e017ab5fc39a06e2bbd42ad3118a8c2e5531fb6ae63adf525591ed1a2a50ecf81a290d80573434d45024a8050a0d51c6e74f4ac2c539f6d68694b367a3568ba9187872d9b648fd4dcc9a01de7b2c8d1036d7b2e37b57d89c8df37e26be4bad0728e2922915901339b8a908fb2a5632c0018b6ca51f29b66e7cc833e1b602f954d3ccc6ed80cf727ce0e4bd74500b32635d909fb7dda7be7d0807b93318e81108c4a1d2c4dc73e7b393b5cc66e18fb7a49d665f3bde62b1832ec01fabecdf8fa77668b78db3679376938820ada3ccf23f540c1fa1c32b4c3303c0ac72351da080c0bab70b8effdc304089601feb613f0c11b57822474a788479ca7322b6d3f606fea2208d45ff3c1f893617f628304ba6765a4eeb1ac52a0e666373e5c746ddc48a781331eff4e465f8993c1bbaafd25d3b2a401c9732654d45f51fd2cadf1baf0d85a50f55f08d181ef08eb704392d5ee03bc4bc77d56e26b706ab88cae85f6ac608abd2e16b2242653c90e058a3c8a3d2310870f8a2bcc0c02d1241f1e90556d1ef91c26c01261c30c79a20a2a14a68196956bb1d0375179c897a143eaf5f357df22f21b556b17e12335ae01c9929bda86dcf101367407e0d115de401 10:28:26.914 INFO [main] [Client](Client.java:2040) SendShieldedCoin successful !! Transfer from shielded address to shielded address Example: listshieldednote Unspend note list like: 1 ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 100000000 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 1 UnSpend 0 ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 100000000 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 0 UnSpend test1 sendshieldedcoin null 0 1 0 null 0 1 ztron1hn9r3wmytavslztwmlzvuzk3dqpdhwcmda2d0deyu5pwv32dp78saaslyt82w0078y6uzfg8x6w 90000000 test2 address ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 value 100000000 rcm 224463fbba4ef49a4e547d5b7fe608ebd9ec717591db2f6b6644a862a5528b07 trxId 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 index 0 memo test1 Receive txid = 840b127fea05f7f86c43ad9fb5fe7fa27e977465cea4e4ae25e59e0de75ad99e transaction hex string is hash: 69ef6fa21da0d1633187a0c55c1ba20f323e88ba8e27e52ece452860c9726e9f txid: 06b55fc27f7ec649396706d149d18a0bb003347bdd7f489e3d47205da9cee802 raw_data: { ref_block_bytes: 05d8 ref_block_hash: d5877abdc498f58f contract: { contract 0 ::: [ contract_type: ShieldedTransferContract spend_description: [ { value_commitment:d972b1946f3884732f0c1d67d447ab6aa2128cc70fc44f7ec664c257361e7638 anchor:efe6dd711e8dc619a892b3a3f8b0e86bb51e867718e34e8e5c483e45ba1d1f13 nullifier:8a5185c92d707bde700aad36ae54966cb9bc747cacc422425e41c176f3c7294c rk:1fd62d517815b8f717b86d93cd1c6cd196c6ac6be785a8043cbd860264908fc3 zkproof:975a3ea4d6682945ad6d036401027cff7ec26b554ece18bc42e69acdbeb3742daa1a556d2b707dee5cfd6ab391e35705a7fef815c69cb76974c7519f82c8115110aa9ce702dcc0dd07322ea07bdffdfa7947b90f2beb50308fb4640352c7e4fd07ae8d23f77dec6ee7f0ef538064002b5e6b3a35b781d64080adb0a244afa86d06811c145551516948c834343a85a938942b3b538d8ba5d1d765a7cf3bb16a1a4f211bb1dff93ca85b16f814cf0939f64cfa89dcd833cb31a726b689e0d4b4d4 spend_authority_signature:5caaa268628276ef71a709e31c9cc5ab1160ba6ab82be0064fbaa31fc372ab4f311dd2ccb50e5d908522acea4cd512241aed7c54bdf65bc76fbba27d8451dc03 } ] receive_description: [ { value_commitment:9e9bd0ff2d6c1dfa134dd7c834426c3158a1c0b1780cd7cfd4fdf3a055ff2e50 note_commitment:7ffbb461e35abd8c7505e71399ad2d2d41749af8b567043940cee496790e773f epk:ef92ed5d2725ffc92fb02fa632bc4b68b246600149e2207d69c7209d4fbb88bf c_enc:b462cecb440db4cb994a9f2877f812972bd93f127f8c0b6e0909532ba013f70c7953146a7d22149f96b04c23a820f0cbb422ccdb01f676c4345230c67325f1de1bba5f8bd88db21db6c86f7da7765dbbe9b389326cab3deaaa59ea903c3d2db50394e6d431e193ff37ecd164cd3b9579904cc79096acdc7b1c47d91142d0d5beea48bcfbc540aa78ef02f3fb8ba68a1ee0705abc1aaa07200a02a7c9aaa930649de0adf8f90b6acd349136b550a3b1adbad913fef482b73914f5511e758ec280d463b2df8c89c127b0c127bc1e8b68f5dca0682684c9c2a560015593762ee6e401ce6aac23c97de7f636d01b27dc4caa1bff8c98a36342661ff26e41826601d0945aefb9d86b94382fb912e8f32cb2c8990101765aa9e78cbe6c48c2ee3c0fd4df3050cb1395f98d3335b01a5f8bdbfefd3a445ab91cd69f30b1ed5da2c7b0c4ef732cc1e33951714bcce6d2f580711d86a7663defdd09998237282c710de15db31dbbcfe043efad8ee55f9c5de779553a173a7b87bb062412d061c20ebf46f918024e460bf9f7a9650986eb9962478e5c069ae8bc7c01d6399e60d0154f956d0b7613d774d2e8b8bde3d4b1cf5ed46edfec663017a70312eb04ee68baaae9c0779d782031fad6f99a37981db699fdcfa29fdc5e0628b73209b8fef58ca70581f90899c756a0b2911caab7685b9cdaf7da3a02a258df8d8fe16a939f2c601e39ec795faa1c7d06e00e9c2dbc9181f9a97dde5fc23053a2753262d7c570eca6e104bf0e308de99d0e04dab9130a4b3fb1fec21f75f4d1096270130199664e39687d3cc777 c_out:fcb1be9acda155d265301b76eb6dd199dad759af298746bfd6588844affb7c53c702b4915978483c28a5753d3a02a91d1769874d7b5b5e55288aa1420b90b9eb71f21a25fb653f41352cb9cf762f1a77 zkproof:a5229d0065d15720421f5dc95236521aa5a1f676ed695892a6c5e6cb504f72712ac2b462a78b7b57543bd7939a74550eb978c343080926480d1119e9b299ed07a943f8cdc937f5f68e3b1fdd17cffb8e81225ef867ffbdf288b61947e4cf69d70b8cf697fc77bd8132c1ed9d8b816a07a285e6b77955ac6d9b8009094875ce531abac0443486aba986afd61bc6d1e05484390f1444de7d54f6af5d8bba38106a2262e9c74d86d981388ea1cba44280e0d993e21b358bbc7a80f13e4236cdb62e } ] binding_signature: 87e087f3eb8455a327c9621787bf6fbf592a3d6307bfee7e5ac7282e5c50c9556f8feb4cbe21d33e22b4d6c40046419be88cc3acd6ebae781945aea904627e02 ] } timestamp: Fri Jul 19 10:43:38 CST 2019 fee_limit: 0 } txid: 840b127fea05f7f86c43ad9fb5fe7fa27e977465cea4e4ae25e59e0de75ad99e raw_data: { ref_block_bytes: 05d8 ref_block_hash: d5877abdc498f58f contract: { contract 0 ::: [ contract_type: ShieldedTransferContract spend_description: [ { value_commitment:d972b1946f3884732f0c1d67d447ab6aa2128cc70fc44f7ec664c257361e7638 anchor:efe6dd711e8dc619a892b3a3f8b0e86bb51e867718e34e8e5c483e45ba1d1f13 nullifier:8a5185c92d707bde700aad36ae54966cb9bc747cacc422425e41c176f3c7294c rk:1fd62d517815b8f717b86d93cd1c6cd196c6ac6be785a8043cbd860264908fc3 zkproof:975a3ea4d6682945ad6d036401027cff7ec26b554ece18bc42e69acdbeb3742daa1a556d2b707dee5cfd6ab391e35705a7fef815c69cb76974c7519f82c8115110aa9ce702dcc0dd07322ea07bdffdfa7947b90f2beb50308fb4640352c7e4fd07ae8d23f77dec6ee7f0ef538064002b5e6b3a35b781d64080adb0a244afa86d06811c145551516948c834343a85a938942b3b538d8ba5d1d765a7cf3bb16a1a4f211bb1dff93ca85b16f814cf0939f64cfa89dcd833cb31a726b689e0d4b4d4 spend_authority_signature:5caaa268628276ef71a709e31c9cc5ab1160ba6ab82be0064fbaa31fc372ab4f311dd2ccb50e5d908522acea4cd512241aed7c54bdf65bc76fbba27d8451dc03 } ] receive_description: [ { value_commitment:9e9bd0ff2d6c1dfa134dd7c834426c3158a1c0b1780cd7cfd4fdf3a055ff2e50 note_commitment:7ffbb461e35abd8c7505e71399ad2d2d41749af8b567043940cee496790e773f epk:ef92ed5d2725ffc92fb02fa632bc4b68b246600149e2207d69c7209d4fbb88bf c_enc:b462cecb440db4cb994a9f2877f812972bd93f127f8c0b6e0909532ba013f70c7953146a7d22149f96b04c23a820f0cbb422ccdb01f676c4345230c67325f1de1bba5f8bd88db21db6c86f7da7765dbbe9b389326cab3deaaa59ea903c3d2db50394e6d431e193ff37ecd164cd3b9579904cc79096acdc7b1c47d91142d0d5beea48bcfbc540aa78ef02f3fb8ba68a1ee0705abc1aaa07200a02a7c9aaa930649de0adf8f90b6acd349136b550a3b1adbad913fef482b73914f5511e758ec280d463b2df8c89c127b0c127bc1e8b68f5dca0682684c9c2a560015593762ee6e401ce6aac23c97de7f636d01b27dc4caa1bff8c98a36342661ff26e41826601d0945aefb9d86b94382fb912e8f32cb2c8990101765aa9e78cbe6c48c2ee3c0fd4df3050cb1395f98d3335b01a5f8bdbfefd3a445ab91cd69f30b1ed5da2c7b0c4ef732cc1e33951714bcce6d2f580711d86a7663defdd09998237282c710de15db31dbbcfe043efad8ee55f9c5de779553a173a7b87bb062412d061c20ebf46f918024e460bf9f7a9650986eb9962478e5c069ae8bc7c01d6399e60d0154f956d0b7613d774d2e8b8bde3d4b1cf5ed46edfec663017a70312eb04ee68baaae9c0779d782031fad6f99a37981db699fdcfa29fdc5e0628b73209b8fef58ca70581f90899c756a0b2911caab7685b9cdaf7da3a02a258df8d8fe16a939f2c601e39ec795faa1c7d06e00e9c2dbc9181f9a97dde5fc23053a2753262d7c570eca6e104bf0e308de99d0e04dab9130a4b3fb1fec21f75f4d1096270130199664e39687d3cc777 c_out:fcb1be9acda155d265301b76eb6dd199dad759af298746bfd6588844affb7c53c702b4915978483c28a5753d3a02a91d1769874d7b5b5e55288aa1420b90b9eb71f21a25fb653f41352cb9cf762f1a77 zkproof:a5229d0065d15720421f5dc95236521aa5a1f676ed695892a6c5e6cb504f72712ac2b462a78b7b57543bd7939a74550eb978c343080926480d1119e9b299ed07a943f8cdc937f5f68e3b1fdd17cffb8e81225ef867ffbdf288b61947e4cf69d70b8cf697fc77bd8132c1ed9d8b816a07a285e6b77955ac6d9b8009094875ce531abac0443486aba986afd61bc6d1e05484390f1444de7d54f6af5d8bba38106a2262e9c74d86d981388ea1cba44280e0d993e21b358bbc7a80f13e4236cdb62e } ] binding_signature: 87e087f3eb8455a327c9621787bf6fbf592a3d6307bfee7e5ac7282e5c50c9556f8feb4cbe21d33e22b4d6c40046419be88cc3acd6ebae781945aea904627e02 ] } timestamp: Fri Jul 19 10:43:38 CST 2019 fee_limit: 0 } 10:43:38.722 INFO [main] [Client](Client.java:2058) SendShieldedCoinWithoutAsk successful !! Transfer from shielded address to transparent address Example: listshieldednote Unspend note list like: 1 ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 100000000 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 1 UnSpend 2 ztron1hn9r3wmytavslztwmlzvuzk3dqpdhwcmda2d0deyu5pwv32dp78saaslyt82w0078y6uzfg8x6w 90000000 06b55fc27f7ec649396706d149d18a0bb003347bdd7f489e3d47205da9cee802 0 UnSpend test2 sendshieldedcoin null 0 1 2 TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ 80000000 0 address ztron1hn9r3wmytavslztwmlzvuzk3dqpdhwcmda2d0deyu5pwv32dp78saaslyt82w0078y6uzfg8x6w value 90000000 rcm becfc0d183a9fe0f8571c9a071bd91fafa7f84c0a5c8c704b100a1ecbd611804 trxId 06b55fc27f7ec649396706d149d18a0bb003347bdd7f489e3d47205da9cee802 index 0 memo test2 Receive txid = f8bd9e486bdd3a7fa99b4e0b8492f6dac6179c143e44c94e363a397a1ab9fc3b transaction hex string is hash: d6487d07461fc5c32e61469be9deec6d6e0288e5906eb840b6bac287b2e946e6 txid: f8bd9e486bdd3a7fa99b4e0b8492f6dac6179c143e44c94e363a397a1ab9fc3b raw_data: { ref_block_bytes: 060c ref_block_hash: c047800cdbd6b5db contract: { contract 0 ::: [ contract_type: ShieldedTransferContract spend_description: [ { value_commitment:65f4ee0430e1d6ee492be68885ac38aa44a0d341ceec915dc4c6821bd1e09535 anchor:e43b41c9f42c98aa5f88c2d78760c2bf592a73b9fc5f5f62deb24aa0ce5e7113 nullifier:047965dfee699250578d728e9a11ca733774e604b4c28a4b40d4d1f8cd8b8c2c rk:460b69899b5d18dcba9a2af5e9520542396731caf09611cc4f1d7c61bc7ceddb zkproof:a87f2f3445338304142a0b515b2bc90525dcc51c6f16cfd49b00e7592efa9847004a253334408bfe0637e3cb831647968bd8117cf152d3233296a2d5b3cce6c70d80ffb95917ebc5ef378b994c7ecf95217496de41ddf09a9618279cf697352d0c2d4546d53ce1d9f7c6a05915fa5bc66745b58984fc6d76adff9292237bbd75c306fc0e9576a1b0478d80ca6dba2185a4dde684669e0e1af50de954fad5ef440f8248f10f08c22185585d30c917506ec98a92ee8d0cd8c7e31503697280d010 spend_authority_signature:588f25beaf8d2a52bb4b5ff09d34c756cd2da4623b08f580046e0a858b32a41b2fc8c5acecce59c74368fbfff05d64f09a72dde569b16d2ac020f7df1bb15105 } ] receive_description: [ { value_commitment:577acf5e74a0359cd2850287ac141845a5cdae3152e0b1770842c01516a1606b note_commitment:bf656bf6273c96507dd0316284be8894a738c674498e64389235f033df1e0d41 epk:8a2666e7762a31a4a796bd4b1630cafc475f47699c1c05e1e2f0265537f14f66 c_enc:4c0a89428c210d848f8f7cbb89f2305aad60d9bc9a222d46f588fcf03b73341f3a400a2026f999e7c8a0a74a7fb37bd4aa6072c05ea1bff8ecf234b4cdc064a00481ab153c2f5168de1cbec568c305956b2d1459e7d75effc8902958f51de77efb8ee1614d5de22bd80536d5a24c8799e5c04294f3db9e6180f91de3d83209e6b7e7bf7c54c7e3da8fa938a975446e5227c34227a7ce5e1cff66420a641aca44c0a85a527a1cedb49934c38665d91ebc8623678f99de7aa46af27b9f060552686c9e1911298729404e2cbe317d0cf3779861538af9307f76079f7afb725dda3c80912e5b869d85fe0781518e1cb41c2275ef776e4bf31fb6bec99ee70eb4cba35fc5816d7c809c810a13dd685cd2d7aa08fb4cbc75767af82657d50d1594c6e6aafe0c2b4fffbb897e68c506d33efaacff8b9b8cd099b3b291a045dbc76dd54a87780c6f83b340f00fb0d436f7f71ab6a2487fab39c3826f2cddb50d367e9fac61b949f8593cd6dbf26e26c5772bd3a5a3145768303442708151b27a714b142d9dc9ad96ea4fd69e9ae3b8c2a78aae7c25e32b6d23330f5ba1950ab1357c5c8a1400d920d16ae30a5c30921c93d1f6beda6bb58825a59a75a322325b87690656c8370eeb50e500690fb7076017f029997bc8c8ca6f1d1d555fe630076057bc3327ff00a518c1a36a21156175639e50c78fea2a3ac44df60e96e7b3f731f9d947166328b85ffbeb938e3dbddfce0a07b9b11ec7da5a319471401f1a40da6b70e330e484159408526ea7a4c350216d15ca62e084608f0adae5fa3c1e8312019fdf2543ed4c c_out:eb8baa73655503aee8d8ec3d4e281c58de48693fac562862c3b875faa7e3b915cfba3bb8a497dd6d3a13b49c02a034d10df0df2029c0b8a9080ef88f6152e6f4ecd4c639e8f450a5d5e818ba4620475b zkproof:93556b5e801251c410930717abbb8f4aaecf102383ec0ac0cbec0dab16f5fd11009154e2e7260c7de14b4a52d2f5e3d898816ff8377e9c7e4592afbe716924239b56f776cf1c4a505a78ff5b8c783432bb3eeacda3ae3a73d8297de0786abe91123ea85faa3531021e6ede128fb2cc4aed1b0ef34f178e011e1b05f348d8b0d199fe97308f2ae0a681b03c273bc8925cb00850d59f8274613ee02563f61a9160bcb9b88d0c07824ef6a8f68051dc1b21fa815452b3a1b692983f5139abbc1ccc } ] binding_signature: 3780fa22547965820a00f9e3fbe94f49f8e4d9afcd1cf561946557a08de1b28aba8597ca4159b29cf42fa4ce6beb6570af8d622f642b7ac4896c012cf8d1fb00 transparent_to_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ to_amount: 80000000 ] } timestamp: Fri Jul 19 10:46:19 CST 2019 fee_limit: 0 } txid: f8bd9e486bdd3a7fa99b4e0b8492f6dac6179c143e44c94e363a397a1ab9fc3b raw_data: { ref_block_bytes: 060c ref_block_hash: c047800cdbd6b5db contract: { contract 0 ::: [ contract_type: ShieldedTransferContract spend_description: [ { value_commitment:65f4ee0430e1d6ee492be68885ac38aa44a0d341ceec915dc4c6821bd1e09535 anchor:e43b41c9f42c98aa5f88c2d78760c2bf592a73b9fc5f5f62deb24aa0ce5e7113 nullifier:047965dfee699250578d728e9a11ca733774e604b4c28a4b40d4d1f8cd8b8c2c rk:460b69899b5d18dcba9a2af5e9520542396731caf09611cc4f1d7c61bc7ceddb zkproof:a87f2f3445338304142a0b515b2bc90525dcc51c6f16cfd49b00e7592efa9847004a253334408bfe0637e3cb831647968bd8117cf152d3233296a2d5b3cce6c70d80ffb95917ebc5ef378b994c7ecf95217496de41ddf09a9618279cf697352d0c2d4546d53ce1d9f7c6a05915fa5bc66745b58984fc6d76adff9292237bbd75c306fc0e9576a1b0478d80ca6dba2185a4dde684669e0e1af50de954fad5ef440f8248f10f08c22185585d30c917506ec98a92ee8d0cd8c7e31503697280d010 spend_authority_signature:588f25beaf8d2a52bb4b5ff09d34c756cd2da4623b08f580046e0a858b32a41b2fc8c5acecce59c74368fbfff05d64f09a72dde569b16d2ac020f7df1bb15105 } ] receive_description: [ { value_commitment:577acf5e74a0359cd2850287ac141845a5cdae3152e0b1770842c01516a1606b note_commitment:bf656bf6273c96507dd0316284be8894a738c674498e64389235f033df1e0d41 epk:8a2666e7762a31a4a796bd4b1630cafc475f47699c1c05e1e2f0265537f14f66 c_enc:4c0a89428c210d848f8f7cbb89f2305aad60d9bc9a222d46f588fcf03b73341f3a400a2026f999e7c8a0a74a7fb37bd4aa6072c05ea1bff8ecf234b4cdc064a00481ab153c2f5168de1cbec568c305956b2d1459e7d75effc8902958f51de77efb8ee1614d5de22bd80536d5a24c8799e5c04294f3db9e6180f91de3d83209e6b7e7bf7c54c7e3da8fa938a975446e5227c34227a7ce5e1cff66420a641aca44c0a85a527a1cedb49934c38665d91ebc8623678f99de7aa46af27b9f060552686c9e1911298729404e2cbe317d0cf3779861538af9307f76079f7afb725dda3c80912e5b869d85fe0781518e1cb41c2275ef776e4bf31fb6bec99ee70eb4cba35fc5816d7c809c810a13dd685cd2d7aa08fb4cbc75767af82657d50d1594c6e6aafe0c2b4fffbb897e68c506d33efaacff8b9b8cd099b3b291a045dbc76dd54a87780c6f83b340f00fb0d436f7f71ab6a2487fab39c3826f2cddb50d367e9fac61b949f8593cd6dbf26e26c5772bd3a5a3145768303442708151b27a714b142d9dc9ad96ea4fd69e9ae3b8c2a78aae7c25e32b6d23330f5ba1950ab1357c5c8a1400d920d16ae30a5c30921c93d1f6beda6bb58825a59a75a322325b87690656c8370eeb50e500690fb7076017f029997bc8c8ca6f1d1d555fe630076057bc3327ff00a518c1a36a21156175639e50c78fea2a3ac44df60e96e7b3f731f9d947166328b85ffbeb938e3dbddfce0a07b9b11ec7da5a319471401f1a40da6b70e330e484159408526ea7a4c350216d15ca62e084608f0adae5fa3c1e8312019fdf2543ed4c c_out:eb8baa73655503aee8d8ec3d4e281c58de48693fac562862c3b875faa7e3b915cfba3bb8a497dd6d3a13b49c02a034d10df0df2029c0b8a9080ef88f6152e6f4ecd4c639e8f450a5d5e818ba4620475b zkproof:93556b5e801251c410930717abbb8f4aaecf102383ec0ac0cbec0dab16f5fd11009154e2e7260c7de14b4a52d2f5e3d898816ff8377e9c7e4592afbe716924239b56f776cf1c4a505a78ff5b8c783432bb3eeacda3ae3a73d8297de0786abe91123ea85faa3531021e6ede128fb2cc4aed1b0ef34f178e011e1b05f348d8b0d199fe97308f2ae0a681b03c273bc8925cb00850d59f8274613ee02563f61a9160bcb9b88d0c07824ef6a8f68051dc1b21fa815452b3a1b692983f5139abbc1ccc } ] binding_signature: 3780fa22547965820a00f9e3fbe94f49f8e4d9afcd1cf561946557a08de1b28aba8597ca4159b29cf42fa4ce6beb6570af8d622f642b7ac4896c012cf8d1fb00 transparent_to_address: TRGhNNfnmgLegT4zHNjEqDSADjgmnHvubJ to_amount: 80000000 ] } timestamp: Fri Jul 19 10:46:19 CST 2019 fee_limit: 0 } 10:46:19.226 INFO [main] [Client](Client.java:2040) SendShieldedCoin successful !! 4. sendshieldedcoinwithoutask This command is similar with sendshieldedcoin. The difference is sendshieldedcoin uses 'ask' to sign, however sendshieldedcoinwithoutask uses 'ak' to sign. 5. To show the notes your account possesses listshieldednote type type: 0 means the unspent notes, 1 means all the notes. Example: listshieldednote 0 Unspend note list like: 1 ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 100000000 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 1 UnSpend listshieldednote 1 All note list like: ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 100000000 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 1 UnSpend ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 100000000 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 0 Spend test1 ztron1hn9r3wmytavslztwmlzvuzk3dqpdhwcmda2d0deyu5pwv32dp78saaslyt82w0078y6uzfg8x6w 90000000 06b55fc27f7ec649396706d149d18a0bb003347bdd7f489e3d47205da9cee802 0 Spend test2 6. To clear the all local notes resetshieldednote When there is something wrong with the data or you switch the environment, you can use this command. 7. To scan notes using ivk ScanNotebyIvk ivk startNum endNum ivk: The ivk of the shielded address startNum: The start block number endNum: The end block number Example: scannotebyivk d2a4137cecf049965c4183f78fe9fc9fbeadab6ab3ef70ea749421b4c6b8de04 500 1499 11:25:43.728 INFO [main] [WalletApiWrapper](WalletApiWrapper.java:966) txid:4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 index:0 address:ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 rcm:224463fbba4ef49a4e547d5b7fe608ebd9ec717591db2f6b6644a862a5528b07 value:100000000 memo:test1 11:25:43.730 INFO [main] [WalletApiWrapper](WalletApiWrapper.java:974) complete. 8. To scan notes using ovk ScanNotebyOvk ovk startNum endNum ovk: The ovk of the shielded address startNum: The start block number endNum: The end block number Example: scannotebyovk a5b06ef3067855d741f966d54dfa1c124548535107333336bd9552a427f0529e 500 1499 11:27:17.760 INFO [main] [WalletApiWrapper](WalletApiWrapper.java:1042) txid:06b55fc27f7ec649396706d149d18a0bb003347bdd7f489e3d47205da9cee802 index:0 paymentAddress:ztron1hn9r3wmytavslztwmlzvuzk3dqpdhwcmda2d0deyu5pwv32dp78saaslyt82w0078y6uzfg8x6w rcm:becfc0d183a9fe0f8571c9a071bd91fafa7f84c0a5c8c704b100a1ecbd611804 memo:test2 value:90000000 11:27:17.760 INFO [main] [WalletApiWrapper](WalletApiWrapper.java:1050) complete. 9. To calculate the nullifier of a note GetShieldedNullifier index index: The index of the note Example: listshieldednote Unspend note list like: 2 ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h 100000000 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 1 UnSpend getshieldednullifier 2 address ztron1ghdy60hya8y72deu0q0r25qfl60unmue6889m3xfc3296a5ut6jcyafzhtp9nlutndukufzap4h value 100000000 rcm 07ed5471098652ad441575c61868d1e11317de0f73cbb743a4c5cfe78e3d150c trxId 4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 index 1 memo ShieldedNullifier:2a524a3be2643365ecdacf8f0d3ca1de8fad3080eea0b9561435b5d1ee467042 10. To scan the notes status of your local shielded address ScanAndMarkNotebyAddress shieldedAddress startNum endNum shieldedAddress: The local shielded address startNum: The start block number endNum: The end block number Example: ScanAndMarkNotebyAddress ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 500 1500 11:33:27.789 INFO [main] [WalletApiWrapper](WalletApiWrapper.java:1004) txid:4ce5656a13049df00abc7fb3ce78d54c78944d3cbbdfdb29f288e1df5fdf67e1 index:0 isSpend:true address:ztron16j06s3p5gvp2jde4vh7w3ug3zz3m62zkyfu86s7ara5lafhp22p9wr3gz0lcdm3pvt7qx0aftu4 rcm:224463fbba4ef49a4e547d5b7fe608ebd9ec717591db2f6b6644a862a5528b07 value:100000000 memo:test1 11:33:27.789 INFO [main] [WalletApiWrapper](WalletApiWrapper.java:1019) complete. 11. To generate the spending key of a shielded address GetSpendingKey Example: GetSpendingKey 11:48:52.918 INFO [main] [Client](Client.java:2194) 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb5f6a 12. To get the ask\uff0cnsk and ovk from a spending key etExpandedSpendingKey sk Example: getExpandedSpendingKey 0eb458b309fa544066c40d80ce30a8002756c37d2716315c59a98c893dbb5f6a 11:49:00.481 INFO [main] [Client](Client.java:2212) ask:252a0f6f6f0bac114a13e1e663d51943f1df9309649400218437586dea78260e 11:49:00.485 INFO [main] [Client](Client.java:2213) nsk:5cd2bc8d9468dbad26ea37c5335a0cd25f110eaf533248c59a3310dcbc03e503 11:49:00.485 INFO [main] [Client](Client.java:2214) ovk:892a10c1d3e8ea22242849e13f177d69e1180d1d5bba118c586765241ba2d3d6 13. To get ak from ask getAkFromAsk ask Example: GetAkFromAsk 252a0f6f6f0bac114a13e1e663d51943f1df9309649400218437586dea78260e 11:49:33.547 INFO [main] [Client](Client.java:2232) ak:f1b843147150027daa5b522dd8d0757ec5c8c146defd8e01b62b34cf917299f1 14. To get nk from nsk getNkFromNsk nsk Example: GetNkFromNsk 5cd2bc8d9468dbad26ea37c5335a0cd25f110eaf533248c59a3310dcbc03e503 11:49:44.651 INFO [main] [Client](Client.java:2250) nk:ed3dc885049f0a716a4de8c08c6cabcad0da3c437202341aa3d9248d8eb2b74a 15. To get ivk from ak and nk getIncomingViewingKey ak[64] nk[64] Example: getincomingviewingkey f1b843147150027daa5b522dd8d0757ec5c8c146defd8e01b62b34cf917299f1 ed3dc885049f0a716a4de8c08c6cabcad0da3c437202341aa3d9248d8eb2b74a 11:51:45.686 INFO [main] [Client](Client.java:2272) ivk:148cf9e91f1e6656a41dc9b6c6ee4e52ff7a25b25c2d4a3a3182d0a2cd851205 16. To GetDiversifier GetDiversifier Example: GetDiversifier 11:49:19.158 INFO [main] [Client](Client.java:2281) 11db4baf6bd5d5afd3a8b5 17. To get a shielded payment address by ivk and diversifier getshieldedpaymentaddress ivk[64] d[22] GetShieldedPaymentAddress 148cf9e91f1e6656a41dc9b6c6ee4e52ff7a25b25c2d4a3a3182d0a2cd851205 11db4baf6bd5d5afd3a8b5 11:52:33.542 INFO [main] [Client](Client.java:2309) pkd:65c11642115d386ed716b9cc06a3498e86e303d7f20d0869c9de90e31322ac15 11:52:33.543 INFO [main] [Client](Client.java:2310) shieldedAddress:ztron1z8d5htmt6h26l5agk4juz9jzz9wnsmkhz6uucp4rfx8gdccr6leq6zrfe80fpccny2kp2cray8z How to delegate resource a. delegate resource The latter two parameters are optional parameters. If not set, the TRX is frozen to obtain resources for its own use; if it is not empty, the acquired resources are used by receiverAddress . freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] [receiverAddress] frozen_balance: The amount of frozen TRX, the unit is the smallest unit (sun), the minimum is 1000000sun frozen_duration: frezen duration, 3 days ResourceCode: 0 BANDWIDTH;1 ENERGY receiverAddress: target account address b. unfreeze delegated resource The latter two parameters are optional. If they are not set, the BANDWIDTH resource is unfreeze by default; when the receiverAddress is set, the delegate resources are unfreezed. unfreezeBalance [ResourceCode:0 BANDWIDTH,1 CPU] [receiverAddress] c. get resource delegation information getDelegatedResource fromAddress toAddress get the information from the fromAddress to the toAddress resource delegate getDelegatedResourceAccountIndex address get the information that address is delegated to other account resources Wallet related commands RegisterWallet: Register your wallet, you need to set the wallet password and generate the address and private key. BackupWallet: Back up your wallet, you need to enter your wallet password and export the private key.hex string format,such as:721d63b074f18d41c147e04c952ec93467777a30b6f16745bc47a8eae5076545 BackupWallet2Base64: Back up your wallet, you need to enter your wallet password and export the private key.base64 format,such as:ch1jsHTxjUHBR+BMlS7JNGd3ejC28WdFvEeo6uUHZUU= ChangePassword: Modify the password of an account ImportWallet: Import wallet, you need to set a password\uff0chex String format ImportWalletByBase64: Import wallet, you need to set a password\uff0cbase64 fromat Account related commands GenerateAddress: Generate an address and print out the public and private keys GetAccount: Get account information based on address GetAccountNet: The usage of bandwidth GetAccountResource: The usage of bandwidth and energy GetAddress: Get the address of the current login account GetBalance: Get the balance of the current login account How to get transaction information GetTransactionById: Get transaction information based on transaction id GetTransactionCountByBlockNum: Get the number of transactions in the block based on the block height GetTransactionInfoById: Get transaction-info based on transaction id,generally used to check the result of a smart contract trigger How to get block information GetBlock: Get the block according to the block number; if you do not pass the parameter, get the latest block GetBlockById: Get block based on blockID GetBlockByLatestNum n Get the latest n blocks, where 0< n < 100 GetBlockByLimitNext startBlockId endBlockId Get the block in the range [startBlockId, endBlockId) some others GetNextMaintenanceTime: Get the start time of the next maintain period ListNodes: Get other peer information ListWitnesses: Get all miner node information BroadcastTransaction: Broadcast the transaction, where the transaction is in hex string format.","title":"Wallet-cli"},{"location":"clients/wallet-cli/#usage-guide","text":"","title":"Usage Guide"},{"location":"clients/wallet-cli/#tutorials","text":"","title":"Tutorials"},{"location":"contracts/compiler/","text":"Tools 1. TronStudio Support the build, debug, run, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-studio-intro 2. TronBox Support the build, deploy, transplant, etc. for solidity language written smart contract. https://developers.tron.network/docs/tron-box-user-guide 3. TronWeb Provide http api service for the usage of smart contract. https://developers.tron.network/docs/tron-web-intro 4. TronGrid Provide smart contract event query service. https://developers.tron.network/docs/tron-grid-intro Development First you can use TronStudio to write, build and debug the smart contract. After you finish the development of the contract, you can copy it to SimpleWebCompiler to compile to get ABI and ByteCode. We provide a simple data read/write smart contract code example to demonstrate: pragma solidity ^0.4.0; contract DataStore { mapping(uint256 => uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/tron.log Develop a Smart Contract Copy the code example above to remix to debug. Compile in SimpleWebCompiler for ABI and ByteCode Copy the code example above to SimpleWebCompiler to get ABI and ByteCode. Because TRON's compiler is a little different from Ethereum, so you can not get ABI and ByteCode by using Remix. But it will soon be supported. Using Wallet-cli to Deploy Download Wallet-Cli and build shell # download cource code git clone https://github.com/tronprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI from SimpleWebCompiler bytecode: ByteCode from SimpleWebCompiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The TRX consumption limit for the deployment, unit is SUN(1 SUN = 10^-6 TRX) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of TRX transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The TRX consumption limit for the trigger, unit is SUN(1 SUN = 10^-6 TRX) value: The amount of TRX transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract.","title":"Compiler"},{"location":"contracts/compiler/#tools","text":"","title":"Tools"},{"location":"contracts/compiler/#development","text":"First you can use TronStudio to write, build and debug the smart contract. After you finish the development of the contract, you can copy it to SimpleWebCompiler to compile to get ABI and ByteCode. We provide a simple data read/write smart contract code example to demonstrate: pragma solidity ^0.4.0; contract DataStore { mapping(uint256 => uint256) data; function set(uint256 key, uint256 value) public { data[key] = value; } function get(uint256 key) view public returns (uint256 value) { value = data[key]; } } Start a Private Net Make sure the fullnode code has been deployed locally, you can check if 'Produce block successfully' log appears in FullNode/logs/tron.log Develop a Smart Contract Copy the code example above to remix to debug. Compile in SimpleWebCompiler for ABI and ByteCode Copy the code example above to SimpleWebCompiler to get ABI and ByteCode. Because TRON's compiler is a little different from Ethereum, so you can not get ABI and ByteCode by using Remix. But it will soon be supported. Using Wallet-cli to Deploy Download Wallet-Cli and build shell # download cource code git clone https://github.com/tronprotocol/wallet-cli cd wallet-cli # build ./gradlew build cd build/libs Note: You need to change the node ip and port in config.conf start wallet-cli java -jar wallet-cli.jar after started, you can use command lines to operate: importwallet <input your password twice for your account> <input your private key> login <input your password you set> getbalance deploy contract Shell # contract deployment command DeployContract contractName ABI byteCode constructor params isHex fee_limit consume_user_resource_percent <value> <library:address,library:address,...> # parameters contract_name: Contract name ABI: ABI from SimpleWebCompiler bytecode: ByteCode from SimpleWebCompiler constructor: When deploy contract, this will be called. If is needed, write as constructor(uint256,string). If not, just write # params: The parameters of the constructor, use ',' to split, like 1, \"test\", if no constructor, just write # fee_limit: The TRX consumption limit for the deployment, unit is SUN(1 SUN = 10^-6 TRX) consume_user_resource_percent: Consume user's resource percentage. It should be an integer between [0, 100]. if 0, means it does not consume user's resource until the developer's resource has been used up value: The amount of TRX transfer to the contract when deploy library: If the contract contains library, you need to specify the library address # example deploycontract DataStore [{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}] 608060405234801561001057600080fd5b5060de8061001f6000396000f30060806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631ab06ee58114604d5780639507d39a146067575b600080fd5b348015605857600080fd5b506065600435602435608e565b005b348015607257600080fd5b50607c60043560a0565b60408051918252519081900360200190f35b60009182526020829052604090912055565b600090815260208190526040902054905600a165627a7a72305820fdfe832221d60dd582b4526afa20518b98c2e1cb0054653053a844cf265b25040029 # # false 1000000 30 0 If it is deployed successfully, it will return 'Deploy the contract successfully' get the contract address Your smart contract address will be: <contract address> # in this example Your smart contract address will be: TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 call the contract to store data, query data Shell # call contract command triggercontract <contract_address> <method> <args> <is_hex> <fee_limit> <value> # parameters contract_address: Contract address, like TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 method: The method called, like set(uint256,uint256) or fool(), use ',' to split the parameters. Do not leave space between parameters args: The parameters passed to the method called, use ',' to split the parameters. Do not leave space between parameters is_hex: whether the input parameters is Hex, false or true fee_limit: The TRX consumption limit for the trigger, unit is SUN(1 SUN = 10^-6 TRX) value: The amount of TRX transfer to the contract when trigger # trigger example ## set mapping 1->1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 set(uint256,uint256) 1,1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 ## get mapping key = 1 triggercontract TTWq4vMEYB2yibAbPV7gQ4mrqTyX92fha6 get(uint256) 1 false 1000000 0000000000000000000000000000000000000000000000000000000000000000 If the function called is constant or view, wallet-cli will return the result directly. If it contains library, before deploy the contract you need to deploy the library first. After you deploy library, you can get the library address, then fill the address in library:address,library:address,... # for instance, using remix to get the bytecode of the contract, like: 608060405234801561001057600080fd5b5061013f806100206000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063f75dac5a14610046575b600080fd5b34801561005257600080fd5b5061005b610071565b6040518082815260200191505060405180910390f35b600073<b>__browser/oneLibrary.sol.Math3__________<\\b>634f2be91f6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100d357600080fd5b505af41580156100e7573d6000803e3d6000fd5b505050506040513d60208110156100fd57600080fd5b81019080805190602001909291905050509050905600a165627a7a7230582052333e136f236d95e9d0b59c4490a39e25dd3a3dcdc16285820ee0a7508eb8690029 The address of the library deployed before is: TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 When you deploy, you need to use browser/oneLibrary.sol.Math3:TSEJ29gnBkxQZR3oDdLdeQtQQykpVLSk54 as the parameter of deploycontract.","title":"Development"},{"location":"contracts/contract/","text":"Smart Contract Introduction Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can runs in the way it is designed. TRON smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically. Smart Contract Features TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features. 1. Smart Contract TRON VM is compatible with Ethereum's smart contract, using protobuf to define the content of the contract: message SmartContract { message ABI { message Entry { enum EntryType { UnknownEntryType = 0; Constructor = 1; Function = 2; Event = 3; Fallback = 4; } message Param { bool indexed = 1; string name = 2; string type = 3; // SolidityType type = 3; } enum StateMutabilityType { UnknownMutabilityType = 0; Pure = 1; View = 2; Nonpayable = 3; Payable = 4; } bool anonymous = 1; bool constant = 2; string name = 3; repeated Param inputs = 4; repeated Param outputs = 5; EntryType type = 6; bool payable = 7; StateMutabilityType stateMutability = 8; } repeated Entry entrys = 1; } bytes origin_address = 1; bytes contract_address = 2; ABI abi = 3; bytes bytecode = 4; int64 call_value = 5; int64 consume_user_resource_percent = 6; string name = 7\uff1b int64 origin_energy_limit = 8; } origin_address: smart contract creator address contract_address: smart contract address abi: the api information of the all the function of the smart contract bytecode: smart contract byte code call_value: TRX transferred into smart contract while call the contract consume_user_resource_percent: resource consumption percentage set by the developer name: smart contract name origin_energy_limit: energy consumption of the developer limit in one call, must greater than 0. For the old contracts, if this parameter is not set, it will be set 0, developer can use updateEnergyLimit api to update this parameter (must greater than 0) Through other two grpc message types CreateSmartContract and TriggerSmartContract to create and use smart contract. 2. The Usage of the Function of Smart Contract 1. constant function and inconstant function There are two types of function according to whether any change will be made to the properties on the chain: constant function and inconstant function Constant function uses view/pure/constant to decorate, will return the result on the node it is called and not be broadcasted in the form of a transaction Inconstant function will be broadcasted in the form of a transaction while be called, the function will change the data on the chain, such as transfer, changing the value of the internal variables of contracts, etc. Note: If you use create command inside a contract (CREATE instruction), even use view/pure/constant to decorate the dynamically created contract function, this function will still be treated as inconstant function, be dealt in the form of transaction. 2. message calls Message calls can call the functions of other contracts, also can transfer TRX to the accounts of contract and none-contract. Like the common TRON triggercontract, Message calls have initiator, recipient, data, transfer amount, fees and return attributes. Every message call can generate a new one recursively. Contract can define the distribution of the remaining energy in the internal message call. If it comes with OutOfEnergyException in the internal message call, it will return false, but not error. In the meanwhile, only the gas sent with the internal message call will be consumed, if energy is not specified in call.value(energy), all the remaining energy will be used. 3. delegate call/call code/libary There is a special type of message call, delegate call. The difference with common message call is the code of the target address will be run in the context of the contract that initiates the call, msg.sender and msg.value remain unchanged. This means a contract can dynamically loadcode from another address while running. Storage, current address and balance all point to the contract that initiates the call, only the code is get from the address being called. This gives Solidity the ability to achieve the 'lib' function: the reusable code lib can be put in the storage of a contract to implement complex data structure library. 4. CREATE command This command will create a new contract with a new address. The only difference with Ethereum is the newly generated TRON address used the smart contract creation transaction id and the hash of nonce called combined. Different from Ethereum, the defination of nonce is the comtract sequence number of the creation of the root call. Even there are many CREATE commands calls, contract number in sequence from 1. Refer to the source code for more detail. Note: Different from creating a contract by grpc's deploycontract, contract created by CREATE command does not store contract abi. 5. built-in function and built-in function attribute (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 1\uff09TVM is compatible with solidity language's transfer format, including: - accompany with constructor to call transfer - accompany with internal function to call transfer - use transfer/send/call/callcode/delegatecall to call transfer Note: TRON's smart contract is different from TRON's system contract, if the transfer to address does not exist it can not create an account by smart contract transfer. 2\uff09Different accouts vote for SuperNode (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 3\uff09SuperNode gets all the reward (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 4\uff09SuperNode approves or disappoves the proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 5\uff09SuperNode proposes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 6\uff09SuperNode deletes a proposal (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 7\uff09TRON byte address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 8\uff09TRON string address converts to solidity address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 9\uff09Send token to target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 10\uff09Query token amount of target address (Since Odyssey-v3.1.1, TVM built-in function is not supported temporarily) 11\uff09Compatible with all the built-in functions of Ethereum Note: Ethereum's RIPEMD160 function is not recommended, because the return of TRON is a hash result based on TRON's sha256, not an accurate Ethereum RIPEMD160. 3. Contract Address Using in Solidity Language Ethereum VM address is 20 bytes, but TRON's VM address is 21 bytes. 1. address conversion Need to convert TRON's address while using in solidity (recommended): /** * @dev convert uint256 (HexString add 0x at beginning) tron address to solidity address type * @param tronAddress uint256 tronAddress, begin with 0x, followed by HexString * @return Solidity address type */ function convertFromTronInt(uint256 tronAddress) public view returns(address){ return address(tronAddress); } This is similar with the grammar of the conversion from other types converted to address type in Ethereum. 2. address judgement Solidity has address constant judgement, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function compareAddress(address tronAddress) public view returns (uint256){ // if (tronAddress == 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c) { // compile error if (tronAddress == 0xca35b7d915458ef540ade6068dfe2f44e8fa733c) { // right return 1; } else { return 0; } } But if you are using wallet-cli, you can use 21 bytes address, like 0000000000000000000041ca35b7d915458ef540ade6068dfe2f44e8fa733c 3. variable assignment Solidity has address constant assignment, if using 21 bytes address the compiler will throw out an error, so you should use 20 bytes address, like: function assignAddress() public view { // address newAddress = 0x41ca35b7d915458ef540ade6068dfe2f44e8fa733c; // compile error address newAddress = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c; // do something } If you want to use TRON address of string type (TLLM21wteSPs4hKjbxgmH1L6poyMjeTbHm) please refer to (2-4-7,2-4-8). 4. The Special Constants Differ from Ethereum Currency Like solidity supports ETH, TRON VM supports trx and sun, 1 trx = 1000000 sun, case sensitive, only support lower case. tron-studio supports trx and sun, remix does not support trx and sun. We recommend to use tron-studio instead of remix to build TRON smart contract. Block block.blockhash (uint blockNumber) returns (bytes32): specified block hash, can only apply to the latest 256 blocks and current block excluded block.coinbase (address): SuperNode address that produced the current block block.difficulty (uint): current block difficulty, not recommended, set 0 block.gaslimit (uint): current block gas limit, not supported, set 0 block.number (uint): current block number block.timestamp (uint): current block timestamp gasleft() returns (uint256): remaining gas msg.data (bytes): complete call data msg.gas (uint): remaining gas - since 0.4.21, not recommended, replaced by gesleft() msg.sender (address): message sender (current call) msg.sig (bytes4): first 4 bytes of call data (function identifier) msg.value (uint): the amount of SUN send with message now (uint): current block timestamp (block.timestamp) tx.gasprice (uint): the gas price of transaction, not recommended, set 0 tx.origin (address): transaction initiator Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource. Built-in Contracts 1.\u521b\u5efa\u8d26\u6237 AccountCreateContract AccountCreatContract \u5305\u542b3\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 account_address \uff1a \u5c06\u8981\u521b\u5efa\u7684\u8d26\u6237\u5730\u5740\u3002 type \uff1a\u8d26\u6237\u7c7b\u578b\u2014\u2014\u6bd4\u5982\uff1a 0 \u4ee3\u8868\u7684\u8d26\u6237\u7c7b\u578b\u662f Normal \u3002 message AccountCreateContract { bytes owner_address = 1; bytes account_address = 2; AccountType type = 3; } 2.\u8f6c\u8d26 TransferContract TransferContract \u5305\u542b3\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 to_address \uff1a \u76ee\u6807\u8d26\u6237\u5730\u5740\u3002 amount \uff1a\u8f6c\u8d26\u91d1\u989d\uff0c\u5355\u4f4d\u4e3a sun\u3002 message TransferContract { bytes owner_address = 1; bytes to_address = 2; int64 amount = 3; } 3.\u8f6c\u8d26\u53d1\u5e03\u7684Token TransferAssetContract TransferAssetContract \u5305\u542b4\u79cd\u53c2\u6570\uff1a asset_name \uff1a\u53d1\u5e03Token\u7684\u540d\u79f0\u3002 owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 to_address \uff1a \u76ee\u6807\u8d26\u6237\u5730\u5740\u3002 amount \uff1a\u8f6c\u8d26Token\u7684\u6570\u91cf\u3002 message TransferAssetContract { bytes asset_name = 1; bytes owner_address = 2; bytes to_address = 3; int64 amount = 4; } 4.\u6295\u7968\u8d85\u7ea7\u8282\u70b9 VoteWitnessContract VoteWitnessContract \u5305\u542b3\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 vote_address \uff1a \u8d85\u7ea7\u8282\u70b9\u5019\u9009\u4eba\u7684\u5730\u5740\u3002 vote_count \uff1a\u6295\u7ed9\u8d85\u7ea7\u8282\u70b9\u5019\u9009\u4eba\u7684\u7968\u6570\u3002 votes \uff1a\u8d85\u7ea7\u8282\u70b9\u5019\u9009\u4eba\u5217\u8868\u3002 support \uff1a\u662f\u5426\u652f\u6301\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u6052\u4e3atrue,\u6682\u672a\u4f7f\u7528\u8be5\u53c2\u6570\u3002 message VoteWitnessContract { message Vote { bytes vote_address = 1; int64 vote_count = 2; } bytes owner_address = 1; repeated Vote votes = 2; bool support = 3; } 5.\u521b\u5efa\u8d85\u7ea7\u8282\u70b9\u5019\u9009\u4eba WitnessCreateContract WitnessCreateContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 url \uff1a \u8d85\u7ea7\u8282\u70b9\u540e\u7eed\u4eba\u7f51\u5740\u3002 message WitnessCreateContract { bytes owner_address = 1; bytes url = 2; } 6.\u53d1\u5e03Token AssetIssueContract AssetIssueContract \u5305\u542b17\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 name \uff1a\u53d1\u5e03Token\u7684\u540d\u79f0\u2014\u2014\u6bd4\u5982\uff1a \u201cSiCongcontract\u201d \u3002 abbr \uff1a \u3002 total_supply \uff1a\u53d1\u884c\u603b\u7684token\u6570\u91cf\u2014\u2014\u6bd4\u5982\uff1a 100000000 \u3002 frozen_supply \uff1a\u51bb\u7ed3Token\u7684\u6570\u91cf\u548c\u51bb\u7ed3\u65f6\u95f4\u5217\u8868\u3002 trx_num \uff1a\u5bf9\u5e94TRX\u6570\u91cf\u2014\u2014\u6bd4\u5982\uff1a 232241 \u3002 num \uff1a \u5bf9\u5e94\u7684\u81ea\u5b9a\u4e49\u8d44\u4ea7\u6570\u76ee\u3002 start_time \uff1a\u5f00\u59cb\u65f6\u95f4\u2014\u2014\u6bd4\u5982\uff1a 20170312 \u3002 end_time \uff1a\u7ed3\u675f\u65f6\u95f4\u2014\u2014\u6bd4\u5982\uff1a 20170512 \u3002 order \uff1a\u76f8\u540casset_name\u65f6\uff0corder\u9012\u589e\uff0c\u9ed8\u8ba4\u521d\u59cb\u503c\u4e3a0\u3002 vote_score \uff1a\u5408\u7ea6\u7684\u8bc4\u5206\u2014\u2014\u6bd4\u5982\uff1a 12343 \u3002 description \uff1aToken\u7684\u63cf\u8ff0\u2014\u2014\u6bd4\u5982\uff1a \u201dtrondada\u201d \u3002 url \uff1aToken\u7684url\u5730\u5740\u94fe\u63a5\u3002 free_asset_net_limit \uff1a\u6bcf\u4e2a\u8d26\u6237\u53ef\u4ee5\u4f7f\u7528\u7684\u514d\u8d39\u5e26\u5bbd\uff08\u8f6c\u79fb\u8be5\u8d44\u4ea7\u65f6\u4f7f\u7528\uff09\u3002 public_free_asset_net_limit \uff1a\u6240\u6709\u8d26\u6237\u53ef\u4ee5\u4f7f\u7528\u7684\u514d\u8d39\u5e26\u5bbd\uff08\u8f6c\u79fb\u8be5\u8d44\u4ea7\u65f6\u4f7f\u7528\uff09\u3002 public_free_asset_net_usage \uff1a\u6240\u6709\u8d26\u6237\u4f7f\u7528\u514d\u8d39\u5e26\u5bbd\uff08\u8f6c\u79fb\u8be5\u8d44\u4ea7\u65f6\u4f7f\u7528\uff09\u3002 public_latest_free_net_time \uff1a\u6700\u8fd1\u4e00\u6b21\u8f6c\u79fb\u8be5Token\u4f7f\u7528\u514d\u8d39\u5e26\u5bbd\u7684\u65f6\u95f4\u3002 message AssetIssueContract { message FrozenSupply { int64 frozen_amount = 1; int64 frozen_days = 2; } bytes owner_address = 1; bytes name = 2; bytes abbr = 3; int64 total_supply = 4; repeated FrozenSupply frozen_supply = 5; int32 trx_num = 6; int32 num = 8; int64 start_time = 9; int64 end_time = 10; int64 order = 11; // the order of tokens of the same name int32 vote_score = 16; bytes description = 20; bytes url = 21; int64 free_asset_net_limit = 22; int64 public_free_asset_net_limit = 23; int64 public_free_asset_net_usage = 24; int64 public_latest_free_net_time = 25; } 7.\u66f4\u65b0\u8d85\u7ea7\u8282\u70b9\u5019\u9009\u4ebaURL WitnessUpdateContract WitnessUpdateContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 update_url \uff1a \u8d85\u7ea7\u8282\u70b9\u66f4\u65b0\u540e\u7684url\u3002 message WitnessUpdateContract { bytes owner_address = 1; bytes update_url = 12; } 8.\u8d2d\u4e70\u53d1\u884c\u7684Token ParticipateAssetIssueContract ParticipateAssetIssueContract \u5305\u542b4\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 to_address \uff1a\u53d1\u884cToken\u6240\u6709\u8005\u5730\u5740\u3002 account_name \uff1a \u53d1\u884cToken\u7684\u540d\u79f0\uff0c\u5305\u62ecToken\u540d\u79f0\u548corder amount \uff1a\u8d2d\u4e70\u53d1\u884cToken\u4f7f\u7528TRX\u7684\u6570\u91cf\uff0c\u5355\u4f4d\u662f sun\u3002 message ParticipateAssetIssueContract { bytes owner_address = 1; bytes to_address = 2; bytes asset_name = 3; int64 amount = 4; } 9.\u66f4\u65b0\u8d26\u6237 AccountUpdateContract AccountUpdateContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 account_name \uff1a \u8d26\u6237\u540d\u79f0\u2014\u2014\u6bd4\u5982\uff1a \"SiCongsaccount\u201d \u3002 // Update account name. Account name is not unique now. message AccountUpdateContract { bytes account_name = 1; bytes owner_address = 2; } 10.\u51bb\u7ed3\u8d44\u4ea7 FreezeBalanceContract FreezeBalanceContract \u5305\u542b4\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 frozen_balance \uff1a\u51bb\u7ed3\u8d44\u4ea7\u7684\u6570\u91cf\u3002 frozen_duration \uff1a\u51bb\u7ed3\u8d44\u4ea7\u7684\u65f6\u95f4\u6bb5\u3002 resource \uff1a \u51bb\u7ed3TRX\u83b7\u53d6\u8d44\u6e90\u7684\u7c7b\u578b\u3002 receiver_address \uff1a\u63a5\u6536\u8d44\u6e90\u7684\u8d26\u6237\u3002 message FreezeBalanceContract { bytes owner_address = 1; int64 frozen_balance = 2; int64 frozen_duration = 3; ResourceCode resource = 10; bytes receiver_address = 15; } 11.\u89e3\u51bb\u8d44\u4ea7 UnfreezeBalanceContract UnfreezeBalanceContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 resource \uff1a \u89e3\u51bb\u8d44\u6e90\u7684\u7c7b\u578b\u3002 receiver_address \uff1a\u63a5\u6536\u8d44\u6e90\u7684\u8d26\u6237\u3002 message UnfreezeBalanceContract { bytes owner_address = 1; ResourceCode resource = 10; bytes receiver_address = 13; } 12.\u63d0\u53d6\u5956\u52b1 WithdrawBalanceContract WithdrawBalanceContract \u5305\u542b1\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 message WithdrawBalanceContract { bytes owner_address = 1; } 13.\u89e3\u51bb\u53d1\u5e03\u7684Token UnfreezeAssetContract UnfreezeAssetContract \u5305\u542b3\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 message UnfreezeAssetContract { bytes owner_address = 1; } 14.\u66f4\u65b0\u901a\u8bc1\u53c2\u6570 UpdateAssetContract UpdateAssetContract \u5305\u542b3\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 description \uff1a \u901a\u8bc1\u7684\u63cf\u8ff0\u3002 url \uff1a\u901a\u8bc1\u7684Url\u3002 new_limit \uff1a\u6bcf\u4e2a\u8c03\u7528\u8005\u53ef\u4ee5\u6d88\u8017Bandwidth point\u7684\u9650\u5236\u3002 new_public_limit \uff1a \u6240\u6709\u8c03\u7528\u8005\u53ef\u4ee5\u6d88\u8017Bandwidth points\u7684\u9650\u5236\u3002 message UpdateAssetContract { bytes owner_address = 1; bytes description = 2; bytes url = 3; int64 new_limit = 4; int64 new_public_limit = 5; } 15.\u521b\u5efa\u63d0\u8bae ProposalCreateContract ProposalCreateContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 parameters \uff1a \u63d0\u8bae\u3002 message ProposalCreateContract { bytes owner_address = 1; map<int64, int64> parameters = 2; } 16.\u8d5e\u6210\u63d0\u8bae ProposalApproveContract ProposalApproveContract \u5305\u542b3\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 proposal_id \uff1a \u63d0\u8bae\u7684Id\u3002 is_add_approval \uff1a\u662f\u5426\u8d5e\u6210\u63d0\u8bae\u3002 message ProposalApproveContract { bytes owner_address = 1; int64 proposal_id = 2; bool is_add_approval = 3; // add or remove approval } 17.\u5220\u9664\u63d0\u8bae ProposalDeleteContract ProposalDeleteContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 proposal_id \uff1a \u63d0\u8baeID\u3002 message ProposalDeleteContract { bytes owner_address = 1; int64 proposal_id = 2; } 18.\u8bbe\u7f6e\u8d26\u6237ID SetAccountIdContract SetAccountIdContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 account_id \uff1a \u8d26\u6237Id\u3002 // Set account id if the account has no id. Account id is unique and case insensitive. message SetAccountIdContract { bytes account_id = 1; bytes owner_address = 2; } 19.\u521b\u5efa\u667a\u80fd\u5408\u7ea6 CreateSmartContract CreateSmartContract \u5305\u542b2\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 new_contract \uff1a \u667a\u80fd\u5408\u7ea6\u3002 message CreateSmartContract { bytes owner_address = 1; SmartContract new_contract = 2; } 20.\u89e6\u53d1\u667a\u80fd\u5408\u7ea6 TriggerSmartContract TriggerSmartContract \u5305\u542b4\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 contract_address \uff1a \u5408\u7ea6\u5730\u5740\u3002 call_value \uff1aTRX\u7684\u503c\u3002 data \uff1a\u64cd\u4f5c\u53c2\u6570\u3002 message TriggerSmartContract { bytes owner_address = 1; bytes contract_address = 2; int64 call_value = 3; bytes data = 4; } 21.\u66f4\u65b0\u5408\u7ea6 UpdateSettingContract UpdateSettingContract \u5305\u542b3\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 contract_address \uff1a \u5408\u7ea6\u5730\u5740\u3002 consume_user_resource_percent \uff1a\u5c06\u8981\u66f4\u65b0\u7684\u8d26\u6237\u6d88\u8017\u8d44\u6e90\u7684\u767e\u5206\u6bd4\u3002 message UpdateSettingContract { bytes owner_address = 1; bytes contract_address = 2; int64 consume_user_resource_percent = 3; } 22.\u521b\u5efa\u4ea4\u6613\u6240 ExchangeCreateContract ExchangeCreateContract \u5305\u542b5\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 first_token_id \uff1a \u7b2c1\u79cdtoken\u7684id \u3002 first_token_balance \uff1a\u7b2c1\u79cdtoken\u7684balance\u3002 second_token_id \uff1a\u7b2c2\u79cdtoken\u7684id\u3002 second_token_balance \uff1a\u7b2c2\u79cdtoken\u7684balance\u3002 message ExchangeCreateContract { bytes owner_address = 1; bytes first_token_id = 2; int64 first_token_balance = 3; bytes second_token_id = 4; int64 second_token_balance = 5; } 23.\u7ed9\u4ea4\u6613\u6240\u6ce8\u8d44 ExchangeInjectContract ExchangeInjectContract \u5305\u542b4\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 exchange_id \uff1a \u4ea4\u6613\u5bf9\u7684id\u3002 token_id \uff1a\u8981\u6ce8\u8d44\u7684token\u7684id\u3002 quant \uff1a\u8981\u6ce8\u8d44\u7684token\u7684\u91d1\u989d\u3002 message ExchangeInjectContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } 24.\u4ece\u4ea4\u6613\u6240\u64a4\u8d44 ExchangeWithdrawContract ExchangeWithdrawContract \u5305\u542b4\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 exchange_id \uff1a \u4ea4\u6613\u5bf9\u7684id\u3002 token_id \uff1a\u8981\u64a4\u8d44\u7684token\u7684id\u3002 quant \uff1a\u8981\u64a4\u8d44\u7684token\u7684\u91d1\u989d\u3002 message ExchangeWithdrawContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } 25.\u5728\u4ea4\u6613\u6240\u4ea4\u6613 ExchangeTransactionContract ExchangeTransactionContract \u5305\u542b4\u79cd\u53c2\u6570\uff1a owner_address \uff1a\u5408\u7ea6\u6301\u6709\u4eba\u5730\u5740\u2014\u2014\u6bd4\u5982\uff1a \u201c0xu82h\u20267237\u201d \u3002 exchange_id \uff1a \u4ea4\u6613\u5bf9\u7684id\u3002 token_id \uff1a\u8981\u5356\u51fa\u7684token\u7684id\u3002 quant \uff1a\u8981\u5356\u51fa\u7684token\u7684\u91d1\u989d\u3002 message ExchangeTransactionContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; }","title":"Contract"},{"location":"contracts/contract/#smart-contract-introduction","text":"Smart contract is a computerized transaction protocol that automatically implements its terms. Smart contract is the same as common contract, they all define the terms and rules related to the participants. Once the contract is started, it can runs in the way it is designed. TRON smart contract support Solidity language in (Ethereum). Currently recommend Solidity language version is 0.4.24 ~ 0.4.25. Write a smart contract, then build the smart contract and deploy it to TRON network. When the smart contract is triggered, the corresponding function will be executed automatically.","title":"Smart Contract Introduction"},{"location":"contracts/contract/#smart-contract-features","text":"TRON virtual machine is based on Ethereum solidity language, it also has TRON's own features.","title":"Smart Contract Features"},{"location":"contracts/contract/#built-in-contracts","text":"","title":"Built-in Contracts"},{"location":"contracts/trc20/","text":"TRC\u200c-20 is a technical standard used for smart contracts on the TRON blockchain for implementing tokens with the TRON Virtual Machine (TVM). It is fully compatible to ERC\u200c-20. Implementation Rules 3 Optional Items Token Name string public constant name = \u201cTRONEuropeRewardCoin\u201d; Token Abbreviation string public constant symbol = \u201cTERC\u201d; Token Precision uint8 public constant decimals = 6; 6 Required Items contract TRC20 { function totalSupply() constant returns (uint theTotalSupply); function balanceOf(address _owner) constant returns (uint balance); function transfer(address _to, uint _value) returns (bool success); function transferFrom(address _from, address _to, uint _value) returns (bool success); function approve(address _spender, uint _value) returns (bool success); function allowance(address _owner, address _spender) constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); } totalSupply() This function returns the total supply of the token. balanceOf() This function returns the token balance of the specific account. transfer() This function is used to transfer an amount of tokens from the smart contract to a specific address. approve() This function is used to authorize the third party (like a DAPP smart contract) to transfer token from the token owner\u2019s account. transferFrom() This function is used to allow the third party to transfer token from an owner account to a receiver account. The owner account must be approved to be called by the third party. allowance() This function is used to query the remaining amount of tokens the third party can transfer. 2 Event Functions When token is successfully transferred, it has to trigger Transfer Event. event Transfer(address indexed _from, address indexed _to, uint256 _value) When approval() is successfully called, it has to trigger Approval Event. event Approval(address indexed _owner, address indexed _spender, uint256 _value) Example pragma solidity ^0.4.16; interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; } contract TokenTRC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenTRC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] >= _value); // Check for overflows require(balanceOf[_to] + _value >= balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; emit Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply emit Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); // Check if the targeted balance is enough require(_value <= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply emit Burn(_from, _value); return true; } }","title":"TRC-20"},{"location":"contracts/trc20/#implementation-rules","text":"3 Optional Items Token Name string public constant name = \u201cTRONEuropeRewardCoin\u201d; Token Abbreviation string public constant symbol = \u201cTERC\u201d; Token Precision uint8 public constant decimals = 6; 6 Required Items contract TRC20 { function totalSupply() constant returns (uint theTotalSupply); function balanceOf(address _owner) constant returns (uint balance); function transfer(address _to, uint _value) returns (bool success); function transferFrom(address _from, address _to, uint _value) returns (bool success); function approve(address _spender, uint _value) returns (bool success); function allowance(address _owner, address _spender) constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value); } totalSupply() This function returns the total supply of the token. balanceOf() This function returns the token balance of the specific account. transfer() This function is used to transfer an amount of tokens from the smart contract to a specific address. approve() This function is used to authorize the third party (like a DAPP smart contract) to transfer token from the token owner\u2019s account. transferFrom() This function is used to allow the third party to transfer token from an owner account to a receiver account. The owner account must be approved to be called by the third party. allowance() This function is used to query the remaining amount of tokens the third party can transfer. 2 Event Functions When token is successfully transferred, it has to trigger Transfer Event. event Transfer(address indexed _from, address indexed _to, uint256 _value) When approval() is successfully called, it has to trigger Approval Event. event Approval(address indexed _owner, address indexed _spender, uint256 _value)","title":"Implementation Rules"},{"location":"contracts/trc20/#example","text":"pragma solidity ^0.4.16; interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; } contract TokenTRC20 { // Public variables of the token string public name; string public symbol; uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it uint256 public totalSupply; // This creates an array with all balances mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; // This generates a public event on the blockchain that will notify clients event Transfer(address indexed from, address indexed to, uint256 value); // This notifies clients about the amount burnt event Burn(address indexed from, uint256 value); /** * Constructor function * * Initializes contract with initial supply tokens to the creator of the contract */ function TokenTRC20( uint256 initialSupply, string tokenName, string tokenSymbol ) public { totalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount balanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens name = tokenName; // Set the name for display purposes symbol = tokenSymbol; // Set the symbol for display purposes } /** * Internal transfer, only can be called by this contract */ function _transfer(address _from, address _to, uint _value) internal { // Prevent transfer to 0x0 address. Use burn() instead require(_to != 0x0); // Check if the sender has enough require(balanceOf[_from] >= _value); // Check for overflows require(balanceOf[_to] + _value >= balanceOf[_to]); // Save this for an assertion in the future uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Subtract from the sender balanceOf[_from] -= _value; // Add the same to the recipient balanceOf[_to] += _value; emit Transfer(_from, _to, _value); // Asserts are used to use static analysis to find bugs in your code. They should never fail assert(balanceOf[_from] + balanceOf[_to] == previousBalances); } /** * Transfer tokens * * Send `_value` tokens to `_to` from your account * * @param _to The address of the recipient * @param _value the amount to send */ function transfer(address _to, uint256 _value) public { _transfer(msg.sender, _to, _value); } /** * Transfer tokens from other address * * Send `_value` tokens to `_to` on behalf of `_from` * * @param _from The address of the sender * @param _to The address of the recipient * @param _value the amount to send */ function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= allowance[_from][msg.sender]); // Check allowance allowance[_from][msg.sender] -= _value; _transfer(_from, _to, _value); return true; } /** * Set allowance for other address * * Allows `_spender` to spend no more than `_value` tokens on your behalf * * @param _spender The address authorized to spend * @param _value the max amount they can spend */ function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; return true; } /** * Set allowance for other address and notify * * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it * * @param _spender The address authorized to spend * @param _value the max amount they can spend * @param _extraData some extra information to send to the approved contract */ function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) { tokenRecipient spender = tokenRecipient(_spender); if (approve(_spender, _value)) { spender.receiveApproval(msg.sender, _value, this, _extraData); return true; } } /** * Destroy tokens * * Remove `_value` tokens from the system irreversibly * * @param _value the amount of money to burn */ function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); // Check if the sender has enough balanceOf[msg.sender] -= _value; // Subtract from the sender totalSupply -= _value; // Updates totalSupply emit Burn(msg.sender, _value); return true; } /** * Destroy tokens from other account * * Remove `_value` tokens from the system irreversibly on behalf of `_from`. * * @param _from the address of the sender * @param _value the amount of money to burn */ function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); // Check if the targeted balance is enough require(_value <= allowance[_from][msg.sender]); // Check allowance balanceOf[_from] -= _value; // Subtract from the targeted balance allowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance totalSupply -= _value; // Update totalSupply emit Burn(_from, _value); return true; } }","title":"Example"},{"location":"contracts/tvm/","text":"TRON Virtual Machine (TVM) TRON Virtual Machine (TVM) is a lightweight, Turing complete virtual machine developed for the TRON's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. TVM can connect seamlessly with existing development ecosystem and supports DPOS. TVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to TRON\u2019s mainnet, it will be executed on the TVM of the SR node to be isolated from external connections. Furthermore, TVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on TVM are free, with no tokens consumed. Technically, executable computation capacity on TVM is not restricted by total holding of tokens. Features of TVM 1. Lightweight TVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, TVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not TRX, which exempts TRON from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, TVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on TVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to TVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. TVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in Tron Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts. How TVM Works The above flowchart shows how TVM works: Compilation of Tron smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, TVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on TVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + TVM accesses blockchain data and invoke External Data Interface through the Interoperation layer. Future Development of TVM 1. More developer-friendly debugging tools Tron will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on TVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of TVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, Tron is planning to further optimize its TVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, TVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios. Usage Guide to TVM 1. Compile contract Contract compilation address: https://remix.ethereum.org 2. Get ABI and bytecode pragma solidity^0.4.11; contract Tron { uint256 tron; constructor() public { } function set(uint256 number) public returns(bool){ tron = number; return true; } } ABI: [{\u201cconstant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}] ByteCode: 608060405234801561001057600080fd5b5060c48061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146044575b600080fd5b348015604f57600080fd5b50606c600480360381019080803590602001909291905050506086565b604051808215151515815260200191505060405180910390f35b600081600081905550600190509190505600a165627a7a723058209791df3f67e9af451c35d7ae55bda5e352764f6a38ea23fa850b1c1fe1bc72e90029 3. Deploy contract Wallet-cli-vm branch: https://github.com/tronprotocol/wallet-cli/tree/wallet-cli-vm Java-tron-vm branch: https://github.com/tronprotocol/java-tron/tree/develop_vm Password: password of client-end wallet ContractAddress: customized contract address (in Tron\u2019s required format) ABI: interface description Data: parameters of the initial function Value: reserved field deploycontract(Password, ContractAddress, ABI, Code, Data, Value) 4. Invoke contract Selector: function selector Data: parameters triggercontract(Password, ContractAddress, Selector, Data, Value) 5. Check contract getcontract(ContractAddress) The above is an introduction of Tron Virtual Machine and a guide to deployment. We welcome everyone to check out TVM and give us your thoughts and suggestions. We will continue to perfect and update TVM for optimal performance on TRON mainnet.","title":"TVM"},{"location":"contracts/tvm/#tron-virtual-machine-tvm","text":"TRON Virtual Machine (TVM) is a lightweight, Turing complete virtual machine developed for the TRON's ecosystem. Its goal is to provide millions of global developers with a custom-built blockchain system that is efficient, convenient, stable, secure and scalable. TVM can connect seamlessly with existing development ecosystem and supports DPOS. TVM is able to be compatible with EVM environment in the beginning, so that instead of learning a new programming language, developers can develop, debug and compile smart contracts in a Remix environment with Solidity and other languages. Once you\u2019ve built and uploaded your smart contract to TRON\u2019s mainnet, it will be executed on the TVM of the SR node to be isolated from external connections. Furthermore, TVM employs the concept of Bandwidth. Different from the gas mechanism on Ethereum\u2019s EVM, operations of transaction or smart contracts on TVM are free, with no tokens consumed. Technically, executable computation capacity on TVM is not restricted by total holding of tokens.","title":"TRON Virtual Machine (TVM)"},{"location":"contracts/tvm/#features-of-tvm","text":"1. Lightweight TVM adopts a lightweight architecture with the aim of reducing resource consumption to guarantee system performance. 2. Stability and security With a meticulous design paradigm and fine-grained underlying operation code, TVM can guarantee the preciseness of every step of a computation, diminishing ambiguity to the largest extent. Out of security reasons, transfers and smart contract running cost only bandwidth points, not TRX, which exempts TRON from being attacked similarly to Ethereum for its mode of gas consumption. Stability of bandwidth consumption is achieved while the cost of each computational step is fixed. 3. Compatibility Currently, TVM is compatible with EVM and will be with more mainstream VMs in the future. Thereby, all smart contracts on EVM are executable on TVM. By connecting seamlessly to existing development ecosystem, higher efficiency can be achieved by developers. Needless to learn a new programming language, they can use mainstream programming languages for smart contract such as Solidity to develop, debug and compile smart contracts in the Remix environment, which greatly reduces development costs. 4. Developer-friendly Thanks to TVM\u2019s bandwidth setup, developments costs are reduced and developers can focus on the logic of their contract code. TVM also offers all-in-one interfaces for contract deployment, triggering and viewing, for the convenience of developers. The following interfaces are available in Tron Wallet-CLI: deploycontract(password, contractAddress, ABI, code, data, value) triggercontract(password, contractAddress, selector, data, value) getcontract(contractAddress) Developers can call these interfaces to deploy, trigger or check smart contracts.","title":"Features of TVM"},{"location":"contracts/tvm/#how-tvm-works","text":"The above flowchart shows how TVM works: Compilation of Tron smart contract\u2192execution and computing engines of VM\u2192Interoperation service layer for external interfaces. Put simply, the flow is as follows: + Currently, TVM is compatible mainly with Solidity. The compiler translates Solidity smart contract into bytecode readable and executable on TVM. + A virtual machine processes data through opcode, which is equivalent to operating a logic of a stack-based finite state machine. + TVM accesses blockchain data and invoke External Data Interface through the Interoperation layer.","title":"How TVM Works"},{"location":"contracts/tvm/#future-development-of-tvm","text":"1. More developer-friendly debugging tools Tron will be committed to the development of optimized debugging tools and the establishment of standardized symbol and data format, for improved developer efficiency. 2. Fulfillment of diversified processing demands Different from gas consumption mechanism for every transaction on EVM, there is no charge on TVM. Each operation only occupies bandwidth, which will be released within a certain amount of time after completion of transaction. It takes developers very little to develop smart contracts with more complex logic. It is our belief that besides being used for digital asset transactions, smart contracts could also be suitably applied to areas such as game development, financial risk modeling and scientific computing. The design of TVM inherently supports multi-scenario tasks, and further optimizations of processing speed, response time, and floating point compatibility. 3. Improvement of Just-In-Time (JIT) compilation speed and integration of WebAssembly Improving JIT compilation speed is conducive to faster interpretation and optimized compilation of local code. Meanwhile, Tron is planning to further optimize its TVM based on WebAssembly (WASM). WebAssembly, spearheaded by Apple, Google, Microsoft and Mozilla, is designed to break bottlenecks of current Web browsers and can be generated through compiling C/C++ and other programming languages. Integrating WASM, TVM will be able to provide high performance and high throughput for blockchain to cope with complex scenarios.","title":"Future Development of TVM"},{"location":"contracts/tvm/#usage-guide-to-tvm","text":"1. Compile contract Contract compilation address: https://remix.ethereum.org 2. Get ABI and bytecode pragma solidity^0.4.11; contract Tron { uint256 tron; constructor() public { } function set(uint256 number) public returns(bool){ tron = number; return true; } } ABI: [{\u201cconstant\":false,\"inputs\":[{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}] ByteCode: 608060405234801561001057600080fd5b5060c48061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b1146044575b600080fd5b348015604f57600080fd5b50606c600480360381019080803590602001909291905050506086565b604051808215151515815260200191505060405180910390f35b600081600081905550600190509190505600a165627a7a723058209791df3f67e9af451c35d7ae55bda5e352764f6a38ea23fa850b1c1fe1bc72e90029 3. Deploy contract Wallet-cli-vm branch: https://github.com/tronprotocol/wallet-cli/tree/wallet-cli-vm Java-tron-vm branch: https://github.com/tronprotocol/java-tron/tree/develop_vm Password: password of client-end wallet ContractAddress: customized contract address (in Tron\u2019s required format) ABI: interface description Data: parameters of the initial function Value: reserved field deploycontract(Password, ContractAddress, ABI, Code, Data, Value) 4. Invoke contract Selector: function selector Data: parameters triggercontract(Password, ContractAddress, Selector, Data, Value) 5. Check contract getcontract(ContractAddress) The above is an introduction of Tron Virtual Machine and a guide to deployment. We welcome everyone to check out TVM and give us your thoughts and suggestions. We will continue to perfect and update TVM for optimal performance on TRON mainnet.","title":"Usage Guide to TVM"},{"location":"developers/contribution/","text":"Getting Started as TRON Community Developers TRON is a global, open-source platform for decentralized applications. Thank you for considering to help out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you'd like to contribute to TRON, please fork, fix, commit and send a pull request (PR) for the maintainers to review and merge into the main base. If you wish to submit more complex changes though, please check up with the core developers first on our channel to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple. Your PR will be reviewed according to the Code Review Guidelines. We encourage a PR early approach, meaning you create the PR the earliest even without the fix/feature. This will let core developers and other volunteers know you picked up an issue. These early PRs should indicate 'in progress' status. Developer Community java-tron gitter channel This channel is for TRON network issues. wallet-cli gitter channel This channel is for the client of TRON network issues. documentation gitter channel This channel is for TRON docunentation issues. tips gitter channel This channel is for TRON improment proposal issues. Check TRON Incentives Policy Submitting a TIP Please check Submitting a TIP Coding java-tron Please check Coding java-tron Reporting Vulnerabilities We think highly of all the security bugs in the TRON project seriously. Thank you for improving the security of TRON project. We really appreciate your efforts and responsible disclosure. We will make every effort to acknowledge your contributions. Report security bugs at https://hackerone.com/tronfoundation A developer from the core devs will follow up the issue. Firstly, we will confirm the bug and determine the affected versions. Secondly, we will try to find any potential similar bugs. Then we will do the fix and prepare for the release. After the initial reply to your report is sent, we will try to keep you informed on the progress towards the fix. The core devs may ask you for additional information or guidance. If you have suggestions on how this process could be improved, please submit a pull request. Writing Documentation There are two documentation repositories: documentation-EN is the English version. documentation-ZH is the Chinese version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder.","title":"Contribution"},{"location":"developers/contribution/#getting-started-as-tron-community-developers","text":"TRON is a global, open-source platform for decentralized applications. Thank you for considering to help out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes! GitHub is used to track issues and contribute code, suggestions, feature requests or documentation. If you'd like to contribute to TRON, please fork, fix, commit and send a pull request (PR) for the maintainers to review and merge into the main base. If you wish to submit more complex changes though, please check up with the core developers first on our channel to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple. Your PR will be reviewed according to the Code Review Guidelines. We encourage a PR early approach, meaning you create the PR the earliest even without the fix/feature. This will let core developers and other volunteers know you picked up an issue. These early PRs should indicate 'in progress' status. Developer Community java-tron gitter channel This channel is for TRON network issues. wallet-cli gitter channel This channel is for the client of TRON network issues. documentation gitter channel This channel is for TRON docunentation issues. tips gitter channel This channel is for TRON improment proposal issues. Check TRON Incentives Policy","title":"Getting Started as TRON Community Developers"},{"location":"developers/contribution/#submitting-a-tip","text":"Please check Submitting a TIP","title":"Submitting a TIP"},{"location":"developers/contribution/#coding-java-tron","text":"Please check Coding java-tron","title":"Coding java-tron"},{"location":"developers/contribution/#reporting-vulnerabilities","text":"We think highly of all the security bugs in the TRON project seriously. Thank you for improving the security of TRON project. We really appreciate your efforts and responsible disclosure. We will make every effort to acknowledge your contributions. Report security bugs at https://hackerone.com/tronfoundation A developer from the core devs will follow up the issue. Firstly, we will confirm the bug and determine the affected versions. Secondly, we will try to find any potential similar bugs. Then we will do the fix and prepare for the release. After the initial reply to your report is sent, we will try to keep you informed on the progress towards the fix. The core devs may ask you for additional information or guidance. If you have suggestions on how this process could be improved, please submit a pull request.","title":"Reporting Vulnerabilities"},{"location":"developers/contribution/#writing-documentation","text":"There are two documentation repositories: documentation-EN is the English version. documentation-ZH is the Chinese version. We use MkDocs to build documentation project. Documentation source files are written in Markdown, and configured with a single YAML configuration file. You can edit or add a documentation file in /docs/ folder.","title":"Writing Documentation"},{"location":"developers/deployment/","text":"Deployment Premise Create separate directories for fullnode and soliditynode NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores Deployment Guide 1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf Logging and Network Connection Verification Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823 Stop Node Gracefully Create file stop.sh\uff0cuse kill -15 to close java-tron.jar\uff08or FullNode.jar\u3001SolidityNode.jar\uff09. You need to modify pid= ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-tron killed successfully!\" break fi done FullNode and SolidityNode Fast Deployment Download fast deployment script, run the script according to different types of node. Scope of use This script could be used on Linux/MacOS, but not on Windows. Just Support FullNode and SolidityNode. Download and run script wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh Parameter Illustration bash deploy_tron.sh --app [FullNode|SolidityNode] --net [mainnet|testnet|privatenet] --db [keep|remove|backup] --heap-size <heapsize> --app Optional, Running application. The default node is Fullnode and it could be FullNode or SolidityNode. --net Optional, Connecting network. The default network is mainnet and it could be mainnet, testnet. --db Optional, The way of data processing could be keep, remove and backup. Default is keep. If you launch two different networks, like from mainnet to testnet or from testnet to mainnet, you need to delete database. --trust-node Optional, It only works when deploying SolidityNode. Default is 127.0.0.1:50051. The specified gRPC service of Fullnode, like 127.0.0.1:50051 or 13.125.249.129:50051. --rpc-port Optional, Port of grpc. Default is 50051. If you deploy SolidityNode and FullNode on the same host\uff0cyou need to configure different ports. --commit Optional, commitid of project. --branch Optional, branch of project. Mainnet default is latest release and Testnet default is master. --heap-size Optional, jvm option: Xmx. The default heap-size is 0.8 * memory size. --work_space Optional, default is current directory. Deployment of FullNode on the one host wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh bash deploy_tron.sh Deployment of SolidityNode on the one host wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh # User can self-configure the IP and Port of GRPC service in the turst-node field of SolidityNode. trust-node is the fullnode you just deploy. bash deploy_tron.sh --app SolidityNode --trust-node <grpc-ip:grpc-port> Deployment of FullNode and SolidityNode on the same host # You need to configure different gRPC ports on the same host because gRPC port is available on SolidityNode and FullNodeConfigure and it cannot be set as default value 50051. In this case the default value of rpc port is set as 50041. wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_tron.sh -O deploy_tron.sh bash deploy_tron.sh --app FullNode bash deploy_tron.sh --app SolidityNode --rpc-port 50041 Grpc Gateway Deployment Summary This script helps you download the code from https://github.com/tronprotocol/grpc-gateway and deploy the code on your environment. Pre-requests Please follow the guide on https://github.com/tronprotocol/grpc-gateway Install Golang, Protoc, and set $GOPATH environment variable according to your requirement. Download and run script wget https://raw.githubusercontent.com/tronprotocol/TronDeployment/master/deploy_grpc_gateway.sh -O deploy_grpc_gateway.sh Parameter Illustration bash deploy_grpc_gateway.sh --rpchost [rpc host ip] --rpcport [rpc port number] --httpport [http port number] --rpchost The fullnode or soliditynode IP where the grpc service is provided. Default value is \"localhost\". --rpcport The fullnode or soliditynode port number grpc service is consuming. Default value is 50051. --httpport The port intends to provide http service provided by grpc gateway. Default value is 18890. Example Use default configuration\uff1a bash deploy_grpc_gateway.sh Use customized configuration\uff1a bash deploy_grpc_gateway.sh --rpchost 127.0.0.1 --rpcport 50052 --httpport 18891 Event Subscribe plugin Deployment This is an implementation of Tron eventsubscribe model. api module defines IPluginEventListener, a protocol between Java-tron and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from Java-tron and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb. Setup/Build Clone the repo git clone https://github.com/tronprotocol/event-plugin.git Go to eventplugin cd event-plugin run ./gradlew build This will produce one plugin zip, named plugin-kafka-1.0.0.zip , located in the event-plugin/build/plugins/ directory. Edit **config.conf** of Java-tron\uff0c add the following fileds: event.subscribe = { path = \"\" // absolute path of plugin server = \"\" // target server address to receive event triggers dbconfig=\"\" // dbname|username|password topics = [ { triggerName = \"block\" // block trigger, the value can't be modified enable = false topic = \"block\" // plugin topic, the value could be modified }, { triggerName = \"transaction\" enable = false topic = \"transaction\" }, { triggerName = \"contractevent\" enable = true topic = \"contractevent\" }, { triggerName = \"contractlog\" enable = true topic = \"contractlog\" } ] filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } } path : is the absolute path of \"plugin-kafka-1.0.0.zip\" server : Kafka server address topics : each event type maps to one Kafka topic, we support four event types subscribing, block, transaction, contractlog and contractevent. dbconfig : db configuration information for mongodb, if using kafka, delete this one; if using Mongodb, add like that dbname|username|password triggerName : the trigger type, the value can't be modified. enable : plugin can receive nothing if the value is false. topic : the value is the kafka topic to receive events. Make sure it has been created and Kafka process is running filter : filter condition for process trigger. note : if the server is not 127.0.0.1, pls set some properties in config/server.properties file remove comment and set listeners=PLAINTEXT://:9092 remove comment and set advertised.listeners to PLAINTEXT://host_ip:9092 Install Kafka On Mac : brew install kafka On Linux : cd /usr/local wget http://archive.apache.org/dist/kafka/0.10.2.2/kafka_2.10-0.10.2.2.tgz tar -xzvf kafka_2.10-0.10.2.2.tgz mv kafka_2.10-0.10.2.2 kafka add \"export PATH=$PATH:/usr/local/kafka/bin\" to end of /etc/profile source /etc/profile kafka-server-start.sh /usr/local/kafka/config/server.properties & Note : make sure the version of Kafka is the same as the version set in build.gradle of eventplugin project.(kafka_2.10-0.10.2.2 kafka) Run Kafka On Mac : zookeeper-server-start /usr/local/etc/kafka/zookeeper.properties & kafka-server-start /usr/local/etc/kafka/server.properties On Linux : zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties & Sleep about 3 seconds kafka-server-start.sh /usr/local/kafka/config/server.properties & Create topics to receive events, the topic is defined in config.conf On Mac : kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent On Linux : kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic block kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic transaction kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractlog kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic contractevent Kafka consumer On Mac : kafka-console-consumer --bootstrap-server localhost:9092 --topic block kafka-console-consumer --bootstrap-server localhost:9092 --topic transaction kafka-console-consumer --bootstrap-server localhost:9092 --topic contractlog kafka-console-consumer --bootstrap-server localhost:9092 --topic contractevent On Linux : kafka-console-consumer.sh --zookeeper localhost:2181 --topic block kafka-console-consumer.sh --zookeeper localhost:2181 --topic transaction kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractlog kafka-console-consumer.sh --zookeeper localhost:2181 --topic contractevent Load plugin in Java-tron add --es to command line, for example: java -jar FullNode.jar -p privatekey -c config.conf --es Event filter which is defined in config.conf, path: event.subscribe filter = { fromblock = \"\" // the value could be \"\", \"earliest\" or a specified block number as the beginning of the queried range toblock = \"\" // the value could be \"\", \"latest\" or a specified block number as end of the queried range contractAddress = [ \"TVkNuE1BYxECWq85d8UR9zsv6WppBns9iH\" // contract address you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract address. ] contractTopic = [ \"f0f1e23ddce8a520eaa7502e02fa767cb24152e9a86a4bf02529637c4e57504b\" // contract topic you want to subscribe, if it's set to \"\", you will receive contract logs/events with any contract topic. ] } Download and install MongoDB Suggested Configuration CPU/ RAM: 16Core / 32G DISK: 500G System: CentOS 64 The version of MongoDB is 4.0.4 , below is the command: cd /home/java-tron curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.4.tgz tar zxvf mongodb-linux-x86_64-4.0.4.tgz mv mongodb-linux-x86_64-4.0.4 mongodb Set environment - export MONGOPATH=/home/java-tron/mongodb/ - export PATH=$PATH:$MONGOPATH/bin Create mongodb config The path is : /etc/mongodb/mgdb.conf cd /etc/mongodb touch mgdb.conf Create data&log folder for mongodb Create data, log subfolder in mongodb directory, and add their absolute path to mgdb.conf Example: dbpath=/home/java-tron/mongodb/data logpath=/home/java-tron/mongodb/log/mongodb.log port=27017 logappend=true fork=true bind_ip=0.0.0.0 auth=true wiredTigerCacheSizeGB=2 Note: - bind_ip must be configured to 0.0.0.0\uff0cotherwise remote connection will be refused. - wiredTigerCacheSizeGB, must be configured to prevent OOM Launch MongoDB - mongod --config /etc/mongodb/mgdb.conf Create admin account: - mongo - use admin - db.createUser({user:\"root\",pwd:\"admin\",roles:[{role:\"root\",db:\"admin\"}]}) Create eventlog and its owner account db.auth(\"root\", \"admin\") use eventlog db.createUser({user:\"tron\",pwd:\"123456\",roles:[{role:\"dbOwner\",db:\"eventlog\"}]}) database: eventlog, username:tron, password: 123456 Firewall rule: - iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT Remote connection via mongo: mongo 47.90.245.68:27017 use eventlog db.auth(\"tron\", \"123456\") show collections db.block.find() Query block trigger data: db.block.find({blockNumber: {$lt: 1000}}); // return records whose blockNumber less than1000 Set database index to speedup query: cd /{projectPath} sh insertIndex.sh Event query service deployment Download sourcecode Download sourcecode git clone https://github.com/tronprotocol/tron-eventquery.git cd troneventquery Build mvn package After the build command is executed successfully, troneventquery jar to release will be generated under troneventquery/target directory. Configuration of mongodb \"config.conf\" should be created for storing mongodb configuration, such as database name, username, password, and so on. We provided an example in sourcecode, which is \" troneventquery/config.conf \". Replace with your specified configuration if needed. Note : Make sure the relative path of config.conf and troneventquery jar. The config.conf 's path is the parent of troneventquery jar. mongo.host=IP mongo.port=27017 mongo.dbname=eventlog mongo.username=tron mongo.password=123456 mongo.connectionsPerHost=8 mongo.threadsAllowedToBlockForConnectionMultiplier=4 Any configuration could be modified except mongo.dbname , \" eventlog \" is the specified database name for event subscribe. Run troneventquery/deploy.sh is used to deploy troneventquery troneventquery/insertIndex.sh is used to setup mongodb index to speedup query. Advanced Configurations Read the Advanced Configuration","title":"Deployment"},{"location":"developers/deployment/#deployment","text":"","title":"Deployment"},{"location":"developers/deployment/#premise","text":"Create separate directories for fullnode and soliditynode NOTE: SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. /deploy/fullnode /deploy/soliditynode Create two folders for fullnode and soliditynode. Clone the latest master branch of https://github.com/tronprotocol/java-tron and extract it to /deploy/java-tron Make sure you have the proper dependencies. JDK 1.8 (JDK 1.9+ is not supported yet) On Linux Ubuntu system (e.g. Ubuntu 16.04.4 LTS), ensure that the machine has Oracle JDK 8 , instead of having Open JDK 8 in the system. If you are building the source code by using Open JDK 8 , you will get Build Failed result. Open UDP ports for connection to the network MINIMUM 2 CPU Cores","title":"Premise"},{"location":"developers/deployment/#deployment-guide","text":"1. Build the java-tron project cd /deploy/java-tron ./gradlew build 2. Copy the FullNode.jar and SolidityNode.jar along with configuration files into the respective directories download your needed configuration file from https://github.com/tronprotocol/TronDeployment. main_net_config.conf is the configuration for MainNet, and test_net_config.conf is the configuration for TestNet. please rename the configuration file to `config.conf` and use this config.conf to start FullNode and SoliditNode. cp build/libs/FullNode.jar ../fullnode cp build/libs/SolidityNode.jar ../soliditynode 3. You can now run your FullNode using the following command java -jar FullNode.jar -c config.conf // make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 4. Configure the SolidityNode configuration file You need to edit config.conf to connect to your local FullNode. Change trustNode in node to local 127.0.0.1:50051 , which is the default rpc port. Set listen.port to any number within the range of 1024-65535. Please don't use any ports between 0-1024 since you'll most likely hit conflicts with other system services. Also change rpc port to 50052 or something to avoid conflicts. Please forward the UDP port 18888 for FullNode. rpc { port = 50052 } 5. You can now run your SolidityNode using the following command\uff1a java -jar SolidityNode.jar -c config.conf //make sure that your config.conf is downloaded from https://github.com/tronprotocol/TronDeployment 6. Running a Super Representative Node for mainnet java -jar FullNode.jar -p your private key --witness -c your config.conf(Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf This is similar to running a private testnet, except that the IPs in the config.conf are officially declared by TRON. 7. Running a Super Representative Node for private testnet You should modify the config.conf: Replace existing entry in genesis.block.witnesses with your address Replace existing entry in seed.node ip.list with your ip list The first Super Node start, needSyncCheck should be set false Set p2pversion to 61 cd build/libs java -jar FullNode.jar -p your private key --witness -c your config.conf (Example\uff1a/data/java-tron/config.conf) Example: java -jar FullNode.jar -p 650950B193DDDDB35B6E48912DD28F7AB0E7140C1BFDEFD493348F02295BD812 --witness -c /data/java-tron/config.conf","title":"Deployment Guide"},{"location":"developers/deployment/#logging-and-network-connection-verification","text":"Logs for both nodes are located in /deploy/\\*/logs/tron.log . Use tail -f /logs/tron.log/ to follow along with the block syncing. You should see something similar to this in your logs for block synchronization: FullNode 12:00:57.658 INFO [pool-7-thread-1] [o.t.c.n.n.NodeImpl](NodeImpl.java:830) Success handle block Num:236610,ID:0000000000039c427569efa27cc2493c1fff243cc1515aa6665c617c45d2e1bf SolidityNode 12:00:40.691 INFO [pool-17-thread-1] [o.t.p.SolidityNode](SolidityNode.java:88) sync solidity block, lastSolidityBlockNum:209671, remoteLastSolidityBlockNum:211823","title":"Logging and Network Connection Verification"},{"location":"developers/deployment/#stop-node-gracefully","text":"Create file stop.sh\uff0cuse kill -15 to close java-tron.jar\uff08or FullNode.jar\u3001SolidityNode.jar\uff09. You need to modify pid= ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}' to find the correct pid. #!/bin/bash while true; do pid=`ps -ef |grep java-tron.jar |grep -v grep |awk '{print $2}'` if [ -n \"$pid\" ]; then kill -15 $pid echo \"The java-tron process is exiting, it may take some time, forcing the exit may cause damage to the database, please wait patiently...\" sleep 1 else echo \"java-tron killed successfully!\" break fi done","title":"Stop Node Gracefully"},{"location":"developers/deployment/#fullnode-and-soliditynode-fast-deployment","text":"Download fast deployment script, run the script according to different types of node.","title":"FullNode and SolidityNode Fast Deployment"},{"location":"developers/deployment/#grpc-gateway-deployment","text":"","title":"Grpc Gateway Deployment"},{"location":"developers/deployment/#event-subscribe-plugin-deployment","text":"This is an implementation of Tron eventsubscribe model. api module defines IPluginEventListener, a protocol between Java-tron and event plugin. app module is an example for loading plugin, developers could use it for debugging. kafkaplugin module is the implementation for kafka, it implements IPluginEventListener, it receives events subscribed from Java-tron and relay events to kafka server. mongodbplugin mongodbplugin module is the implementation for mongodb.","title":"Event Subscribe plugin Deployment"},{"location":"developers/deployment/#event-query-service-deployment","text":"","title":"Event query service deployment"},{"location":"developers/deployment/#advanced-configurations","text":"Read the Advanced Configuration","title":"Advanced Configurations"},{"location":"developers/incentives/","text":"Community Developers Incentives Programme Bonus point applies in TRON incentives programme. Developers can earn points by contributing to TRON. When a issue (or PR) is closed, it will be added into the reward programme. The core devs will discuss and comment the issue (or PR), the points of a issue (or PR) received will be added in the comment to track. You can find your points ranking at Tronscan . Reward 1: At the end of every month, we will calculate all points each developer gets in the current month and who finish in Top 5 will be rewarded with cash. At the end of every quarter, we will calculate all points each developer gets in the current quarter and who finish in Top 5 will be rewarded with cash. At the end of every year, we will calculate all points each developer gets in the current year and who finish in Top 5 will be rewarded with cash. The Top 5 developers who win the cash reward will be announced at Tronscan. Also, there is a chance to display developers' photos at TRON official website. No. 1 No. 2 No. 3 No. 4 No. 5 200 USD 180 USD 150 USD 120 USD 100 USD Reward 2: Every developer who participates java-tron's developement will be honored with a TRON Honorary Developer Certificate. And we will give a vote of thanks to the developers on TRON official website. The following shows the content you can contribute to. Non-code Related 1. TIP Description: TRON Improvement Proposal\uff08TIP\uff09 Scope: Any improvement related to TRON ecosystem, like a new feature, TRC, protocol improvement, programming tool, etc. Points: Critical High Medium Low 20 15 10 5 2. Documentation Description: To revise, update and add technical documentation related to TRON network. Scope: mechanism and algorithm, network architecture and database, contracts and other technical documentation Points: Critical High Medium Low 20 15 10 5 3. Issue Description: Create a topic about a question, enhancement, bug or feature and so on to discuss Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 10 8 5 2 Code Related 1. Feature Development Description: To add new features to TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 100 80 50 20 2. Bug Report Description: To report bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 5 3. Bug Fix Description: To fix bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 40 30 20 10 4. Security Related Description: To find the security risks and enhance the security of TRON network and ecosystem Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 100 80 50 20 5. Others Description: Code improvements, etc. Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 5 In order to get 5 (or more) points, the content of a PR should be creative, pratical, critical or can reflect significant workload. One PR should aim at solving one type of problems, so do not break one type of PR into many small PRs.","title":"Incentives Policy"},{"location":"developers/incentives/#non-code-related","text":"1. TIP Description: TRON Improvement Proposal\uff08TIP\uff09 Scope: Any improvement related to TRON ecosystem, like a new feature, TRC, protocol improvement, programming tool, etc. Points: Critical High Medium Low 20 15 10 5 2. Documentation Description: To revise, update and add technical documentation related to TRON network. Scope: mechanism and algorithm, network architecture and database, contracts and other technical documentation Points: Critical High Medium Low 20 15 10 5 3. Issue Description: Create a topic about a question, enhancement, bug or feature and so on to discuss Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 10 8 5 2","title":"Non-code Related"},{"location":"developers/incentives/#code-related","text":"1. Feature Development Description: To add new features to TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 100 80 50 20 2. Bug Report Description: To report bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 5 3. Bug Fix Description: To fix bugs in online TRON network Scope: java-tron, wallet-cli Points: Critical High Medium Low 40 30 20 10 4. Security Related Description: To find the security risks and enhance the security of TRON network and ecosystem Scope: java-tron, TRON ecosystem Points: Critical High Medium Low 100 80 50 20 5. Others Description: Code improvements, etc. Scope: java-tron, wallet-cli Points: Critical High Medium Low 20 15 10 5 In order to get 5 (or more) points, the content of a PR should be creative, pratical, critical or can reflect significant workload. One PR should aim at solving one type of problems, so do not break one type of PR into many small PRs.","title":"Code Related"},{"location":"developers/java-tron/","text":"The java-tron repository is: https://github.com/tronprotocol/java-tron Branch Introduction master branch: This branch contains the latest code released to the production environment. It can only be merged, and can not be modified directly in this branch. develop branch: This branch is the main development branch. It contains the complete code that is going to release. It can only be merged, and can not be modified directly in this branch. feature branch: This branch is used to develop new features. It is created based on develop branch. Once the development is finished, it should be merged into develop branch, and then delete the branch. release branch: This is the branch that is going to be released. It is created based on develop branch. In this branch, small fix and modification of final version of metadata is allowed. When the code is released, this branch should be merged into master branch(tag needed) and develop branch. The final test before release uses this branch. hotfix branch: This branch is used to fix a bug when an online bug is found. It is created based on master branch. When bug fix is done, it should be merged into master branch(as a new release) and develop and then delete the branch. branch. Writing a new feature When you start to develop a new feature, please create a feature branch from develop branch under origin/feature . $ git checkout -b feature/my-feature develop # switch to 'feature/my-feature' When you finish the development, the new feature should be merged into develop branch. $ git commit -m \"description\" # submit the code $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout feature/my-feature # switch to 'feature/my-feature' $ git merge develop # merge 'develop', need to fix the conflict $ git push # submit to GitHub # make a Pull Request to wait the core developers to check $ git branch -d feature/my-feature # once it is merged, delete 'feature/my-feature' Fixing online bugs: When you start to fix an online bug, please create a hotfix branch from master branch under origin/hotfix . $ git checkout -b hotfix/my-hotfix master # switch to 'hotfix/my-hotfix' $ git commit -a -m \"Bumped version number to 3.1.4\" # submit and modify the version number When you finish the fix, it should be merged into master branch and develop branch. $ git commit -m \"description\" # submit the code $ git checkout master # switch to 'master' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge master # merge 'master', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check # tag 'master' $ git checkout develop # switch to 'develop' $ git pull # update branch $ git checkout hotfix/my-hotfix # switch to 'hotfix/my-hotfix' $ git merge develop # merge 'develop', need to fix the conflict $ git push # make a Pull Request to wait the core developers to check $ git branch -d hotfix/my-hotfix # once it is merged, delete 'my-hotfix' Your commit messages should detail why you made your change in addition to what you did (unless it is a tiny change). Finally, please make a PR. Additionally, if you are writing a new feature, please ensure you add appropriate test cases under /src/test .","title":"Java tron"},{"location":"developers/official-public-nodes/","text":"FullNodes GRPC port: 50051 P2P network port: 18888 HTTP port : 8090 54.236.37.243 52.53.189.99 18.196.99.16 34.253.187.192 52.56.56.149 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 13.127.47.162 13.124.62.58 47.74.149.206 47.90.240.187 47.90.215.84 47.254.77.146 47.74.242.55 47.75.249.119 47.90.201.118 47.74.21.68 47.74.13.168 47.74.33.41 47.52.59.134 47.74.229.70 47.254.27.69 47.89.243.195 47.90.201.112 47.88.174.175 47.74.224.123 47.75.249.4 SolidityNodes GRPC port: 50051 HTTP port : 8091 47.89.187.247 47.91.18.255 47.75.10.71 47.251.52.228 47.251.48.82 47.74.147.80 34.234.164.105 18.221.34.0 35.178.11.0 35.180.18.107","title":"Official Public Nodes"},{"location":"developers/official-public-nodes/#fullnodes","text":"GRPC port: 50051 P2P network port: 18888 HTTP port : 8090 54.236.37.243 52.53.189.99 18.196.99.16 34.253.187.192 52.56.56.149 35.180.51.163 54.252.224.209 18.228.15.36 52.15.93.92 34.220.77.106 13.127.47.162 13.124.62.58 47.74.149.206 47.90.240.187 47.90.215.84 47.254.77.146 47.74.242.55 47.75.249.119 47.90.201.118 47.74.21.68 47.74.13.168 47.74.33.41 47.52.59.134 47.74.229.70 47.254.27.69 47.89.243.195 47.90.201.112 47.88.174.175 47.74.224.123 47.75.249.4","title":"FullNodes"},{"location":"developers/official-public-nodes/#soliditynodes","text":"GRPC port: 50051 HTTP port : 8091 47.89.187.247 47.91.18.255 47.75.10.71 47.251.52.228 47.251.48.82 47.74.147.80 34.234.164.105 18.221.34.0 35.178.11.0 35.180.18.107","title":"SolidityNodes"},{"location":"developers/resources/","text":"TRON Official Website https://tron.network/ TRON White Paper https://tron.network/resources?lng=&name=1 TRON Blockchain Browser https://tronscan.org/ https://www.trxplorer.io/ TRON Wallet https://github.com/tronprotocol/wallet-cli TRON Zksnark-java-sdk https://github.com/tronprotocol/zksnark-java-sdk TRON Sun-network https://github.com/tronprotocol/sun-network TRON Javascript API https://github.com/tron-us/tronweb","title":"Resources"},{"location":"developers/run_in_IDEA/","text":"Run the FullNode with IDEA This document aims to facilitate developers with some experience to run the FullNode with IDEA. The following is for the master branch of java-tron. Configure IDEA The configuration of IDEA Oracle JDK 1.8 OpenJDK is not currently supported Install Lombok plugin Tick Enable annotation processing Deployment guide 1.Create a directory /deploy mkdir deploy 2.Clone the latest code git clone https://github.com/tronprotocol/java-tron 3.Switch to the master branch cd java-tron git checkout -t origin/master 4.Compile the code ./gradlew build The compilation process may take some time, please be patient. If the compilation is successful, you can see the information similar to the following: If you do not want to perform unit test tasks, you can run the following command: ./gradlew build -x test 5.Start the FullNode After compiling successfully, you can find the main function file through the path java-tron / src / main / java / org / tron / program / FullNode.java and then start a full node. After starting, you can check the log to verify whether the startup is successful. The log path is: /deploy/java-tron/logs/tron.log. If the startup is successful, you can see the following logs: Also,you can use this command like tail -f /logs/tron.log to view the real-time log, as follows:","title":"Run FullNode in IDEA"},{"location":"developers/run_in_IDEA/#run-the-fullnode-with-idea","text":"This document aims to facilitate developers with some experience to run the FullNode with IDEA. The following is for the master branch of java-tron.","title":"Run the FullNode with IDEA"},{"location":"developers/run_in_IDEA/#configure-idea","text":"The configuration of IDEA Oracle JDK 1.8 OpenJDK is not currently supported Install Lombok plugin Tick Enable annotation processing","title":"Configure IDEA"},{"location":"developers/run_in_IDEA/#deployment-guide","text":"1.Create a directory /deploy mkdir deploy 2.Clone the latest code git clone https://github.com/tronprotocol/java-tron 3.Switch to the master branch cd java-tron git checkout -t origin/master 4.Compile the code ./gradlew build The compilation process may take some time, please be patient. If the compilation is successful, you can see the information similar to the following: If you do not want to perform unit test tasks, you can run the following command: ./gradlew build -x test 5.Start the FullNode After compiling successfully, you can find the main function file through the path java-tron / src / main / java / org / tron / program / FullNode.java and then start a full node. After starting, you can check the log to verify whether the startup is successful. The log path is: /deploy/java-tron/logs/tron.log. If the startup is successful, you can see the following logs: Also,you can use this command like tail -f /logs/tron.log to view the real-time log, as follows:","title":"Deployment guide"},{"location":"developers/tips/","text":"TRON Improvement Proposals (TIPs) describe standards for the TRON platform, including core protocol specifications, client APIs, and contract standards. The TIPS repository is https://github.com/tronprotocol/TIPs To Submit a TIP 1. Fork the repository by clicking \"Fork\" in the top right. 2. Add your TIP to your fork of the repository. There is a TIP template here. 3. Submit a Pull Request to TRON's TIPs repository. Your first PR should be a first draft of the final TIP. It must meet the formatting criteria enforced by the build (largely, correct metadata in the header). An editor will manually review the first PR for a new TIP and assign it a number before merging it. Make sure you include a discussions-to header with the URL to a discussion forum or open GitHub issue where people can discuss the TIP as a whole. When you believe your TIP is mature and ready to progress past the draft phase, you should do one of two things: For a Standards Track TIP of type Core, ask to have your issue added to the agenda of an upcoming All Core Devs meeting, where it can be discussed for inclusion in a future hard fork. If implementers agree to include it, the TIP editors will update the state of your TIP to 'Accepted'. For all other TIPs, open a PR changing the state of your TIP to 'Final'. An editor will review your draft and ask if anyone objects to its being finalised. If the editor decides there is no rough consensus, they may close the PR and request that you fix the issues in the draft before trying again. TIP Status Draft : A TIP that is undergoing rapid iteration and changes. Last Call : A TIP that is done with its initial iteration and ready for review by a wide audience. Accepted : A core TIP that has been in Last Call for at least 2 weeks and any technical changes that were requested have been addressed by the author. The process for Core Devs to decide whether to encode an TIP into their clients as part of a hard fork is not part of the TIP process. If such a decision is made, the TIP will move to final. Final (non-Core) : A TIP that has been in Last Call for at least 2 weeks and any technical changes that were requested have been addressed by the author. Final (Core) : A TIP that the Core Devs have decided to implement and release in a future hard fork or has already been released in a hard fork.","title":"Tips"},{"location":"introduction/","text":"Project Repository Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the defination of the api and data structure. wallet-cli is the official command line wallet. tips is the TRON Improvement Proposals. sun-network is a project dedicated to building a trustful decentralized sidechain of TRON Main Chain. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf","title":"Repository"},{"location":"introduction/#project-repository","text":"Github Url: https://github.com/tronprotocol java-tron is the source code of the MainNet. protocol is the defination of the api and data structure. wallet-cli is the official command line wallet. tips is the TRON Improvement Proposals. sun-network is a project dedicated to building a trustful decentralized sidechain of TRON Main Chain. MainNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/main_net_config.conf TestNet Configuration: https://github.com/tronprotocol/TronDeployment/blob/master/test_net_config.conf","title":"Project Repository"},{"location":"introduction/dpos/","text":"Overview Blockchain is a distributed accounting system. In a blockchain system, there can be thousands of nodes, each of which independently stores the same ledger. If new transaction data is to be written into the ledger, approvals from these nodes are needed. Achieving this goal in an untrusted distributed environment is a complicated systematic quest. The blockchain system operates normally means each node in the blockchain can always keep the same ledger, provided that most nodes in the system are honest and reliable. In order to ensure that honest and reliable nodes can jointly supervise the transaction data written into the ledgers, each blockchain system needs to build its own consensus, which is equivalent to the constitution of the blockchain. As long as the vast majority of nodes comply with the consensus requirements, it is able to guarantee the results will certainly be credible, even in an untrusted distributed environment. Therefore, the significance of the consensus is that the honest nodes in the blockchain can ultimately achieve the agreement of the ledgers as long as they strictly abide by this consensus. There are several types of consensus, and the most commonly used are POW, POS, and DPOS. Definitely, different blockchain systems will have a unique way of implementation. This article will mainly introduce the DPOS consensus on which TRON based. We will also explain the basic components and mechanisms of DPOS. Block Producing Process The witnesses of the blockchain network collect the newly generated transactions in the blockchain network and verify the legality of these transactions, then package the transactions in a block, record them as a new page on the ledger, and broadcast the page to the entire blockchain network. Other nodes will receive the new page and verify the legality of the transaction data on the page and add it to their own ledger. The witnesses will repeat this process so all new transaction data in the blockchain system can be recorded in the ledger. DPOS overview The role of consensus is to select the witnesseses in the blockchain system. The witnesseses verify the transaction data and keep the account in order to broadcast new accounts to other nodes in the network and obtains the approval of the new accounts from other nodes. As a specific implementation of consensus, DPOS works in the following way: The DPOS consensus selects some nodes as witnesseses in the blockchain system based on the number of votes they receive. First, when the blockchain system starts to operate, a certain number of tokens will be issued, and then the tokens will be given to nodes in the blockchain system. A node can apply to be a witnesses candidate in the blockchain system with a portion of the tokens. Any token-holding node in the blockchain system can vote for these candidates. Every t period of time, the votes for all the candidates will be counted. Top N candidate nodes with the most votes will become witnesseses for the next t period. After t period of time, the votes will be counted again to elect the new witnesseses, and the cycle continues. Let's see how it's realized in the context of TRON: Definition TRON: refers to the TRON network. The document does not distinguish between TRON, TRON blockchain, TRON blockchain system, etc. TRON token: refers to the equity token issued by and circulating in TRON, known as TRX. Witnesses candidates: nodes eligible for becoming witnesseses in TRON. Witnesses: nodes in TRON qualified for book-keeping. They are usually called witnesses in DPOS consensus. In TRON, there will be 27 witnesseses, which are also called super nodes (or SR). Here, we will not distinguish between bookkeeper, witness, supernode, SR, etc. Bookkeeping: the process of verifying transactions and recording them in a ledger. Because ledgers in TRON are carried by blocks, the bookkeeping process is also called block generation. We will not distinguish between bookkeeping and block generation in the document. Bookkeeping order: block generation order. The descending order of the 27 witnesseses based on the number of votes they receive. Block time: TRON sets block time to be 3 seconds. This means a block is generated every 3 seconds. Slot: after each block is generated, it can be put into a slot; and each generated block will take up a slot. For example, there are 20 slots for every minute. When a block is generated during the block time, the corresponding slot will be filled. However, if a block is not generated, then the corresponding slot will be empty. The next block generated will fill in a new corresponding slot. Epoch: TRON sets an Epoch to be 6 hours. The last 2 block time of an Epoch is the maintenance period, during which block generating order for the next Epoch will be decided. The maintenance period: TRON sets the period to be 2 block time, which is 6 seconds. This period of time is used to count the votes for candidates. There are 4 Epochs in 24 hours, and naturally, 4 maintenance periods. During the maintenance period, no block is generated and block generation order for the next Epoch is decided. Election mechanism Votes In TRON, 1 TRX equals 1 vote. Voting process In TRON, voting for candidates is a special transaction. Nodes can vote for candidates through generating a voting transaction. Vote counting During each maintenance period, the votes for candidates will be counted. The top 27 candidates with the most votes will be the witnesses for the next Epoch. Block generation mechanism During each Epoch, the 27 witnesses will take turns to generate blocks according to the bookkeeping order. Each witness can only generate blocks when it is their turn. Witnesses package the data of multiple verified transactions into each block. The hash of the previous block will be included in each new block as the parentHash. The witness will sign the data of this block with his/her private key and fill in witness_signature, along with the address of the witness, the block height, and the time that block is generated, etc. Through storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture: In ideal circumstances, the bookkeeping process in a DPOS consensus-based blockchain system proceeds according to the bookkeeping order calculated in advance. Blocks are generated by witnesses in turn (see figure a). However, in reality, the blockchain network is a distributed and untrusted complex system in the following three ways. - Due to poor network environment, blocks generated by some witnesses cannot be received by other witnesses in valid time (see figure b1 and b2). - The normal operation of a certain witness cannot always be guaranteed (see figure c). - Some malicious witnesses will generate fork blocks in order to fork the chain (see figure d). As mentioned above, the basis for the blockchain system to operate normally is that most of the nodes in the system are honest and reliable. Furthermore, the primary guarantee for the security of the blockchain system is the security of the ledger, meaning that illegal data cannot be written into the ledger maliciously and ledger copies saved on each node should be consistent as well. Based on the DPOS consensus, the bookkeeping process is carried out by witnesses. Therefore, the safety of TRON depends on the reliability of the majority of the witnesses. TRON has put confirmed blocks in the system which are irreversible. At the same time, in order to resist the malicious behaviors of a small number of witness nodes, TRON recognizes the longest chain as the main chain based on \"the longest chain principle\". The confirmed block principle A block \"approved\" by more than two-thirds of the 27 witnesses (27 * 2/3 + 1 = 19) is called a confirmed block, meaning that the transaction data in this block is confirmed by the entire TRON blockchain. \"Approved\" means that the block produced by the witness follows the approval-pending block. For example, block No.103 in figured is produced by witness C; Witness E produced block No.104 after No.103. Then No. 105, 106, 107 produced by witness G, A, B are all following blocks that come after block No.103, making them the approval blocks for block No. 103 by witness C. The longest chain principle When a fork occurs, an honest witness would always choose to produce blocks on the longest chain. Incentive model To ensure the safe and efficient operation of the blockchain system, TRON sets up an incentive model to encourage node participation and network expansion. Witnesses who complete block production tasks will be rewarded with TRX. The model also specifies that for every confirmed block produced by a witness, the witness will receive 32 TRX. For the first 127th witnesses (including witness candidates) with the most votes, they will receive proportional rewards during the maintenance period of each Epoch. Proposal-based parameter adjustment An important characteristic of DPOS is that any parameter adjustment can be proposed on the chain, and witnesses will decide whether to approve the proposal by starting a vote. The advantage of this method is that it avoids hard fork upgrades when adding new features. Currently, TRON supports the following parameter adjustments: The interval between two maintenance periods The TRX cost of applying to be a bookkeeper candidate The TRX cost of account activation The bandwidth cost for one byte in each transaction The TRX cost of issuing tokens on TRON The rewards for producing each block The total amount of TRX that is proportionately awarded to the first 127th witnesses (including bookkeeper candidates) with the most votes The TRX cost of account activation through system contract The bandwidth cost for account activation The exchange rate between Energy and Sun The TRX cost for building a TRC-10 token-based decentralized trading pair The maximum CPU time allowed for a single transaction execution Whether to allow changes of account names Whether to allow the issuance of assets with duplicate names Whether to allow resource delegation The upper limit for Energy in TRON blockchain Whether to allow TRC-10 asset transfer in smart contracts Whether to allow adjustment to Energy upper limit Whether to allow multi-signature The TRX cost of updating account access The TRX cost of multi-signature transactions Whether to verify block and transaction protobuf message Bandwidth and energy mechanism To be continued... Appendix: Reference Documentations https://www.coinbureau.com/education/delegated-proof-stake-dpos/ https://www.nichanank.com/blog/2018/6/4/consensus-algorithms-pos-dpos http://docs.bitshares.org/en/master/technology/dpos.html#role-of-delegates https://hackernoon.com/what-is-delegated-proof-of-stake-897a2f0558f9","title":"DPOS"},{"location":"introduction/dpos/#overview","text":"Blockchain is a distributed accounting system. In a blockchain system, there can be thousands of nodes, each of which independently stores the same ledger. If new transaction data is to be written into the ledger, approvals from these nodes are needed. Achieving this goal in an untrusted distributed environment is a complicated systematic quest. The blockchain system operates normally means each node in the blockchain can always keep the same ledger, provided that most nodes in the system are honest and reliable. In order to ensure that honest and reliable nodes can jointly supervise the transaction data written into the ledgers, each blockchain system needs to build its own consensus, which is equivalent to the constitution of the blockchain. As long as the vast majority of nodes comply with the consensus requirements, it is able to guarantee the results will certainly be credible, even in an untrusted distributed environment. Therefore, the significance of the consensus is that the honest nodes in the blockchain can ultimately achieve the agreement of the ledgers as long as they strictly abide by this consensus. There are several types of consensus, and the most commonly used are POW, POS, and DPOS. Definitely, different blockchain systems will have a unique way of implementation. This article will mainly introduce the DPOS consensus on which TRON based. We will also explain the basic components and mechanisms of DPOS.","title":"Overview"},{"location":"introduction/dpos/#block-producing-process","text":"The witnesses of the blockchain network collect the newly generated transactions in the blockchain network and verify the legality of these transactions, then package the transactions in a block, record them as a new page on the ledger, and broadcast the page to the entire blockchain network. Other nodes will receive the new page and verify the legality of the transaction data on the page and add it to their own ledger. The witnesses will repeat this process so all new transaction data in the blockchain system can be recorded in the ledger.","title":"Block Producing Process"},{"location":"introduction/dpos/#dpos-overview","text":"The role of consensus is to select the witnesseses in the blockchain system. The witnesseses verify the transaction data and keep the account in order to broadcast new accounts to other nodes in the network and obtains the approval of the new accounts from other nodes. As a specific implementation of consensus, DPOS works in the following way: The DPOS consensus selects some nodes as witnesseses in the blockchain system based on the number of votes they receive. First, when the blockchain system starts to operate, a certain number of tokens will be issued, and then the tokens will be given to nodes in the blockchain system. A node can apply to be a witnesses candidate in the blockchain system with a portion of the tokens. Any token-holding node in the blockchain system can vote for these candidates. Every t period of time, the votes for all the candidates will be counted. Top N candidate nodes with the most votes will become witnesseses for the next t period. After t period of time, the votes will be counted again to elect the new witnesseses, and the cycle continues. Let's see how it's realized in the context of TRON:","title":"DPOS overview"},{"location":"introduction/dpos/#definition","text":"TRON: refers to the TRON network. The document does not distinguish between TRON, TRON blockchain, TRON blockchain system, etc. TRON token: refers to the equity token issued by and circulating in TRON, known as TRX. Witnesses candidates: nodes eligible for becoming witnesseses in TRON. Witnesses: nodes in TRON qualified for book-keeping. They are usually called witnesses in DPOS consensus. In TRON, there will be 27 witnesseses, which are also called super nodes (or SR). Here, we will not distinguish between bookkeeper, witness, supernode, SR, etc. Bookkeeping: the process of verifying transactions and recording them in a ledger. Because ledgers in TRON are carried by blocks, the bookkeeping process is also called block generation. We will not distinguish between bookkeeping and block generation in the document. Bookkeeping order: block generation order. The descending order of the 27 witnesseses based on the number of votes they receive. Block time: TRON sets block time to be 3 seconds. This means a block is generated every 3 seconds. Slot: after each block is generated, it can be put into a slot; and each generated block will take up a slot. For example, there are 20 slots for every minute. When a block is generated during the block time, the corresponding slot will be filled. However, if a block is not generated, then the corresponding slot will be empty. The next block generated will fill in a new corresponding slot. Epoch: TRON sets an Epoch to be 6 hours. The last 2 block time of an Epoch is the maintenance period, during which block generating order for the next Epoch will be decided. The maintenance period: TRON sets the period to be 2 block time, which is 6 seconds. This period of time is used to count the votes for candidates. There are 4 Epochs in 24 hours, and naturally, 4 maintenance periods. During the maintenance period, no block is generated and block generation order for the next Epoch is decided.","title":"Definition"},{"location":"introduction/dpos/#election-mechanism","text":"Votes In TRON, 1 TRX equals 1 vote. Voting process In TRON, voting for candidates is a special transaction. Nodes can vote for candidates through generating a voting transaction. Vote counting During each maintenance period, the votes for candidates will be counted. The top 27 candidates with the most votes will be the witnesses for the next Epoch.","title":"Election mechanism"},{"location":"introduction/dpos/#block-generation-mechanism","text":"During each Epoch, the 27 witnesses will take turns to generate blocks according to the bookkeeping order. Each witness can only generate blocks when it is their turn. Witnesses package the data of multiple verified transactions into each block. The hash of the previous block will be included in each new block as the parentHash. The witness will sign the data of this block with his/her private key and fill in witness_signature, along with the address of the witness, the block height, and the time that block is generated, etc. Through storing the hash of the previous block, blocks are logically connected. Eventually, they form a chain. A typical blockchain structure is shown in the following picture: In ideal circumstances, the bookkeeping process in a DPOS consensus-based blockchain system proceeds according to the bookkeeping order calculated in advance. Blocks are generated by witnesses in turn (see figure a). However, in reality, the blockchain network is a distributed and untrusted complex system in the following three ways. - Due to poor network environment, blocks generated by some witnesses cannot be received by other witnesses in valid time (see figure b1 and b2). - The normal operation of a certain witness cannot always be guaranteed (see figure c). - Some malicious witnesses will generate fork blocks in order to fork the chain (see figure d). As mentioned above, the basis for the blockchain system to operate normally is that most of the nodes in the system are honest and reliable. Furthermore, the primary guarantee for the security of the blockchain system is the security of the ledger, meaning that illegal data cannot be written into the ledger maliciously and ledger copies saved on each node should be consistent as well. Based on the DPOS consensus, the bookkeeping process is carried out by witnesses. Therefore, the safety of TRON depends on the reliability of the majority of the witnesses. TRON has put confirmed blocks in the system which are irreversible. At the same time, in order to resist the malicious behaviors of a small number of witness nodes, TRON recognizes the longest chain as the main chain based on \"the longest chain principle\". The confirmed block principle A block \"approved\" by more than two-thirds of the 27 witnesses (27 * 2/3 + 1 = 19) is called a confirmed block, meaning that the transaction data in this block is confirmed by the entire TRON blockchain. \"Approved\" means that the block produced by the witness follows the approval-pending block. For example, block No.103 in figured is produced by witness C; Witness E produced block No.104 after No.103. Then No. 105, 106, 107 produced by witness G, A, B are all following blocks that come after block No.103, making them the approval blocks for block No. 103 by witness C. The longest chain principle When a fork occurs, an honest witness would always choose to produce blocks on the longest chain.","title":"Block generation mechanism"},{"location":"introduction/dpos/#incentive-model","text":"To ensure the safe and efficient operation of the blockchain system, TRON sets up an incentive model to encourage node participation and network expansion. Witnesses who complete block production tasks will be rewarded with TRX. The model also specifies that for every confirmed block produced by a witness, the witness will receive 32 TRX. For the first 127th witnesses (including witness candidates) with the most votes, they will receive proportional rewards during the maintenance period of each Epoch.","title":"Incentive model"},{"location":"introduction/dpos/#proposal-based-parameter-adjustment","text":"An important characteristic of DPOS is that any parameter adjustment can be proposed on the chain, and witnesses will decide whether to approve the proposal by starting a vote. The advantage of this method is that it avoids hard fork upgrades when adding new features. Currently, TRON supports the following parameter adjustments: The interval between two maintenance periods The TRX cost of applying to be a bookkeeper candidate The TRX cost of account activation The bandwidth cost for one byte in each transaction The TRX cost of issuing tokens on TRON The rewards for producing each block The total amount of TRX that is proportionately awarded to the first 127th witnesses (including bookkeeper candidates) with the most votes The TRX cost of account activation through system contract The bandwidth cost for account activation The exchange rate between Energy and Sun The TRX cost for building a TRC-10 token-based decentralized trading pair The maximum CPU time allowed for a single transaction execution Whether to allow changes of account names Whether to allow the issuance of assets with duplicate names Whether to allow resource delegation The upper limit for Energy in TRON blockchain Whether to allow TRC-10 asset transfer in smart contracts Whether to allow adjustment to Energy upper limit Whether to allow multi-signature The TRX cost of updating account access The TRX cost of multi-signature transactions Whether to verify block and transaction protobuf message","title":"Proposal-based parameter adjustment"},{"location":"introduction/dpos/#bandwidth-and-energy-mechanism","text":"To be continued...","title":"Bandwidth and energy mechanism"},{"location":"introduction/dpos/#appendix-reference-documentations","text":"https://www.coinbureau.com/education/delegated-proof-stake-dpos/ https://www.nichanank.com/blog/2018/6/4/consensus-algorithms-pos-dpos http://docs.bitshares.org/en/master/technology/dpos.html#role-of-delegates https://hackernoon.com/what-is-delegated-proof-of-stake-897a2f0558f9","title":"Appendix: Reference Documentations"},{"location":"mechanism&algorithm/account/","text":"Introduction TRON uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like TRX balance, tokens balance, bandwidth, etc. TRX and tokens can be transfered from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a super representative candidate, vote, etc. All TRON's activities are based on account. How to Create an Account 1. Use a wallet to generate the address and private key. To active the account, you need to transfer TRX or transfer token to the new created account. generate an account 2. Use an account already existed in TRON network to create an account If you have enough frozen BandWidth Points, creating an account only consume your frozen BandWidth Points, otherwise, it burns 0.1 TRX. Key-pair Generation Tron signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random bumber, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then caculate P = d * G as the public key, G is the elliptic curve base point. Address Format Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address come out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 caculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\" Signature Step 1. Get the rawdata of the transaction, then transfer it to byte[] 2. Do sha256 calculation to the rawdata 3. Use the private key to sign the result gained from step 2 4. Add the signature back into the transaction Algorithm 1. ECDSA, SECP256K 2. Example: priKey:::8e812436a0e3323166e1f0e8ba79e19e217b2c4a53c970d4cca0cfb1078979df\u2028 pubKey::04a5bb3b28466f578e6e93fbfd5f75cee1ae86033aa4bbea690e3312c087181eb366f9a1d1d6a437a9bf9fc65ec853b9fd60fa322be3997c47144eb20da658b3d1\u2028 hash:::159817a085f113d099d3d93c051410e9bfe043cc5c20e43aa9a083bf73660145\u2028 r:::38b7dac5ee932ac1bf2bc62c05b792cd93c3b4af61dc02dbb4b93dacb758123f\u2028 s:::08bf123eabe77480787d664ca280dc1f20d9205725320658c39c6c143fd5642d\u2028 v:::0 Note: The size of the signature result is 65 bytes. r 32 bytes, s 32 bytes, v 1 bytes. 3. fullnode will verify the signature, it generates an address with the value of hash and r\u3001s\u3001v, then it compares with the address in the transaction. Demo public static Transaction sign(Transaction transaction, ECKey myKey) { Transaction.Builder transactionBuilderSigned = transaction.toBuilder(); byte[] hash = sha256(transaction.getRawData().toByteArray()); List<Contract> listContract = transaction.getRawData().getContractList(); for (int i = 0; i < listContract.size(); i++) { ECDSASignature signature = myKey.sign(hash); ByteString bsSign = ByteString.copyFrom(signature.toByteArray()); //Each contract may be signed with a different private key in the future. transactionBuilderSigned.addSignature(bsSign); } }","title":"Account Model"},{"location":"mechanism&algorithm/account/#introduction","text":"TRON uses account model. An account's identity is address, it needs private key signature to operate an account. An account has many attributes, like TRX balance, tokens balance, bandwidth, etc. TRX and tokens can be transfered from account to account and it costs bandwidth. An account can also issue a smart contract, apply to become a super representative candidate, vote, etc. All TRON's activities are based on account.","title":"Introduction"},{"location":"mechanism&algorithm/account/#how-to-create-an-account","text":"1. Use a wallet to generate the address and private key. To active the account, you need to transfer TRX or transfer token to the new created account. generate an account 2. Use an account already existed in TRON network to create an account If you have enough frozen BandWidth Points, creating an account only consume your frozen BandWidth Points, otherwise, it burns 0.1 TRX.","title":"How to Create an Account"},{"location":"mechanism&algorithm/account/#key-pair-generation","text":"Tron signature algorithm is ECDSA, curve used is SECP256K1. Private key is a random bumber, public key is a point in the elliptic curve. The process is: first generate a random number d to be the private key, then caculate P = d * G as the public key, G is the elliptic curve base point.","title":"Key-pair Generation"},{"location":"mechanism&algorithm/account/#address-format","text":"Use the public key P as the input, by SHA3 get the result H. The length of the public key is 64 bytes, SHA3 uses Keccak256. Use the last 20 bytes of H, and add a byte of 0x41 in front of it, then the address come out. Do basecheck to address, here is the final address. All addresses start with 'T'. basecheck process: first do sha256 caculation to address to get h1, then do sha256 to h1 to get h2, use the first 4 bytes as check to add it to the end of the address to get address||check, do base58 encode to address||check to get the final result. character map: ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"","title":"Address Format"},{"location":"mechanism&algorithm/account/#signature","text":"","title":"Signature"},{"location":"mechanism&algorithm/dex/","text":"TRON network supports decentralized exchange(DEX) using Bancor protocol. DEX is composed of many exchange pairs. You can find the api below in http api What is an Exchange Pair The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX. Exchange Pair Creation Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate' Exchange Pair Transaction Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction' Exchange Pair Injection The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject' Exchange Pair Withdrawal The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw' Query 1. Transaction Query ListExchanges: Query the list of all the exchange pairs GetPaginatedExchangeList: Query the list of all the exchange pairs by pagination GetExchangeById: Query an exchange pair by exchange pair id 2. Price Calculation The token price is determined by the ratio of the balance of the two tokens. 3. Calculate the Amount of Token You Can Get sellTokenQuant is the amount of the first_token you want to sell buyTokenQuant is the amount of second_token you can get supply = 1_000_000_000_000_000_000L supplyQuant = -supply * (1.0 - Math.pow(1.0 + (double) sellTokenQuant/\uff08firstTokenBalance + sellTokenQuant, 0.0005)) buyTokenQuant = \uff08long\uff09balance * (Math.pow(1.0 + (double) supplyQuant / supply, 2000.0) - 1.0)","title":"DEX"},{"location":"mechanism&algorithm/dex/#what-is-an-exchange-pair","text":"The term of 'Exchange Pair' describes a trade between one token with another, like A/B, A/TRX.","title":"What is an Exchange Pair"},{"location":"mechanism&algorithm/dex/#exchange-pair-creation","text":"Any account can create an exchange pair, it burns 1024 TRX. Please refer to 'wallet/exchangecreate'","title":"Exchange Pair Creation"},{"location":"mechanism&algorithm/dex/#exchange-pair-transaction","text":"Any account can trade in the DEX. The trade follows Bancor protocol. Please refer to 'wallet/exchangetransaction'","title":"Exchange Pair Transaction"},{"location":"mechanism&algorithm/dex/#exchange-pair-injection","text":"The exchange pair creator can inject more tokens into the exchange pair. Injection can decrease the range of ratio fluctuation. If one token is injected, the other one will be injected automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangeinject'","title":"Exchange Pair Injection"},{"location":"mechanism&algorithm/dex/#exchange-pair-withdrawal","text":"The exchange pair creator can withdraw tokens from the exchange pair. Withdrawal can increase the range of ratio fluctuation. If one token is withdrawn, the other one will be withdrawn automatically to keep the current ratio of the two tokens unchanged. Please refer to 'wallet/exchangewithdraw'","title":"Exchange Pair Withdrawal"},{"location":"mechanism&algorithm/dex/#query","text":"","title":"Query"},{"location":"mechanism&algorithm/multi-signatures/","text":"Background Notice: Since V3.5 In the past version, the transactions created in one account can only be signed by one private key, an account can only be managed by one private key. Since V3.5, an account can be managed by several private keys, and the transactions created in one account can be signed by serval private keys. Tron multi-signatures Tip Concept There are three types of permission: owner\u3001witness and active. Owner permission has the right to execute all the contracts. Witness permission is for SR. Active permission contains a set of contracts selected execution permissions. 1) Protocol Account message Account { ... Permission owner_permission = 31; Permission witness_permission = 32; repeated Permission active_permission = 33; } Three attributes are added, owner_permission\u3001witness_permission and active_permission. active_permission is a list, the length can not be bigger than 8. ContractType message Transaction { message Contract { enum ContractType { AccountCreateContract = 0; ... AccountPermissionUpdateContract = 46; } } } AccountPermissionUpdateContract is a new contract used to update the account permission. AccountPermissionUpdateContract message AccountPermissionUpdateContract { bytes owner_address = 1; Permission owner = 2; Permission witness = 3; repeated Permission actives = 4; } owner_address : The account applys multi-signatures owner : Owner permission witness : Witness permission (if is witness) actives : Active permission This will override the Original account permission. Permission message Permission { enum PermissionType { Owner = 0; Witness = 1; Active = 2; } PermissionType type = 1; int32 id = 2; string permission_name = 3; int64 threshold = 4; int32 parent_id = 5; bytes operations = 6; repeated Key keys = 7; } PermissionType : Pemission type id : Generated by system. Owner id=0, Witness id=1, Active id increases from 2. Specifying using which permission to execute a contract by setting id. For instance, using owner permission, set id=0 permission_name : Permission name, 32 bytes length limit threshold : The threshold of the signature weight parent_id : Current 0 operations : 32 bytes (256 b), each bit represent the execution permission of one contract, 1 means it owns the execution permission of the contract. For instance, operations=0x0100...00(hex), 100...0(binary), refer to the definition of Transaction.ContractType in proto, the id of AccountCreateContract is 0, means this permission only owns the execution permission of AccountCreateContract keys : The accounts and weights that all own the permission, 5 keys at most. Key message Key { bytes address = 1; int64 weight = 2; } address : The account address weight : The signature weight Transaction message Transaction { ... int32 Permission_id = 5; } Permission_id is added. It is corresponding to Permission.id 1 is not allowed, because witness permission is only used to produce blocks, not for transaction signature. 2) Owner Permission Owner permission is the top permission of an account. It is used to control account ownership, adjust permission structure. Owner Permission has the right to execute all the contracts. Owner permission's features: 1\u3001The account that has owner permission can change the owner permission 2\u3001When owner permission is null, the default owner of the account owns the owner permission 3\u3001When you create a new account, the address will be insert into owner permission automatically, default weight is 1, keys field only contains this address and also weight is 1. 4\u3001If a permissionId is not specified when a contract is executed, using owner permission by defualt. 3) Witness Permission Super representatives can use this permission to manage block producing. Only witness account has this permission. Usage scenario example: A super representative deploys a witness node on cloud server. In order to keep the account on the cloud server safe, you can only give the block producing permission to the account you put on cloud server. Because this account only owns block producing permission, no TRX transfer permission, so even if the account on the cloud server is leaked, the TRX will not be lost. Witness node configuration: 1\u3001if no witness permission is used, no need to configure 2\u3001if itness permission is used, need to reconfigure: #config.conf // Optional.The default is empty. // It is used when the witness account has set the witnessPermission. // When it is not empty, the localWitnessAccountAddress represents the address of the witness account, // and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account. // When it is empty,the localwitness is configured with the private key of the witness account. //localWitnessAccountAddress = localwitness = [ f4df789d3210ac881cb900464dd30409453044d2777060a0c391cbdf4c6a4f57 ] 4) Active Permission Active permission is composed of a set of contract execution permission, like creating an account, trnasfer function, etc. Active permission's features: 1\u3001the account owns owner permission can change active permission 2\u3001the account owns the execution permission of AccountPermissionUpdateContract can also change active permission 3\u30018 permissions at most 4\u3001permissionId increases from 2 automatically 5\u3001when a new account is created, an active permission will be created automatically, and the address will be inserted into it, default weight is 1, keys field only contains this address and weight is 1 5) Fee 1\u3001Using AccountPermissionUpdateContract costs 100TRX 2\u3001If a transaction contains 2 or more than 2 signatures, it charges an extra 1 TRX besides the transaction fee 3\u3001The fee can be modified by proposing API 1) Change Permission AccountPermissionUpdateContract , steps: 1\u3001call getaccount to query the account, get the original permission 2\u3001change permission 3\u3001build transaction and sign 4\u3001send transaction http-demo http://{{host}}:{{port}}/wallet/accountpermissionupdate { \"owner_address\": \"41ffa9466d5bf6bb6b7e4ab6ef2b1cb9f1f41f9700\", \"owner\": { \"type\": 0, \"id\": 0, \"permission_name\": \"owner\", \"threshold\": 2, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }, \"witness\": { \"type\": 1, \"id\": 1, \"permission_name\": \"witness\", \"threshold\": 1, \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 } ] }, \"actives\": [{ \"type\": 2, \"id\": 2, \"permission_name\": \"active0\", \"threshold\": 3, \"operations\": \"7fff1fc0037e0000000000000000000000000000000000000000000000000000\", \"keys\": [{ \"address\": \"41F08012B4881C320EB40B80F1228731898824E09D\", \"weight\": 1 }, { \"address\": \"41DF309FEF25B311E7895562BD9E11AAB2A58816D2\", \"weight\": 1 }, { \"address\": \"41BB7322198D273E39B940A5A4C955CB7199A0CDEE\", \"weight\": 1 } ] }] } active permission's operations calculation demo public static void main(String[] args) { //you need to specify the id of the contract you need to give permission to by referring to the definition of Transaction.ContractType in proto to get the id of the contract, below includes all the contract except AccountPermissionUpdateContract(id=46) Integer[] contractId = {0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 41, 42, 43, 44, 45}; List<Integer> list = new ArrayList<>(Arrays.asList(contractId)); byte[] operations = new byte[32]; list.forEach(e -> { operations[e / 8] |= (1 << e % 8); }); //7fff1fc0033e0000000000000000000000000000000000000000000000000000 System.out.println(ByteArray.toHexString(operations)); } 2) Contract Execution 1\u3001Create transaction, the same as none multi-signatures 2\u3001Specify Permission_id, default 0, represent owner permission, demo 3\u3001User A sign the transaction, and then send it to user B 4\u3001User B sign the transaction gets from A, and then send it to user C \u2026 n\u3001The last users that signs the transaction broadcast it to the node n+1\u3001The node will verify if the sum of the weight of all signatures is bigger than threshold, if true, the transaction is accepted, otherwise, is rejected Demo: https://github.com/tronprotocol/wallet-cli/blob/multi_sign_V2/src/main/java/org/tron/demo/MultiSignDemo.java 3) Other Api Please refer to Tron http api and Tron rpc api for more information 1\u3001add signature curl -X POST http://127.0.0.1:8090/wallet/addtransactionsign -d '{\"transaction\": \"TransferContract\", \"privateKey\": \"permissionkey1\"}' rpc AddSign (TransactionSign) returns (TransactionExtention) {} 2\u3001query the addresses that already signed a transaction curl -X POST http://127.0.0.1:8090/wallet/getapprovedlist -d '{\"transaction\"}' rpc GetTransactionApprovedList(Transaction) returns (TransactionApprovedList) { } 3\u3001query the signature weigth of a transaction curl -X POST http://127.0.0.1:8090/wallet/getsignweight -d '{\"transaction\"}' rpc GetTransactionSignWeight (Transaction) returns (TransactionSignWeight) {} Others Since V3.5, what is the change after a new account is created? When to create a new account, an owner permission and active permission will be generated automatically. Owner permission only contains one key, the weight and threshold are both 1. Active permission also contains one key, the weight and threshold are both 1, and operations is \"7fff1fc0033e0000000000000000000000000000000000000000000000000000\", means it support the execution of all contracts except AccountPermissionUpdateContract. After V3.5, if there is a new system contract, the default operations value of the newly created account will change. The operations of existing accounts will not change. Please refer to wallet-cli to check the usage of multi-signatures. Fees If you update your account permission, the fee is 100 TRX. If a transaction is signed by more than 1 account, the fee is 1 TRX.","title":"Multi Signatures"},{"location":"mechanism&algorithm/multi-signatures/#background","text":"","title":"Background"},{"location":"mechanism&algorithm/multi-signatures/#concept","text":"","title":"Concept"},{"location":"mechanism&algorithm/multi-signatures/#api","text":"","title":"API"},{"location":"mechanism&algorithm/multi-signatures/#others","text":"","title":"Others"},{"location":"mechanism&algorithm/multi-signatures/#fees","text":"","title":"Fees"},{"location":"mechanism&algorithm/resource/","text":"Introduction TRON network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by TRON's exclusive RAM model, TRON's RAM resource is almost infinite. TRON network imports two resource conceptions: Bandwidth points and Energy. Bandwidth Point represents Bandwidth, Energy represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Energy Bandwidth Points The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the frozen TRX in the network and the self-frozen TRX amount, the Bandwidth Points an account possesses is not fixed. 1. How to Get Bandwidth Points 1. By Freezing TRX to get Bandwidth Points, Bandwidth Points = the amount of TRX self-frozen / the total amount of TRX frozen for Bandwidth Points in the network * 43_200_000_000 2. Every account has a fixed amount of free Bandwidth Points(5000) every day 2. Bandwidth Points Consumption Except for query operation, any transaction consumes Bandwidth points. There's another situation: When you transfer(TRX or token) to an account that does not exist in the network, this operation will first create that account in the network and then do the transfer. It only consumes Bandwidth points for account creation, no extra Bandwidth points consumption for transfer. Create a new account transaction, Bandwidth points consumption sequence: 1. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 2; 2. Burn 0.1 TRX; Token transfer transaction, Bandwidth points consumption sequence: 1. Firstly, check if the total free Bandwidth Points of the token issuer is enough, then check if the transfer Initiator\u2018s remaining token freeBandwidth Points is enough, finally check if the Bandwidth Points of token issuer obtained by freezing TRX is enough. Otherise, it will go to step 2; 2. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 3; 3. Free Bandwidth points. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 4; 4. Bandwidth points from burning TRX, the rate = the number of bytes of the transaction * 10 SUN; Ordinary transaction, Bandwidth points consumption sequence: 1. Bandwidth points from freezing TRX. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 2; 2. Free Bandwidth points. If transaction initiator does not have enough Bandwidth Points of this type, it will go to step 3; 3. Bandwidth points from burning TRX, the rate = the number of bytes of the transaction * 10 SUN; 3. Bandwidth Points Recovery Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. For the specific formula: Every 24 hours, the amount of the usage of Bandwidth points of an account will be reset to 0. Energy Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource. 1. How to Get Energy Freeze TRX to get energy. Example (Using wallet-cli): freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] Freeze TRX to get energy, energy obtained = user's TRX frozen amount / total amount of frozen TRX in TRON * 50_000_000_000. Example: If there are only two users, A freezes 2 TRX, B freezes 2 TRX the energy they can get is: A: 25_000_000_000 and energy_limit is 25_000_000_000 B: 25_000_000_000 and energy_limit is 25_000_000_000 when C freezes 1 TRX: the energy they can get is: A: 20_000_000_000 and energy_limit is 20_000_000_000 B: 20_000_000_000 and energy_limit is 20_000_000_000 B: 10_000_000_000 and energy_limit is 10_000_000_000 Energy Recovery The energy consumed will reduce to 0 smoothly within 24 hours. Example: at one moment, A has used 72_000_000 Energy if there is no continuous consumption or TRX freeze one hour later, the energy consumption amount will be 72_000_000 - (72_000_000 * (60*60/60*60*24)) Energy = 69_000_000 Energy 24 hours later, the energy consumption amount will be 0 Energy 2. How to Set Fee Limit (Caller Must Read) Within the scope of this section, the smart contract developer will be called \"developer\", the users or other contracts which call the smart contract will be called \"caller\" The amount of energy consumed while call the contract can be converted to TRX or SUN, so within the scope of this section, when refer to the consumption of the resource, there's no strict difference between Energy, TRX and SUN, unless they are used as a number unit. Set a rational fee limit can guarantee the smart contract execution. And if the execution of the contract cost great energy, it will not consume too much energy from the caller. Before you set fee limit, you need to know several conception: 1. The legal fee limit is a integer between 0 - 10^9, unit is SUN. 2. Different smart contracts consume different amount of energy due to their complexity. The same trigger in the same contract almost consumes the same amount fo energy[1]. When the contract is triggered, the commands will be executed one by one and consume energy. If it reaches the fee limit, commands will fail to be executed, and energy is not refundable. 3. Currently fee limit only refers to the energy converted to SUN that will be consumed from the caller[2]. The energy consumed by triggering contract also includes developer's share. 4. For a vicious contract, if it encounters execution timeout or bug crash, all it's energy will be consumed. 5. Developer may undertake a proportion of energy consumption(like 90%). But if the developer's energy is not enough for consumption, the rest of the energy consumption will be undertaken by caller completely. Within the fee limit range, if the caller does not have enough energy, then it will burn equivalent amount of TRX [2]. To encourage caller to trigger the contract, usually developer has enough energy. Example How to estimate the fee limit: Assume contract C's last execution consumes 18000 Energy, so estimate the energy consumption limit to be 20000 Energy[3] According to the frozen TRX amount and energy conversion, assume 1 TRX = 400 energy. When to burn TRX, 1 TRX = 10000 energy[4] Assume developer undertake 90% energy consumption, and developer has enough energy. Then the way to estimate the fee limit is: 1). A = 20000 energy * (1 TRX / 400 energy) = 50 TRX = 50_000_000 SUN, 2). B = 20000 energy * (1 TRX / 10000 energy) = 2 TRX = 2_000_000 SUN, 3). Take the greater number of A and B, which is 50_000_000 SUN, 4). Developer undertakes 90% energy consumption, caller undertakes 10% energy consumption, So, the caller is suggested to set fee limit to 50_000_000 SUN * 10% = 5_000_000 SUN Note: [1] The energy consumption of each execution may fluctuate slightly due to the situation of all the nodes. [2] TRON may change this policy. [3] The estimated energy consumption limit for the next execution should be greater than the last one. [4] 1 TRX = 10^4 energy is a fixed number for burning TRX to get energy, TRON may change it in future. 3. Energy Calculation (Developer Must Read) 1. In order to punish the vicious developer, for the abnormal contract, if the execution times out (more than 50ms) or quits due to bug (revert not included), the maximum available energy will be deducted. If the contract runs normally or revert, only the energy needed for the execution of the commands will be deducted. 2. Developer can set the proportion of the energy consumption it undertakes during the execution, this proportion cna be changed later. If the developer's energy is not enough, it will consume the caller's energy. 3. Currently, the total energy available when trigger a contract is composed of caller fee limit and developer's share Note: - If the developer is not sure about whether the contract is normal, do not set caller's energy consumption proportion to 0%, in case all developer's energy will be deducted due to vicious execution[1]. - We recommend to set caller's energy consumption proportion to 10% ~ 100%[2]. Example 1 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX frozen for 100000 energy. Smart contract C set the caller energy consumption proportion to 100% which means the caller will pay for the energy consumption completely. A triggers C, the fee limit set is 30000000 (unit SUN, 30 TRX) So during this trigger the energy A can use is from two parts: - A's energy by freezing TRX; - The energy converted from the amount of TRX burning according to a fixed rate; If fee limit is greater than the energy obtained from freezing TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (30 - 10) TRX = 20 TRX available, so the energy it can keep consuming is 20 TRX / 100 SUN = 200000 energy. Finally, in this call, the energy A can use is (100000 + 200000) = 300000 energy. If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error come out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md Example 2 A has an account with a balance of 90 TRX(90000000 SUN) and 10 TRX frozen for 100000 energy. Smart contract C set the caller energy consumption proportion to 40% which means the developer will pay for the rest 60% energy consumption. Developer D freezes 50 TRX to get 500000 energy. A triggers C, the fee limit set is 200000000 (unit SUN, 200 TRX). So during this trigger the energy A can use is from three parts: - A's energy by freezing TRX -- X; - The energy converted from the amount of TRX bruning according to a fixed rate -- Y; If fee limit is greater than the energy obtained from freezing TRX, then it will burn TRX to get energy. The fixed rate is: 1 Energy = 100 SUN, fee limit still has (200 - 10) TRX = 190 TRX available, but A only has 90 TRX left, so the energy it can keep consuming is 90 TRX / 100 SUN = 900000 energy; - D's energy by freezing TRX -- Z; There are two situation: if (X + Y) / 40% >= Z / 60%, the energy A can use is X + Y + Z if (X + Y) / 40% < Z / 60%, the energy A can use is (X + Y) / 40% If contract executes successfully without any exception, the energy needed for the execution will be deducted. Generally, it is far more less than the amount of energy this trigger can use. If Assert-style error comes out, it will consume the whole number of energy set for fee limit. Assert-style error introduction, refer to (https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md) Note: when developer create a contract, do not set consume_user_resource_percent to 0, which means developer will undertake all the energy consumption. If Assert-style error comes out, it will consume all energy from the developer itsef. Assert-style error introduction, refer to https://github.com/tronprotocol/Documentation/blob/master/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E8%99%9A%E6%8B%9F%E6%9C%BA/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.md To avoid unnecessary lost, 10 - 100 is recommended for consume_user_resource_percent. Resource Delegation In TRON network, an account can freeze TRX for Bandwidth or Energy for other accounts. The primary account owns the frozen TRX and TRON power, the recipient account owns the Bandwidth or Energy. Like ordinary freezing, resource delegation freezing is also at least 3 days. Example(Using wallet-cli) freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] [receiverAddress] frozen_balance: the amount of TRX to freeze (unit SUN) frozen_duration: the freezing period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Energy receiverAddress: recipient account address Other Fees Type Fee Create a witness 9999 TRX Issue a token 1024 TRX Create an account 0.1 TRX Create an exchange 1024 TRX","title":"Resource Model"},{"location":"mechanism&algorithm/resource/#introduction","text":"TRON network has 4 types of resources: Bandwidth, CPU, Storage and RAM. Benefit by TRON's exclusive RAM model, TRON's RAM resource is almost infinite. TRON network imports two resource conceptions: Bandwidth points and Energy. Bandwidth Point represents Bandwidth, Energy represents CPU and Storage. Note: - Ordinary transaction only consumes Bandwidth points - Smart contract related transaction not only consumes Bandwidth points, but also Energy","title":"Introduction"},{"location":"mechanism&algorithm/resource/#bandwidth-points","text":"The transaction information is stored and transmitted in the form of byte array, Bandwidth Points consumed = the number of bytes of the transaction * Bandwidth Points rate. Currently Bandwidth Points rate = 1 Such as if the number of bytes of a transaction is 200, so this transaction consumes 200 Bandwidth Points. Note: Due to the change of the total amount of the frozen TRX in the network and the self-frozen TRX amount, the Bandwidth Points an account possesses is not fixed.","title":"Bandwidth Points"},{"location":"mechanism&algorithm/resource/#energy","text":"Each command of smart contract consume system resource while running, we use 'Energy' as the unit of the consumption of the resource.","title":"Energy"},{"location":"mechanism&algorithm/resource/#resource-delegation","text":"In TRON network, an account can freeze TRX for Bandwidth or Energy for other accounts. The primary account owns the frozen TRX and TRON power, the recipient account owns the Bandwidth or Energy. Like ordinary freezing, resource delegation freezing is also at least 3 days. Example(Using wallet-cli) freezeBalance frozen_balance frozen_duration [ResourceCode:0 BANDWIDTH,1 ENERGY] [receiverAddress] frozen_balance: the amount of TRX to freeze (unit SUN) frozen_duration: the freezing period (currently a fixed 3 days) ResourceCode: 0 for Bandwidth, 1 for Energy receiverAddress: recipient account address","title":"Resource Delegation"},{"location":"mechanism&algorithm/resource/#other-fees","text":"Type Fee Create a witness 9999 TRX Issue a token 1024 TRX Create an account 0.1 TRX Create an exchange 1024 TRX","title":"Other Fees"},{"location":"mechanism&algorithm/shielded-transaction/","text":"Introduction TRON shielded transaction uses zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to implement a completely anonymous transaction. TronZ is the name of shielded trc10 token. In shielded transaction of transfering TronZ, the sender and the receiver's address and transfer amount can both be completely confidential. In shielded transaction of transfering TronZ, there are two types of address: \"t-addr\" (Transparent Address) \"z-addr\" (Shielded Address) \"t-addr\" address uses TRON account model. \"z-addr\" address uses Anonymous account model. In shielded transaction of transfering TronZ, there are three types of transfer transaction: - From \"t-addr\" to \"z-addr\": The transaction information of \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"z-addr\" to \"z-addr\": The transaction information of both \"z-addr\" can not be tracked. From \"z-addr\" to \"t-addr\": The transaction information of both \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"t-addr\" to \"t-addr\" are not supported. Usage Guide 1. The sender can only spend one note in each transfer. The receiver can receive two notes in each transfer at most. 2. When you transfer from \"z-addr\" to \"t-addr\", if no note returns to \"z-addr\" as a change, it will generate a note of zero value automatically, and send it to a random black hole address. 3. The fee for each shielded transaction is xx. The doc below describes how to use TRON Shielded Transaction with http api. Transfer from transparent address to shielded address Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { \"transparent_from_address\":\"41A7D8A35B260395C14AA456297662092BA3B76FC0\", \"from_amount\":100000000, \"ovk\":\"798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6\", \"shielded_receives\":[{ \"note\": { \"value\": 500000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" } }] } Return: {\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} Step 2. Call api: wallet/gettransactionsign to sign (use the private key of the transparent address) Method: Post Parameters: { \"privateKey\":\"7f7f701e94d4f1dd60ee5205e7ea8ee31121427210417b608a6b2e96433549a7\", \"transaction\": {\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} } Return: {\"signature\":[\"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\"],\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: {\"signature\":[\"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\"],\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} Return: {\"result\": true} Transfer from shielded address to shielded address Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\":[{ \"hash\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\", \"index\":0 }], \"block_num\":1 } Return: {\"vouchers\": [{\"tree\": {\"left\": {\"content\": \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\"},\"right\": {\"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\"}},\"rt\": \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\"}],\"paths\": [\"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\"]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\": \"f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06\", \"nsk\": \"050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d\", \"ovk\": \"a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c\", \"shielded_spends\": [ { \"note\": { \"value\": 90000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302\" }, \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\", \"voucher\": {\"tree\": {\"left\": {\"content\": \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\"},\"right\": {\"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\"}},\"rt\": \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\"}, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" } ], \"shielded_receives\": [ { \"note\": { \"value\": 80000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] } Return: {\"txID\":\"5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"binding_signature\":\"b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c\",\"spend_description\":[{\"value_commitment\":\"ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529\",\"anchor\":\"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\",\"nullifier\":\"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\",\"rk\":\"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\",\"spend_authority_signature\":\"518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08\",\"zkproof\":\"82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad\"}],\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925\",\"note_commitment\":\"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\",\"epk\":\"36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758\",\"c_enc\":\"1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653\",\"c_out\":\"bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0\",\"zkproof\":\"b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"029b\",\"ref_block_hash\":\"027c45a7dc0875f7\",\"expiration\":1558691547000,\"timestamp\":1558691489292},\"raw_data_hex\":\"0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d\"} Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: {\"txID\":\"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"binding_signature\":\"231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504\",\"spend_description\":[{\"value_commitment\":\"f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140\",\"anchor\":\"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\",\"nullifier\":\"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\",\"rk\":\"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\",\"spend_authority_signature\":\"2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08\",\"zkproof\":\"984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b\"}],\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595\",\"note_commitment\":\"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\",\"epk\":\"3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c\",\"c_enc\":\"4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040\",\"c_out\":\"5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e\",\"zkproof\":\"b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0328\",\"ref_block_hash\":\"833c24d9f1019cd0\",\"expiration\":1558691970000,\"timestamp\":1558691911355},\"raw_data_hex\":\"0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d\"} Return: {\"result\": true} Transfer from shielded address to transparent address Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\":[{ \"hash\":\"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\", \"index\":0 }], \"block_num\":1 } Return: {\"vouchers\": [{\"tree\": {\"left\": {\"content\": \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\"},\"parents\": [{\"content\": \"c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61\"}]},\"rt\": \"8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b\"}],\"paths\": [\"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000\"]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\": \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\", \"nsk\": \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\", \"ovk\": \"1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61\", \"shielded_spends\": [ { \"note\": { \"value\": 80000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" }, \"alpha\": \"3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405\", \"voucher\": { \"tree\": { \"left\": { \"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }, \"right\": { \"content\": \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } }, \"rt\": \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" }, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000\" } ], \"transparent_to_address\": \"41A7D8A35B260395C14AA456297662092BA3B76FC0\", \"to_amount\": 70000000 } Return: {\"txID\":\"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"to_amount\":70000000,\"binding_signature\":\"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\",\"spend_description\":[{\"value_commitment\":\"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\",\"anchor\":\"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\",\"nullifier\":\"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\",\"rk\":\"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\",\"spend_authority_signature\":\"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\",\"zkproof\":\"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\"}],\"fee\":10000000,\"transparent_to_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\"},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"00dc\",\"ref_block_hash\":\"a45c748f93fa2854\",\"expiration\":1558928754000,\"timestamp\":1558928695327},\"raw_data_hex\":\"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\"} Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: {\"txID\":\"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"to_amount\":70000000,\"binding_signature\":\"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\",\"spend_description\":[{\"value_commitment\":\"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\",\"anchor\":\"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\",\"nullifier\":\"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\",\"rk\":\"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\",\"spend_authority_signature\":\"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\",\"zkproof\":\"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\"}],\"fee\":10000000,\"transparent_to_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\"},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"00dc\",\"ref_block_hash\":\"a45c748f93fa2854\",\"expiration\":1558928754000,\"timestamp\":1558928695327},\"raw_data_hex\":\"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\"} Return: {\"result\": true}","title":"Shielded Transaction"},{"location":"mechanism&algorithm/shielded-transaction/#introduction","text":"TRON shielded transaction uses zk-SNARK(Zero-Knowledge Succinct Non-Interactive Argument of Knowledge) to implement a completely anonymous transaction. TronZ is the name of shielded trc10 token. In shielded transaction of transfering TronZ, the sender and the receiver's address and transfer amount can both be completely confidential. In shielded transaction of transfering TronZ, there are two types of address: \"t-addr\" (Transparent Address) \"z-addr\" (Shielded Address) \"t-addr\" address uses TRON account model. \"z-addr\" address uses Anonymous account model. In shielded transaction of transfering TronZ, there are three types of transfer transaction: - From \"t-addr\" to \"z-addr\": The transaction information of \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"z-addr\" to \"z-addr\": The transaction information of both \"z-addr\" can not be tracked. From \"z-addr\" to \"t-addr\": The transaction information of both \"t-addr\" can be tracked, \"z-addr\" can not be tracked. From \"t-addr\" to \"t-addr\" are not supported.","title":"Introduction"},{"location":"mechanism&algorithm/shielded-transaction/#usage-guide","text":"1. The sender can only spend one note in each transfer. The receiver can receive two notes in each transfer at most. 2. When you transfer from \"z-addr\" to \"t-addr\", if no note returns to \"z-addr\" as a change, it will generate a note of zero value automatically, and send it to a random black hole address. 3. The fee for each shielded transaction is xx. The doc below describes how to use TRON Shielded Transaction with http api.","title":"Usage Guide"},{"location":"mechanism&algorithm/shielded-transaction/#transfer-from-transparent-address-to-shielded-address","text":"Step 1. Call api: wallet/createshieldedtransaction to build the transaction Method: Post Parameters: { \"transparent_from_address\":\"41A7D8A35B260395C14AA456297662092BA3B76FC0\", \"from_amount\":100000000, \"ovk\":\"798ba79bfec55e154fa69b4e6a96247288f727b5e4ecc5cd848aefc0afab02b6\", \"shielded_receives\":[{ \"note\": { \"value\": 500000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"723053bcbfecdf5da66c18ab0376476ef308c61b7abe891b2c01e903bcb87c0e\" } }] } Return: {\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} Step 2. Call api: wallet/gettransactionsign to sign (use the private key of the transparent address) Method: Post Parameters: { \"privateKey\":\"7f7f701e94d4f1dd60ee5205e7ea8ee31121427210417b608a6b2e96433549a7\", \"transaction\": {\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} } Return: {\"signature\":[\"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\"],\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} Step 3. Call api: wallet/broadcasttransaction to broadcast the transaction Method: Post Parameters: {\"signature\":[\"5c1939e2e1177f44a6d168b5e473bd193ea099aa369ffe27727d560f1c72a3226dd4be61c19a09cabbe3f4a7433932df11cf3e54c4fc04cff0eea6906f04c32a00\"],\"txID\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"transparent_from_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\",\"binding_signature\":\"5407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a\",\"from_amount\":100000000,\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"5a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd21\",\"note_commitment\":\"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\",\"epk\":\"e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b\",\"c_enc\":\"d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae\",\"c_out\":\"8e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a\",\"zkproof\":\"8b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c790607\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0245\",\"ref_block_hash\":\"b1ea272768028540\",\"expiration\":1558691289000,\"timestamp\":1558691230861},\"raw_data_hex\":\"0a0202452208b1ea27276802854040a8aff6c9ae2d5ae708083312e2080a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412a8080a1541a7d8a35b260395c14aa456297662092ba3b76fc01080c2d72f22c2070a205a1cd384edab9c38901d0250ebdf96d4f29889094b7096a7ce2dd6af919afd211220f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b621a20e7ff2357376eafdabc6db3fdabc079e42dd14c61a9a08c6cd38405d086086b4b22c404d1aaf220f531f31bd2d9ff6f6d59998e78f3f0d30c852258441c5d54fc6790af7620b8860f6ec48d93fedb4c9bbb0e43c8144a9e304ceee399ac6da0bb91dbace3c8a93e03f1d2a5a88b0998704a09a51ab147096a994420741e87168cda4f45f8ed03c816e947909f2997d48e2ceaed45c539463e5e8caf6a0a1529615afbfa01df0a89c6360512519aea8a1b30a367a8749b24946fcd2fbbc6cfbbb6562ed6aa16db5d9e76b1872683a841ebda3a16dda6083474c2ea5a81f4e5c04e6af6ed582f58cab36bc016cfcf03337bc64b5411c7cb6f6f55e17d96bfead8becb0b7661768e122c943159ff2854c0e6efdd408b5bd5afc9d629645bfff8d4a240591fa9adc37e4a5bc046fcf31f8088f3616dd2f69860e401221585fd1a5ebe88080742802ae4696b8ba5e826ddd42841dce71b4b3ebe47b1f254103ae49f0bd9d61f5c0193441c471d29535247c26ab9297975497f6051466dbc591c4cd7b4246604e445d7d3a1dd77538c1989a8c48f829c6a1ce0dee84019ef68b7407def2492f5c867f659b0f8f58cc1081706453bf3a1ec719927c6b3defdcc002e9f2f63b4bdb7f69a00db742d2571d7293bae3faffc43ea0ff032e1b262a3597290c6c9117a006c91074a455c80a3a8089d93aed5bd48bd04bb30ad68fc87ff2bb4e5c20fe4bc0ad1b586aef3d1183170dec490c6bc82ec85d4031e292782f8778f21252a7cb6730da2d8fb175017e213eb10527b104bf333767cfed23c7c993391d9029f404947a793c37c1880a6be5cc26cc447ea020db8832239aa09aad9876ec17c4095857971ae2a508e3df70e1feaf8da5da72062d13c5200ab09f43e45d2ba1aac8a56c8e9d033d786cfe3ed7d2b30d8b6124afe2646c7af25b60ed02c3a50b2cb62637461e00b153b92f868f2194b46c49e9a1c9e987d5a32c0018b338777245e733183101027436ea41ea15f61537f38a35109fe6e53806c7913c69f186a86ba1d63997c5301c650089aa888cdf939573b0e7aceefff59757f8ba2275bd4469de04174f1b450a53017260b4bbc4a27cd8aac45d5ff2e5f5ab0eb14ffc59cf0fa10cd32363ef9a9fb9bf68431c4ee1c2ca15797ba4c18dbde24ae451797b25f13a73a231783f72b6f7a429026e191a49619057b250fab6b7010fc58dfcf922b04ad83756e2b8780100dccaafc65e4ef0357c6aae57f4f5c7906072a405407f7f7d43ae313bf54b8d6a8cf716f65390171e39c11c07b4c90e5ae7d5d114b1729d44a3bc58f6e40c413b972e8ab61a8e66502b30df35937f64957c0da0a4080ade204708de9f2c9ae2d\"} Return: {\"result\": true}","title":"Transfer from transparent address to shielded address"},{"location":"mechanism&algorithm/shielded-transaction/#transfer-from-shielded-address-to-shielded-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\":[{ \"hash\":\"1967c40954e8c6c4761c377a021ec3a6ad0545d8b4443f0ccdd1bec4dcbaa497\", \"index\":0 }], \"block_num\":1 } Return: {\"vouchers\": [{\"tree\": {\"left\": {\"content\": \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\"},\"right\": {\"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\"}},\"rt\": \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\"}],\"paths\": [\"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\"]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\": \"f9302122162221f59a7668e0d740245dcabaeb51dd157ba995eecd02f4b60b06\", \"nsk\": \"050fc9a42909e60fefb9d548fe12718cb759e3ee28d1b92ceaeaffc23d200a0d\", \"ovk\": \"a0da0cc6294dc900e93887b9f08ac42a162234359fdaf523b98382602c92513c\", \"shielded_spends\": [ { \"note\": { \"value\": 90000000, \"payment_address\": \"ztron1jld8fmvujrz2vgkc867zuwklmewy4ypw0wtwgweqs2paee0uhc8f3azy90el770arksa2kunl02\", \"rcm\": \"e48836a3cfae0e1b27b5230460199b46ebd88ad650fa9db5ac1eafb20b516302\" }, \"alpha\": \"2608999c3a97d005a879ecdaa16fd29ae434fb67b177c5e875b0c829e6a1db04\", \"voucher\": {\"tree\": {\"left\": {\"content\": \"7efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed35\"},\"right\": {\"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\"}},\"rt\": \"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\"}, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca155207efdc58818923de35ec35b4ef8e6a508f6952b9dd2a86af30a93dcd67e13ed350100000000000000\" } ], \"shielded_receives\": [ { \"note\": { \"value\": 80000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" } } ] } Return: {\"txID\":\"5a057fde4a1add0da38eda9978f6c3d035f7ca4807adae4b8c57e34499dfedfb\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"binding_signature\":\"b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c\",\"spend_description\":[{\"value_commitment\":\"ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529\",\"anchor\":\"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\",\"nullifier\":\"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\",\"rk\":\"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\",\"spend_authority_signature\":\"518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b08\",\"zkproof\":\"82eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad\"}],\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"6b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b925\",\"note_commitment\":\"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\",\"epk\":\"36b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f758\",\"c_enc\":\"1f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d56653\",\"c_out\":\"bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a0\",\"zkproof\":\"b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb409956\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"029b\",\"ref_block_hash\":\"027c45a7dc0875f7\",\"expiration\":1558691547000,\"timestamp\":1558691489292},\"raw_data_hex\":\"0a02029b2208027c45a7dc0875f740f88e86caae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20ddc8138f73323eff8d2f0367070c63f5e2659538fa431d6aa06d62696845e529122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac00182eda1b9baeaa5b08b3b33f157ae7a117e2561c702520e615a92e65098615eba1809a20e0b518fef286268d4c6f15a8eaa1b2a15630dd673fcfdde503a12daf80dfc157e6a0ea9333dedc2c365368847f2e7d8e3e648cc65cf5e805cd2343077051d70fcd140a8c665760f8cf066edb32036de7421e6755f3b64f44621aaa47d7e0f2012069ad374a7addb00b841b759b9e567c7b8b2642110eabd22358d22f4d3b4002a1ba4e9f6c018c58a5c1242acbc0169cf4aa0bf1423ed4a0b688928ad3240518def6477325d78b77b00aac6142bfc7b9a5f3eaaff5b8b4b8f2c46114ed85d1cc15a314028f58ce0c42e9f030f465063bbc0c41d01c92edd639d02575f6b0822c2070a206b082c7b9d01338d60fc4f5d434a152f9d8bf5c05c22422e23d3c74d36c2b9251220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a2036b1cb275228b3ab8275d6b04b3e2e93c04d5c0cc0ab1f41421093228b94f75822c4041f91dd5cdf0731c99318a2a87b169b7159230c4dee4e47e8b0717fc51c604ccc7a2df9c873a91903e59528756e2c2f3bd07ec5aa9b994ae5d8492ad779d6a00d4a71e7cb742c1ae416e4d983554fade0e04b0213880da2e96be402a5351ca3a5d78e5a975d20cb5ec1475c7ed35dc09c0b04a3a2e8a65595d8d77652f2881a4b93ed99cff007b3923b36967be6819721ed3daea2190fca744423ffb77d1a579f569bfb30c77ad0dadc0ca484a7a89318e15d50e540744927e19c5f6f08be2e97e77cd9c6ce3e05bdbeeb6f6d7b53f83a2283f56786ea8544c98b648300dfb8554e7a2611204598ddc37c4e61ce5881e63ab171ec83c1aedf97166596d014b1fc8193ff30d4e1c7aff8a3c3638e3a41b2a4040828a8d9568ab0fe4aef08a97872ca84c6c247635a1774efde8b8ed16177393879c8626a8ea0075fa2db5af58754d712ccd5a94dcf87c019faffa2c8f3143a9a9d540de4a705c87fc16dc5efa0c387f1e6ed9dad12b84f2ca7bb09cd95a10a2e412fc410aa7ebf676f6a74f03a7334a0a1697067cc88ccd968bdf6d8c20ed7d7bd9687bda89fb28c2849e45734d30395fead9f955649a3e3f1deb15eb02f28dad608d6d0ef2943ae9fd9e14f2507e9b871a3bebe5d15ba41a8dafc7dd18cd594eb69ad89192e776fc35a3d6eb48c2446d78258fed12cbb61200ddf0c3d2dbbf73fc82a4a2e96f619fa1ad479e6da108ddab453c02fa2fa8e96721585b791f6478966e36d2d75a6677858a64672dde9bb72feb64b58b7723c13c75f70cf7333c3331d46951633a2686b108e48215eb5d566532a50bbbf78f926fa2cae70ed68ef644487c32a82da230b5b8e2be26aa3102627ffc2db26f45f29c2379b20595ef26c60801f33508e17f03f66694cfdf15f606e5fabfe1d76593c1a8543593c10160f4ae4a032c001b5597534076320a98ef1a546253185011f17cc7d175a8937736bfe1daee1c33e25411346996e64d0bf1887c4553b49bb815cc8ef57b6811e7213b8c7f81c9853a4663703bf2b2989688a9ae5cabcc56c2316d411f6b910722169609d76890a2b0fc9b3fb536c3be378eb4100b925d9ae6a4a9e08eee591066f881c726a0416861ad41f69148619d187ee4d8f0f8b111da8f0d5bd4f781c2ddfdd7e4b3544b09ec2c9548cef85c28cd1129bf60f1f421c9ac7ed7f36b20984038fb33fcb4099562a40b77c81fdb8af64075a7d95e8f04ef28660bb2f3f2bfb884baf17abd87ae7f212de091016ae6147edbff280b52515a1a52515bd1fa118de2964412f87b6a5790c4080ade204708ccc82caae2d\"} Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: {\"txID\":\"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"binding_signature\":\"231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d7504\",\"spend_description\":[{\"value_commitment\":\"f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140\",\"anchor\":\"72eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e\",\"nullifier\":\"29269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c\",\"rk\":\"c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf463\",\"spend_authority_signature\":\"2f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c08\",\"zkproof\":\"984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b\"}],\"fee\":10000000,\"receive_description\":[{\"value_commitment\":\"3f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd3595\",\"note_commitment\":\"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\",\"epk\":\"3ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c\",\"c_enc\":\"4fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df040\",\"c_out\":\"5fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e\",\"zkproof\":\"b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b\"}]},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"0328\",\"ref_block_hash\":\"833c24d9f1019cd0\",\"expiration\":1558691970000,\"timestamp\":1558691911355},\"raw_data_hex\":\"0a0203282208833c24d9f1019cd040d0f79fcaae2d5adb0b083312d60b0a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e7472616374129c0b1a8d030a20f4c543df8f0fe9b71b1bbd6aa2f06f87e07605dcd339b0eaa48afd9e2488b140122072eca442bd775b022636fb9ae967c8e749c002660133e76193680d7f8b81fc0e1a2029269506e140e7cc70699443c9b80eb161048ec0126e308d458245991242478c2220c76c88d21edb0f5b2b04c960668cf1053feda5954a00d70e7d329025323bf4632ac001984779ad18c87d71dd79b78564e49c1c18d6f871ef45f79bdb012f73439d6402593dd7cda308d9d5412e2b64b0be461192eb2a8d2ffdcc700475a1c8b8912220f628af41bf44a7c010a8dda2a65f98b4aaf8c375c4046afd1af3e6bbe4b33b9210c68298f46999322174b9ba76b0be4d6ef2c74ff5d16370a8c30fa17c5c3bbeab217610de5cc680b1d64d557c4d53a4a3f73294699ac6a00b37c3d8076a20362ab09c77c94f08bb00db2648ade72f224821ecc190627222cf58130b9bcf639b32402f50449f92e4bf541c9ba7d82b93f6dd416208449ea8996dc45614c1cb90a7911264fece30446da875d8a864224f1a3870e3654ec8a4005305faa329224f4c0822c2070a203f4465801b357f9b8334eb3025bd8b3cd84247355c099133c08d53a8cffd35951220e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f021a203ece31615aec76e7711e25b05b05f5b7fb99d75f3812fe56702291633e5f474c22c4044fc57e65bfdd91e2ae0284cfc2926d5df63d51b8f864e9191f368404db390e28ce15fefc9bd210aca4e7f42b30140bc4b1650d9a79bcbfb1670288c68d4678ba5c34266ce1bd4fd1f4e4040508b072cdca87d69e4921af8c8305f982aa7f37897a29c69cce06c311eafb2ef5928f07d5b8f207e5f46c32237f6e9b0eadc2597e0cd8d884cd3f4a35d86145e75565913b9d4a2e613523c9f377fe3bdf6f1d9e6789605e6bdaf9526412632e52a1994fec98dd086596c62ba028508d45933943f3446c83f463f56e860f29d2ea0eb3b87a55a0602974b7df6b58905872cb97a757f24515f05d2b12d932a0ac038e0c0b15b9c8b324c8e31d4ddf8bf39bfb65bd9d495eac1818b281822c9ad85adbe8a90f62adfbb6723fae7a7d91760a5b2d146f180d5ca4d85653449089f4788459752e899abd4abd395842e8b5315dd3738eee0b4e0f758698aabb92df587b703e85774048f290ea366696de3dde665eefb6fce6c2776e4e9ad18662b8d95af4203a10e9af54085ee498c77ad7e7b5824f91aaeb8f138d8c90d95f57e71dc15c177b602c45e38f12e402cc65c2c55b80c9a7d908332baa30b2871a0d6cf417bcaf0be6ae5c451c2468e945273151da500aaccd7235a29c7fcd0da4ac4d6ceefda59cf568f7a362b49654a5793c552bd970681a6489a1951ad75e22215b22d5cd511a030d751892b4b5746d66f048d6b6889c2ddcd5da908417b91ef52c0507b2ce8b1214567b71963c5d6ace1f6e858ce02b11fcf0f839cbe8183fa71b9a239f70c5e98642f6e9b9b6eb31f12a752829ebecf0f12df0402a505fc1926bb6501f8ec4dc796d56786d7f019db9e43ccde07bbbddd95444df4f099310ef3f8d86a0a25ff72de0385563e44b9cb9e5e477299891959d24060a3b08b41aa36c29ce7297f0806a74f11aa99e32c001b924ae84aba3af2c4d6529c22ebd6ba900ac63c629723e035ab843295d41aec1e9ebb2906fa7471473dbdae7e182fbd7a9f14a2f599a79456a3dbb949203d9923c3c3600225f12217e38b69b88a080b5b5751d78ac84375c9a03ad0bc61492850c49488a654c376c49701abdde20d5658bce851e9a6fd1bee5429b9b4d4b55ed1eb888a43f435740b8f063ea6e2e7e81b53f12e67e3eac60020aab5c3ff45d34ff2c3dde4eb76ed2893df22232993deb1b9397d1d4f9cc1eb8405f7cbef5a24b2a40231cc2ddbf2715b51d07ed63e142ad874e7e173ec0c5d681b49e3060ca33bd65cf39921355dfaacc62dac7aa810c49daafbf8db8a1adc168da4a833eba0d75044080ade20470bbad9ccaae2d\"} Return: {\"result\": true}","title":"Transfer from shielded address to shielded address"},{"location":"mechanism&algorithm/shielded-transaction/#transfer-from-shielded-address-to-transparent-address","text":"Step 1. Call api: wallet/getmerkletreevoucherinfo to get the voucher of the shield address, this info will be used when create shielded transaction Method: Post Parameter: { \"out_points\":[{ \"hash\":\"791d30b7123448a54c56407a11857d4f3885cb699a071ee5f265f7db408dec6c\", \"index\":0 }], \"block_num\":1 } Return: {\"vouchers\": [{\"tree\": {\"left\": {\"content\": \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\"},\"parents\": [{\"content\": \"c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf61\"}]},\"rt\": \"8bdf96ac1241f30d5cd54d4ece7f10867d9eef854121ef77d1015f0ab2a26b1b\"}],\"paths\": [\"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420c835053e32be73852e67a65f4cd40407a11f4a7a38bb84b8d3e8a1f57acdbf612001000000000000000000000000000000000000000000000000000000000000000200000000000000\"]} Step 2. Call api: wallet/createshieldedtransaction to create transaction Method: Post Parameter: { \"ask\": \"653b3a3fdd40b60d2f53ba121df8840f6590384993f8fa9a0ecb0dfb23496604\", \"nsk\": \"428ff3c9e101dc1fca08f7b0e3387b23b68016746ae565aefc19d112b696db01\", \"ovk\": \"1274dcc5c7307bf0fd0ead466e9dd5641fed4a51391f681862370e2f2654cc61\", \"shielded_spends\": [ { \"note\": { \"value\": 80000000, \"payment_address\": \"ztron1wd46s6fwmz99gulqpxul6zffqtevzfpl93ng3s5834fhwf6e7w5l6zmjhmpvtwsc4wxa7dusmvr\", \"rcm\": \"ccced07d36641fc93cba33cddda7064cb82f6962a0bdf15a4240a4a742770e03\" }, \"alpha\": \"3ad5406efd6efcd81d27696d5f91efc07ba5c98ea6fb0f787b93e557b51df405\", \"voucher\": { \"tree\": { \"left\": { \"content\": \"f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b62\" }, \"right\": { \"content\": \"e4d02525ef586e77765e5cde77c4a25f8393508e749c2398aa91b8cea0a14f02\" } }, \"rt\": \"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\" }, \"path\": \"2020b2eed031d4d6a4f02a097f80b54cc1541d4163c6b6f5971f88b6e41d35c538142012935f14b676509b81eb49ef25f39269ed72309238b4c145803544b646dca62d20e1f34b034d4a3cd28557e2907ebf990c918f64ecb50a94f01d6fda5ca5c7ef722028e7b841dcbc47cceb69d7cb8d94245fb7cb2ba3a7a6bc18f13f945f7dbd6e2a20a5122c08ff9c161d9ca6fc462073396c7d7d38e8ee48cdb3bea7e2230134ed6a20d2e1642c9a462229289e5b0e3b7f9008e0301cbb93385ee0e21da2545073cb582016d6252968971a83da8521d65382e61f0176646d771c91528e3276ee45383e4a20fee0e52802cb0c46b1eb4d376c62697f4759f6c8917fa352571202fd778fd712204c6937d78f42685f84b43ad3b7b00f81285662f85c6a68ef11d62ad1a3ee0850200769557bc682b1bf308646fd0b22e648e8b9e98f57e29f5af40f6edb833e2c492008eeab0c13abd6069e6310197bf80f9c1ea6de78fd19cbae24d4a520e6cf3023208d5fa43e5a10d11605ac7430ba1f5d81fb1b68d29a640405767749e841527673206aca8448d8263e547d5ff2950e2ed3839e998d31cbc6ac9fd57bc6002b15921620cd1c8dbf6e3acc7a80439bc4962cf25b9dce7c896f3a5bd70803fc5a0e33cf00206edb16d01907b759977d7650dad7e3ec049af1a3d875380b697c862c9ec5d51c201ea6675f9551eeb9dfaaa9247bc9858270d3d3a4c5afa7177a984d5ed1be245120d6acdedf95f608e09fa53fb43dcd0990475726c5131210c9e5caeab97f0e642f20bd74b25aacb92378a871bf27d225cfc26baca344a1ea35fdd94510f3d157082c201b77dac4d24fb7258c3c528704c59430b630718bec486421837021cf75dab65120ec677114c27206f5debc1c1ed66f95e2b1885da5b7be3d736b1de98579473048204777c8776a3b1e69b73a62fa701fa4f7a6282d9aee2c7a6b82e7937d7081c23c20ba49b659fbd0b7334211ea6a9d9df185c757e70aa81da562fb912b84f49bce722043ff5457f13b926b61df552d4e402ee6dc1463f99a535f9a713439264d5b616b207b99abdc3730991cc9274727d7d82d28cb794edbc7034b4f0053ff7c4b68044420d6c639ac24b46bd19341c91b13fdcab31581ddaf7f1411336a271f3d0aa52813208ac9cf9c391e3fd42891d27238a81a8a5c1d3a72b1bcbea8cf44a58ce738961320912d82b2c2bca231f71efcf61737fbf0a08befa0416215aeef53e8bb6d23390a20e110de65c907b9dea4ae0bd83a4b0a51bea175646a64c12b4c9f931b2cb31b4920d8283386ef2ef07ebdbb4383c12a739a953a4d6e0d6fb1139a4036d693bfbb6c20ffe9fc03f18b176c998806439ff0bb8ad193afdb27b2ccbc88856916dd804e3420817de36ab2d57feb077634bca77819c8e0bd298c04f6fed0e6a83cc1356ca15520f21a987214b4aa8f041e6a8fde656396dbbf7ce6ee3394b6f9fbfb43f0e39b620100000000000000\" } ], \"transparent_to_address\": \"41A7D8A35B260395C14AA456297662092BA3B76FC0\", \"to_amount\": 70000000 } Return: {\"txID\":\"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"to_amount\":70000000,\"binding_signature\":\"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\",\"spend_description\":[{\"value_commitment\":\"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\",\"anchor\":\"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\",\"nullifier\":\"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\",\"rk\":\"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\",\"spend_authority_signature\":\"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\",\"zkproof\":\"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\"}],\"fee\":10000000,\"transparent_to_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\"},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"00dc\",\"ref_block_hash\":\"a45c748f93fa2854\",\"expiration\":1558928754000,\"timestamp\":1558928695327},\"raw_data_hex\":\"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\"} Step 3. Call api: wallet/broadcasttransaction to broadcast this transaction(no need to sign this transaction) Method: Post Parameter: {\"txID\":\"4dbdc95574a155434baeaf5e690e2d0c77a2b883a048d8d0103ab5c7fed8d866\",\"raw_data\":{\"contract\":[{\"parameter\":{\"value\":{\"to_amount\":70000000,\"binding_signature\":\"780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203\",\"spend_description\":[{\"value_commitment\":\"086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd9\",\"anchor\":\"774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a567\",\"nullifier\":\"fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587\",\"rk\":\"41132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d4\",\"spend_authority_signature\":\"b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f30207\",\"zkproof\":\"b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee1\"}],\"fee\":10000000,\"transparent_to_address\":\"41a7d8a35b260395c14aa456297662092ba3b76fc0\"},\"type_url\":\"type.googleapis.com/protocol.ShieldedTransferContract\"},\"type\":\"ShieldedTransferContract\"}],\"ref_block_bytes\":\"00dc\",\"ref_block_hash\":\"a45c748f93fa2854\",\"expiration\":1558928754000,\"timestamp\":1558928695327},\"raw_data_hex\":\"0a0200dc2208a45c748f93fa285440d08a94bbaf2d5ab204083312ad040a35747970652e676f6f676c65617069732e636f6d2f70726f746f636f6c2e536869656c6465645472616e73666572436f6e747261637412f3031a8d030a20086c712a60d5aa0d16276fb18b5504a875d97cecb2a0afa8219c8031aec94bd91220774d05ec02749475672a94a8fb2daaa11c323defa09df121b7359353f0c3a5671a20fa07f704bd34a8a7c1804601f322e6c1415247bfaa2f0d04715b9b4ac65b3587222041132c4e6bc24faae1cb8cdee2c7f84bd4b3aa27e50c099ca205c1c0538ca2d42ac001b3552325eb9212097ba3f56a4e0770c92cd28a8d6974e3a30436115b2a49adae7e1f49a0f2920042145bfe4a127ada22b3000ba0faa15b408340ca5c377943e3b3c8566ad471d84321b9d24c0a47b6b42b83d562523b07a16401cb5f4e51aa040b1300f443d963150db7f08b2606f3e17ba386d1308720c20901d74e8b94b47a78c00f416c71b4fffed1fd6d7b41ebb0993bbd1fa05754514d05575e09ce8f6a6438b8b158a1067d01b195c6631b25434f64360aedcdcfacb163efe866a05ee13240b928f855d397ab758b60251ee3ce40f951df51a6111064ad90fe4aa467cd69ec649c55ebb59c034c0c72daca0e9063da72383108942c79f7bd1b0f6b22f302072a40780be5a118c7b96847a6b1932f1ab6f559ce3648e321821f22570dbde7d59c58559aae93a2f334537544b6c85218c83397b0779926247848560c3e9ef5ba8203321541a7d8a35b260395c14aa456297662092ba3b76fc03880bbb0214080ade204709fc090bbaf2d\"} Return: {\"result\": true}","title":"Transfer from shielded address to transparent address"},{"location":"mechanism&algorithm/sr/","text":"How to Become a Super Representative In TRON network, any account can apply to become a witness. Every account can vote for witnesses. The top 27 witnesses are called SR, the witnesses from 28th to 127th are called Partner, the witnesses after 128th are called Candidates. Only SR can produce blocks. The votes will be counted every 6 hours, so super representatives may also change every 6 hours. To prevent vicious attack, TRON network burns 9999 TRX from the account that applies to become a super representative candidate. Super Representatives Election To vote, you need to have TRON Power(TP). To get TRON Power, you need to freeze TRX. Every 1 frozen TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unfreeze your frozen TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): freezebalance 10,000,000 3 // Freeze 10 TRX to get 10 TRON Power(TP) votewitness witness1 4 witness2 6 // Vote 4 votes for witness1, 6 votes for witness2 votewitness witness1 3 witness2 7 // Vote 3 votes for witness1, 7 votes for witness2 The final output above is: Vote 3 votes for witness1, 7 votes for witness2 Witnesses Brokerage The default ratio is 20%, which can be modified by the witnesses. If a witness get 20% of the reward, and the other 80% will be awarded to the voters. If the brokerage ratio is set to 100%, the rewards are all obtained by the witness; if set to 0, the rewards are all sent to the voters. Reward for Witnesses Votes Reward: Vote rewards are 160 TRX every block, with a block generated every 3 seconds, the total vote rewards per day is 4,608,000 TRX. For each SR and Partner, the daily Vote Rewards = 4,608,000 * ( votes / total votes) x 20% TRX Block Producing Reward: Every time after a super representative produces a block, it will be reward 16 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 168,192,000 TRX in total. Every time after a super representative produces a block, the 16 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours. 16 (TRX/block) * 28,800 (blocks/day) = 460,800 (TRX/Day) For each super representative, the daily Block Rewards = (460,800 / 27) x 20% TRX Reward may be less than the theoretical number due to missed blocks and maintenance period. Reward for Voters If you vote for a Super Representative: the daily Voter Rewards = (((the number of votes you vote to a witness) * 4,608,000 / total votes) * 80%) + ((460,800 / 27) * 80%) * (the number of votes you vote to a witness) / (the total number of votes a witness receives) TRX If you vote for a Partner: the daily Voter Rewards = (((the number of votes you vote to a witness) * 4,608,000 / total votes) * 80%) TRX Committee 1. What is Committee Committee can modify the TRON network parameters, like transacton fees, block producing reward amount, etc. Committee is composed of the current 27 super representatives. Every super representative has the right to start a proposal. The proposal will be passed after it gets more than 19 approves from the super representatives and will become valid in the next maintenance period. 2. Create a Proposal Only SRs, Partners and Candidates can create a proposal. The network parameters can be modified([min,max]). {0,1}: 1 means 'allowed' or 'actived', 0 means no. # Command Value 0 getMaintenanceTimeInterval (To modify the maintenance interval of SR) 6 Hours [3 * 27, 24 * 3600] s 1 getAccountUpgradeCost (To modify the cost of applying for SR account) 9999 TRX [0, 100000000000] TRX 2 getCreateAccountFee (To modify the account creation fee) 0.1 TRX [0, 100000000000] TRX 3 getTransactionFee (To modify the amount of TRX used to gain extra bandwidth) 10 Sun/Byte [0, 100000000000] TRX 4 getAssetIssueFee (To modify asset issuance fee) 1024 TRX [0, 100000000000] TRX 5 getWitnessPayPerBlock (To modify SR block generation reward) 16 TRX [0, 100000000000] TRX 6 getWitnessStandbyAllowance (To modify the rewards given to the top 27 SRs and the following 100 partners) 115200 TRX [0, 100000000000] TRX 7 getCreateNewAccountFeeInSystemContract (To modify the cost of account creation) 0 TRX 8 getCreateNewAccountBandwidthRate (To modify the consumption of bandwidth of account creation) 1 Bandwidth/Byte 9 getAllowCreationOfContracts (To activate the Virtual Machine (VM)) 1 {0, 1} 10 getRemoveThePowerOfTheGr (To remove the GR Genesis votes) 1 {0, 1} 11 getEnergyFee (To modify the fee of 1 energy) 10 Sun [0, 100000000000] TRX 12 getExchangeCreateFee (To modify the cost of trading pair creation) 1024 TRX [0, 100000000000] TRX 13 getMaxCpuTimeOfOneTx (To modify the maximum execution time of one transaction) 50 ms [0, 1000] ms 14 getAllowUpdateAccountName (To allow to change the account name) 0 {0, 1} 15 getAllowSameTokenName (To allow the same token name) 1 {0, 1} 16 getAllowDelegateResource (To allow resource delegation) 1 {0, 1} 18 getAllowTvmTransferTrc10 (To allow the TRC-10 token transfer in smart contracts) 1 {0, 1} 19 getTotalEnergyCurrentLimit (To modify current total energy limit) 50000000000 20 getAllowMultiSign (To allow the initiation of multi-signature) 1 {0, 1} 21 getAllowAdaptiveEnergy (To allow adaptive adjustment for total Energy) 0 {0, 1} 22 getUpdateAccountPermissionFee (To modify the fee for updating account permission) 100 TRX 23 getMultiSignFee (To modify the fee for multi-signature) 1 TRX 24 getAllowProtoFilterNum (To enable protocol optimization) 0 {0, 1} 26 getAllowTvmConstantinople (To support the new commands of Constantinople) 1 {0, 1} 27 getAllowShieldedTransaction (To enable shielded transaction) 0 {0, 1} 28 getShieldedTransactionFee (To modify shielded transaction fee) 10 TRX [0, 10000] TRX 29 getAdaptiveResourceLimitMultiplier (To modify the adaptive energy limit multiplier) 1000 [1, 10000] 30 getChangeDelegation (Propose to support the decentralized vote dividend) 1 {0, 1} 31 getWitness127PayPerBlock (Propose to modify the block voting rewards given to the top 27 SRs and the following 100 partners) 160 TRX [0, 100000000000] TRX 32 getAllowTvmSolidity059 (To allow TVM to support solidity compiler 0.5.9) 0 {0, 1} 33 getAdaptiveResourceLimitTargetRatio (To modify the target energy limit) 10 [1, 1000] Example (Using wallet-cli): createproposal id value id: the serial number (0 ~ 18) value: the parameter value Note: In TRON network, 1 TRX = 1000_000 SUN 3. Vote for a Proposal Proposal only support YES vote. Since the creation time of the proposal, the proposal is valid within 3 days. If the proposal does not receive enough YES votes within the period of validity, the proposal will be invalid beyond the period of validity. Yes vote can be cancelled. Example (Using wallet-cli): approveProposal id is_or_not_add_approval id: proposal id is_or_not_add_approval: YES vote or cancel YES vote 4. Cancel Proposal Proposal creator can cancel the proposal before it is passed. Example (Using wallet-cli): deleteProposal id id: proposal id 5. Query Proposal Query all the proposals list (ListProposals) Query all the proposals list by pagination (GetPaginatedProposalList) Query a proposal by proposal id (GetProposalById) For more api detail, please refer to Tron-http","title":"SR and Committee"},{"location":"mechanism&algorithm/sr/#how-to-become-a-super-representative","text":"In TRON network, any account can apply to become a witness. Every account can vote for witnesses. The top 27 witnesses are called SR, the witnesses from 28th to 127th are called Partner, the witnesses after 128th are called Candidates. Only SR can produce blocks. The votes will be counted every 6 hours, so super representatives may also change every 6 hours. To prevent vicious attack, TRON network burns 9999 TRX from the account that applies to become a super representative candidate.","title":"How to Become a Super Representative"},{"location":"mechanism&algorithm/sr/#super-representatives-election","text":"To vote, you need to have TRON Power(TP). To get TRON Power, you need to freeze TRX. Every 1 frozen TRX accounts for one TRON Power(TP). Every account in TRON network has the right to vote for a super representative candidate. After you unfreeze your frozen TRX, you will lose the responding TRON Power(TP), so your previous vote will be invalid. Note: Only your latest vote will be counted in TRON network which means your previous vote will be over written by your latest vote. Example (Using wallet-cli): freezebalance 10,000,000 3 // Freeze 10 TRX to get 10 TRON Power(TP) votewitness witness1 4 witness2 6 // Vote 4 votes for witness1, 6 votes for witness2 votewitness witness1 3 witness2 7 // Vote 3 votes for witness1, 7 votes for witness2 The final output above is: Vote 3 votes for witness1, 7 votes for witness2 Witnesses Brokerage The default ratio is 20%, which can be modified by the witnesses. If a witness get 20% of the reward, and the other 80% will be awarded to the voters. If the brokerage ratio is set to 100%, the rewards are all obtained by the witness; if set to 0, the rewards are all sent to the voters.","title":"Super Representatives Election"},{"location":"mechanism&algorithm/sr/#reward-for-witnesses","text":"Votes Reward: Vote rewards are 160 TRX every block, with a block generated every 3 seconds, the total vote rewards per day is 4,608,000 TRX. For each SR and Partner, the daily Vote Rewards = 4,608,000 * ( votes / total votes) x 20% TRX Block Producing Reward: Every time after a super representative produces a block, it will be reward 16 TRX. The 27 super representatives take turns to produce blocks every 3 seconds. The annual block producing reward is 168,192,000 TRX in total. Every time after a super representative produces a block, the 16 TRX block producing reward will be sent to it's sub-account. The sub-account is a read-only account, it allows a withdraw action from sub-account to super representative account every 24 hours. 16 (TRX/block) * 28,800 (blocks/day) = 460,800 (TRX/Day) For each super representative, the daily Block Rewards = (460,800 / 27) x 20% TRX Reward may be less than the theoretical number due to missed blocks and maintenance period.","title":"Reward for Witnesses"},{"location":"mechanism&algorithm/sr/#reward-for-voters","text":"If you vote for a Super Representative: the daily Voter Rewards = (((the number of votes you vote to a witness) * 4,608,000 / total votes) * 80%) + ((460,800 / 27) * 80%) * (the number of votes you vote to a witness) / (the total number of votes a witness receives) TRX If you vote for a Partner: the daily Voter Rewards = (((the number of votes you vote to a witness) * 4,608,000 / total votes) * 80%) TRX","title":"Reward for Voters"},{"location":"mechanism&algorithm/sr/#committee","text":"","title":"Committee"},{"location":"mechanism&algorithm/systemContracts/","text":"1. AccountCreateContract message AccountCreateContract { bytes owner_address = 1; bytes account_address = 2; AccountType type = 3; } owner_address : The owner of the current account. account_address : The target address to create. type : Account type. 0 means normal account; 1 means the Genesis account; 2 means smart contract account. 2. TransferContract message TransferContract { bytes owner_address = 1; bytes to_address = 2; int64 amount = 3; } owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of TRX to transfer. 3. TransferAssetContract message TransferAssetContract { bytes asset_name = 1; bytes owner_address = 2; bytes to_address = 3; int64 amount = 4; } asset_name : The token id to transfer. owner_address : The owner of the current account. to_address : The target address to transfer. amount : The amount of token to transfer. 4. VoteWitnessContract message VoteWitnessContract { message Vote { bytes vote_address = 1; int64 vote_count = 2; } bytes owner_address = 1; repeated Vote votes = 2; bool support = 3; } owner_address : The owner of the current account. vote_address : The SR or candidate's address. vote_count : The votes number. support : Constant true, not used. 5. WitnessCreateContract message WitnessCreateContract { bytes owner_address = 1; bytes url = 2; } owner_address : The owner of the current account. url : The website url of the witness. 6. AssetIssueContract message AssetIssueContract { message FrozenSupply { int64 frozen_amount = 1; int64 frozen_days = 2; } bytes owner_address = 1; bytes name = 2; bytes abbr = 3; int64 total_supply = 4; repeated FrozenSupply frozen_supply = 5; int32 trx_num = 6; int32 num = 8; int64 start_time = 9; int64 end_time = 10; int64 order = 11; // the order of tokens of the same name int32 vote_score = 16; bytes description = 20; bytes url = 21; int64 free_asset_net_limit = 22; int64 public_free_asset_net_limit = 23; int64 public_free_asset_net_usage = 24; int64 public_latest_free_net_time = 25; } owner_address : The owner of the current account. name : The token name to issue. abbr : The abbreviation of the token name. total_supply : The amount of token to issue. frozen_supply : The amount of token and frozen days to freeze. trx_num : trx_num/num defines the token price. num : trx_num/num defines the token price. start_time : ICO starts time. end_time : ICO ends time. order : Deprecated. vote_score : Deprecated. description : The description of the token. url : The website url of the token. free_asset_net_limit : The free bandwidth limit each account owns when transfers asset. public_free_asset_net_limit : The free bandwidth limit all the accounts can use. public_free_asset_net_usage : The free bandwidth usage of all the accounts. public_latest_free_net_time : The latest bandwidth consumption time of token transfer. 7. WitnessUpdateContract message WitnessUpdateContract { bytes owner_address = 1; bytes update_url = 12; } owner_address : The owner of the current account. update_url : The website url of the witness. 8. ParticipateAssetIssueContract message ParticipateAssetIssueContract { bytes owner_address = 1; bytes to_address = 2; bytes asset_name = 3; int64 amount = 4; } owner_address : The owner of the current account. to_address : The token owner address. account_name : The token id. amount : The amount of token to purchase. 9. AccountUpdateContract // Update account name. Account name is unique now. message AccountUpdateContract { bytes account_name = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_name : Account name. 10. FreezeBalanceContract message FreezeBalanceContract { bytes owner_address = 1; int64 frozen_balance = 2; int64 frozen_duration = 3; ResourceCode resource = 10; bytes receiver_address = 15; } owner_address : The owner of the current account. frozen_balance : The amount of TRX to freeze. frozen_duration : The freeze duration. resource : The type of resource get by freezing TRX. receiver_address : The account address to receive resource. 11. UnfreezeBalanceContract message UnfreezeBalanceContract { bytes owner_address = 1; ResourceCode resource = 10; bytes receiver_address = 13; } owner_address : The owner of the current account. resource : The type of resource to unfree. receiver_address : The account address to receive resource. 12. WithdrawBalanceContract message WithdrawBalanceContract { bytes owner_address = 1; } owner_address : The owner of the current account. 13. UnfreezeAssetContract message UnfreezeAssetContract { bytes owner_address = 1; } owner_address : The owner of the current account. 14. UpdateAssetContract message UpdateAssetContract { bytes owner_address = 1; bytes description = 2; bytes url = 3; int64 new_limit = 4; int64 new_public_limit = 5; } owner_address : The owner of the current account. description : The description of the token. url : The website url of the token. new_limit : The bandwidth consumption limit of each account when transfers asset. new_public_limit : The bandwidth consumption limit of the accounts. 15. ProposalCreateContract message ProposalCreateContract { bytes owner_address = 1; map<int64, int64> parameters = 2; } owner_address : The owner of the current account. parameters : The proposal. 16. ProposalApproveContract message ProposalApproveContract { bytes owner_address = 1; int64 proposal_id = 2; bool is_add_approval = 3; // add or remove approval } owner_address : The owner of the current account. proposal_id : The proposal id. is_add_approval : Whether to approve. 17. ProposalDeleteContract message ProposalDeleteContract { bytes owner_address = 1; int64 proposal_id = 2; } owner_address : The owner of the current account. proposal_id : The proposal id. 18. SetAccountIdContract // Set account id if the account has no id. Account id is unique and case insensitive. message SetAccountIdContract { bytes account_id = 1; bytes owner_address = 2; } owner_address : The owner of the current account. account_id : The account id. 19. CreateSmartContract message CreateSmartContract { bytes owner_address = 1; SmartContract new_contract = 2; } owner_address : The owner of the current account. new_contract : the smart contract. 20. TriggerSmartContract message TriggerSmartContract { bytes owner_address = 1; bytes contract_address = 2; int64 call_value = 3; bytes data = 4; } owner_address : The owner of the current account. contract_address : The contract address. call_value : The amount of TRX to send to the contract when triggers. data : The parameters to trigger the contract. 21. UpdateSettingContract message UpdateSettingContract { bytes owner_address = 1; bytes contract_address = 2; int64 consume_user_resource_percent = 3; } owner_address : The owner of the current account. contract_address : The address of the smart contract. consume_user_resource_percent : The percentage of resource consumption ratio. 22. ExchangeCreateContract message ExchangeCreateContract { bytes owner_address = 1; bytes first_token_id = 2; int64 first_token_balance = 3; bytes second_token_id = 4; int64 second_token_balance = 5; } owner_address : The owner of the current account. first_token_id : First token id. first_token_balance : First token balance. second_token_id : Second token id. second_token_balance : Second token balance. 23. ExchangeInjectContract message ExchangeInjectContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to inject. quant : The token amount to inject. 24. ExchangeWithdrawContract message ExchangeWithdrawContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to withdraw. quant : The token amount to withdraw. 25. ExchangeTransactionContract message ExchangeTransactionContract { bytes owner_address = 1; int64 exchange_id = 2; bytes token_id = 3; int64 quant = 4; } owner_address : The owner of the current account. exchange_id : The token pair id. token_id : The token id to sell. quant : The token amount to sell. 26. ShieldedTransferContract message ShieldedTransferContract { bytes transparent_from_address = 1; int64 from_amount = 2; repeated SpendDescription spend_description = 3; repeated ReceiveDescription receive_description = 4; bytes binding_signature = 5; bytes transparent_to_address = 6; int64 to_amount = 7; } transparent_from_address : The transparent address of the sender. from_amount : The amount to send. spend_description : Shielded spend information. receive_description : Shielded receive information. binding_signature : The binding signature. transparent_to_address : The transparent address of the receiver. to_amount : The amount to receive. message SpendDescription { bytes value_commitment = 1; bytes anchor = 2; bytes nullifier = 3; bytes rk = 4; bytes zkproof = 5; bytes spend_authority_signature = 6; } value_commitment : value commitment of spender's transfer amount. anchor : root of the note commitment Merkle tree at some block. nullifier : nullifier of spender's note, to prevent double-spent. rk : public key, to verify spender's Spend Authorization Signature . zkproof : zero-knowledge proof of spender's note, prove that this note exists and could be spent. spend_authority_signature : the spender's Spend Authorization Signature . message ReceiveDescription { bytes value_commitment = 1; bytes note_commitment = 2; bytes epk = 3; bytes c_enc = 4; bytes c_out = 5; bytes zkproof = 6; } value_commitment : value commitment of receiver's transfer amount. note_commitment : commitment of the receiver's not. epk : ephemeral public key, in order to generate note's decryption key. c_enc : part of note ciphertext, encryption of diversifier, receiver's transfer amount, rcm, and memo. c_out : part of note ciphertext, encryption of the receiver's public key and ephemeral private key. zkproof : zero-knowledge proof of the receiver's note. 27. Multi Signatures Multi Signatures 28. ClearABIContract message ClearABIContract { bytes owner_address = 1; bytes contract_address = 2; } owner_address : The owner of the current account. account_address : The target contract address to clear ABI. 29. UpdateBrokerageContract message UpdateBrokerageContract { bytes owner_address = 1; int32 brokerage = 2; } owner_address : The owner of the current account. brokerage : Commission rate, from 0 to 100,1 mean 1%. 30. UpdateEnergyLimitContract message UpdateEnergyLimitContract { bytes owner_address = 1; bytes contract_address = 2; int64 origin_energy_limit = 3; } owner_address : The owner of the current account. contract_address : The contract address. origin_energy_limit : The target energy limit to change.","title":"System Contracts"},{"location":"mechanism&algorithm/trc10/","text":"TRON network support two types of token, one is TRC-20 token issued by smart contract, the other one is TRC-10 token issued by system contract. How to Issue a TRC-10 Token Http Api: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"trx_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN Participate TRC-10 Token Http Api: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token TRC-10 Token Transfer Http Api: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"TRC-10"},{"location":"mechanism&algorithm/trc10/#how-to-issue-a-trc-10-token","text":"Http Api: wallet/createassetissue Description: Issue a token demo: curl -X POST http://127.0.0.1:8090/wallet/createassetissue -d '{ \"owner_address\":\"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"name\":\"0x6173736574497373756531353330383934333132313538\", \"abbr\": \"0x6162627231353330383934333132313538\", \"total_supply\" :4321, \"trx_num\":1, \"num\":1, \"start_time\" : 1530894315158, \"end_time\":1533894312158, \"description\":\"007570646174654e616d6531353330363038383733343633\", \"url\":\"007570646174654e616d6531353330363038383733343633\", \"free_asset_net_limit\":10000, \"public_free_asset_net_limit\":10000, \"frozen_supply\":{\"frozen_amount\":1, \"frozen_days\":2} }' Parameter owner_address: Owner address, default hexString Parameter name: Token name, default hexString Parameter abbr: Token name abbreviation, default hexString Parameter total_supply: Token total supply Parameter trx_num: Define the price by the ratio of trx_num/num, Parameter num: Define the price by the ratio of trx_num/num Parameter start_time: ICO start time Parameter end_time: ICO end time Parameter description: Token description, default hexString Parameter url: Token official website url, default hexString Parameter free_asset_net_limit: Token free asset net limit Parameter public_free_asset_net_limit: Token public free asset net limit Parameter frozen_supply: Token frozen supply Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'trx_num' is SUN","title":"How to Issue a TRC-10 Token"},{"location":"mechanism&algorithm/trc10/#participate-trc-10-token","text":"Http Api: wallet/participateassetissue Description: Participate a token demo: curl -X POST http://127.0.0.1:8090/wallet/participateassetissue -d '{ \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"owner_address\":\"41e472f387585c2b58bc2c9bb4492bc1f17342cd1\", \"amount\":100, \"asset_name\":\"3230313271756265696a696e67\" }' Parameter to_address: The issuer address of the token, default hexString Parameter owner_address: The participant address, default hexString Parameter amount: Participate token amount Parameter asset_name: Token id, default hexString Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"Participate TRC-10 Token"},{"location":"mechanism&algorithm/trc10/#trc-10-token-transfer","text":"Http Api: wallet/transferasset Description: Transfer token demo: curl -X POST http://127.0.0.1:8090/wallet/transferasset -d '{\"owner_address\":\"41d1e7a6bc354106cb410e65ff8b181c600ff14292\", \"to_address\": \"41e552f6487585c2b58bc2c9bb4492bc1f17132cd0\", \"asset_name\": \"31303030303031\", \"amount\": 100}' Parameter owner_address: Owner address, default hexString Parameter to_address: To address, default hexString Parameter asset_name: Token id, default hexString Parameter amount: Token transfer amount Parameter permission_id: Optional, for multi-signature use Return: Transaction object Note: The unit of 'amount' is the smallest unit of the token","title":"TRC-10 Token Transfer"},{"location":"q&a/qa/","text":"TRON Network Design and Protocol Questions Ask: How can I generate an account? Answer: You can use Wallet-cli or Tronscan Ask: What is the network flow? Answer: Network flow depends on transaction volume. As a reference, the average size of a transaction currently is 200 bytes. Ask: After you create a token, how to change its status from 'not started yet' to 'participate'? Answer: You need to wait till the time reaches the start time of participation you set when create a token. After a token is created, only the token url and description can be modified. Ask: Is there a place to see if all the SuperNodes are producing blocks? Answer: Please refer to Tronscan Ask: Is the block producing time interval always remain the same? Answer: The current block producing time interval is 3 seconds. In the future, it may be improved to 1 second. Ask: Will the block producing reward reduce half? Answer: No. Ask: If one of the top 27 SuperNodes goes wrong, will it be removed from the SRs list? Answer: If people stop voting for it, it will drop out of the top 27 SRs. Ask: Is there a threshold to become a SR? Answer: When the amount of votes you get ranks into top 27, you will become a SR. Ask: 27 SRs shares the block producing reward equally or by their computing power? Answer: It has nothing to do with computing power. The reward is a fixed 32 TRX for each block produced. Ask: Will there be an over 50% computing power issue in TRON network? Answer: No. Ask: Will voting burns TRX? Answer: No. Ask: How long does SR's power last? Answer: Every 6 hours, the votes will be counted to check the qualifications of all the SRs. Ask: What is the proof of a transaction\uff1f Answer: Transaction hash. Ask: Why I Can't freeze TRX longer than 3 days Answer: Frozen duration must be 3 days now. It means you can not unfreeze until the 3 days duration expires. If you don't unfreeze after 3 days, the frozen TRX will remain in frozen status until you unfreeze it. Ask: How to watch my account for transactions Answer: To meet your needs, you can use TRON event subscription plugin. For more detail, please refer to https://tronprotocol.github.io/documentation-EN/architecture/plugin/#tron-event-subscription Ask: How to calculate the transaction fee? Answer: please refer to https://tronprotocol.github.io/documentation-EN/mechanism&algorithm/resource/ Ask: How to calculate the number of bytes of transactions? Answer: tx-size = grpcClient.getTransactionById(txId).get().getSerializedSize() + 60 Ask: How to reset my vote? Answer: You need to vote again, set your votes number to 0. Configuration Questions Ask: If I replace the field value of 'genesis.block.witnesses' with the address generated in Tronscan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? Answer: No need to delete other addresses, these addresses will be a part of your net, but if you do not own the private keys of these addresses, they will act like abandoned addresses. Note: The addresses of Zion\u3001Sun and Blackhole can not be deleted, but can be modified. Ask: How can I specify the data storage path when start a node? Answer: You can add the data storage path when you start the node, like: java -jar FullNode.jar -c config.conf -d /data/output Ask: Is there any config file option, which I can use for sending logs to stdout? Answer: Steps to send logs to stdout: Download https://github.com/tronprotocol/java-tron/blob/develop/src/main/resources/logback.xml Uncomment the configuration: appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\" Go to the configuration: root level=\"INFO\" uncomment the configuration: appender-ref ref=\"STDOUT\" comment the configuration: appender-ref ref=\"ASYNC\" Move logback.xml to the same directory with FullNode.jar Launch FullNode.jar with additional parameter: --log-config logback.xml, for example: java -jar FullNode.jar --log-config logback.xml Ask: How to change log level Answer: The log level is defined in logback.xml. Please set the root level to \"ERROR\" if you want to filter only error logs. Please refer to the configuration below. <root level=\"ERROR\"> <!--<appender-ref ref=\"STDOUT\"/>--> <appender-ref ref=\"ASYNC\"/> </root> <logger name=\"app\" level=\"ERROR\"/> <logger name=\"net\" level=\"ERROR\"/> <logger name=\"backup\" level=\"ERROR\"/> <logger name=\"discover\" level=\"ERROR\"/> <logger name=\"crypto\" level=\"ERROR\"/> <logger name=\"utils\" level=\"ERROR\"/> <logger name=\"actuator\" level=\"ERROR\"/> <logger name=\"API\" level=\"ERROR\"/> <logger name=\"witness\" level=\"ERROR\"/> <logger name=\"DB\" level=\"ERROR\"/> <logger name=\"capsule\" level=\"ERROR\"/> <logger name=\"VM\" level=\"ERROR\"/> Ask: How can I get asset from private net? Answer: In private network, you can set the initial account balance in config file. Please refer to below settings: genesis.block = { # Reserve balance assets = [ { accountName = \"TestA\" accountType = \"AssetIssue\" address = \"THRR7uvFbRLfNzpKPXEyQa8KCJqi59V59e\" balance = \"1000000000000000\" }, { accountName = \"TestB\" accountType = \"AssetIssue\" address = \"TBLZaw93rsnLJ1SWTvoPkr7GVg5ixn2Jv1\" balance = \"1000000000000000\" }, { accountName = \"TestC\" accountType = \"AssetIssue\" address = \"TJg8yZ4Co8RXsHmTWissmSL1VpL7dCybY1\" balance = \"1000000000000000\" } ] Build Questions Ask: java-tron build failed with unit test issue Answer: Please use './gradlew build -x test' to skip the test cases. Deployment Questions Ask: How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? Answer: Java-tron does not provide a default api to test. Once the service start, grpc commands can be sent. Based on that, there are several ways to test if the deployment is successful. You can also use the following command to test: \u2028 - tail -f logs/tron.log |grep \"MyheadBlockNumber\" Ask: When to deploy private environment, what's the relationship of SuperNode and FullNode? Should I firstly deploy a SuperNode, and then deploy a FullNode\uff1f Answer: Under private environment, there should be at least one SuperNode, there is no amount limit for FullNode. Ask: How to know wether my test SuperNode is running or not? Answer: Using the following command - tail -f logs/tron.log |grep \"Try Produce Block\" Ask: Can SolidityNode and FullNode be deployed in one machine? Will they share the data? Answer: They can be deployed in one machine. You can specify the data storage path in configuration file db.directory = \"database\"\uff0cindex.directory = \"index\" . You can run FullNode.jar and SolidityNode.jar in different paths to separate the data and log. Remember to change the port in config.conf , because two nodes can not work using the same port. SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only. Development Questions Nodes Running Questions Ask: As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f Answer: If it is related to ip list: You need to update 'seed.ip' in config.conf, if it is the same as your public ip, and your computer is connected to the internet, it will try to connect other nodes, even if it fails to connect, the ip list will be stored into DB. If it is related to block and transaction: Under private environment, you need to modify the p2p version and parent hash. If they are the same as MainNet or TestNet, and the computer is connected to internet, the node will sync data from public node. Ask: Under private environment, should I submit application information to TRON to become a SR? Answer: Under private environment, no need to submit application information to TRON to become a SR. Ask\uff1aWhich service port should be public to public network? Answer: Default port 18888, 50051 Ask: At the worst scenario, if the SuperNode can not be connected, the maximum time it allows the SuperNode to recover its service\uff1f Answer: The internet connection recovery time only depends on the recovery of SuperNode itself, has nothing to do with internet situation. Ask: Does SolidityNode sync data from FullNode? Answer: Yes. Ask: Does a node have wallet function? Answer: No, but the node provides wallet rpc api. Ask: Why does the block process time take so long? Answer: Java-tron need more RAM to process transactions. Test Net Questions Ask: We want to test our SuperNode's performance under test environment, do we need to be voted to become a SR under test environment? Answer: Yes. Under test environment, we can vote you to become SR. Ask: What is the defferent between Shasta and Test Net? Answer: to be answered Ask: Where can I get the test TRX? Answer: http://testnet.tronex.io/join/getJoinPage Smart Contract Questions Clients Questions Ask: How to sign transaction from offline node and broadcast to online node? Answer: You can use tronweb Ask: How to sync wallet-cli with wallet on Tronscan? Answer: By using wallet-cli api 'ImportWallet'. API Questions Ask: Is gateway connected to SolidityNode\uff1f Answer: Gateway can connect to SolidityNode and FullNode. Ask: What is the different between 'getTransactionById' and 'getTransactionInfoById'? Answer: The data they return is from different data modules. 'getTransactionById' focuses on general transaction data, while 'getTransactionInfoById' focuses on transaction fee data. Ask: How to broadcast raw transaction\uff1f Answer: You can use 'wallet/broadcasthex'. Ask: How to get token balance of an account? Answer: You can use the following wallet-cli api: triggercontract contractaddress balanceOf(address) \"youraddress\" false 0 0 0 # Errors Questions Ask: What does the following error message mean? 17:02:42.699 INFO [o.t.c.s.WitnessService] Try Produce Block 17:02:42.699 INFO [o.t.c.s.WitnessService] Not sync Answer: This message means your node does not sync with the network. Before producing blocks, it needs to sync data. You can use the following command to chek the block height. - tail -f logs/tron.log |grep \"MyheadBlockNumber\" Other Questions Ask: If the node is deployed in China, is there a firewall issue? Answer: 39.106.220.120 locates in Beijing, others not.","title":"Q&A"},{"location":"q&a/qa/#tron-network-design-and-protocol-questions","text":"Ask: How can I generate an account? Answer: You can use Wallet-cli or Tronscan Ask: What is the network flow? Answer: Network flow depends on transaction volume. As a reference, the average size of a transaction currently is 200 bytes. Ask: After you create a token, how to change its status from 'not started yet' to 'participate'? Answer: You need to wait till the time reaches the start time of participation you set when create a token. After a token is created, only the token url and description can be modified. Ask: Is there a place to see if all the SuperNodes are producing blocks? Answer: Please refer to Tronscan Ask: Is the block producing time interval always remain the same? Answer: The current block producing time interval is 3 seconds. In the future, it may be improved to 1 second. Ask: Will the block producing reward reduce half? Answer: No. Ask: If one of the top 27 SuperNodes goes wrong, will it be removed from the SRs list? Answer: If people stop voting for it, it will drop out of the top 27 SRs. Ask: Is there a threshold to become a SR? Answer: When the amount of votes you get ranks into top 27, you will become a SR. Ask: 27 SRs shares the block producing reward equally or by their computing power? Answer: It has nothing to do with computing power. The reward is a fixed 32 TRX for each block produced. Ask: Will there be an over 50% computing power issue in TRON network? Answer: No. Ask: Will voting burns TRX? Answer: No. Ask: How long does SR's power last? Answer: Every 6 hours, the votes will be counted to check the qualifications of all the SRs. Ask: What is the proof of a transaction\uff1f Answer: Transaction hash. Ask: Why I Can't freeze TRX longer than 3 days Answer: Frozen duration must be 3 days now. It means you can not unfreeze until the 3 days duration expires. If you don't unfreeze after 3 days, the frozen TRX will remain in frozen status until you unfreeze it. Ask: How to watch my account for transactions Answer: To meet your needs, you can use TRON event subscription plugin. For more detail, please refer to https://tronprotocol.github.io/documentation-EN/architecture/plugin/#tron-event-subscription Ask: How to calculate the transaction fee? Answer: please refer to https://tronprotocol.github.io/documentation-EN/mechanism&algorithm/resource/ Ask: How to calculate the number of bytes of transactions? Answer: tx-size = grpcClient.getTransactionById(txId).get().getSerializedSize() + 60 Ask: How to reset my vote? Answer: You need to vote again, set your votes number to 0.","title":"TRON Network Design and Protocol Questions"},{"location":"q&a/qa/#configuration-questions","text":"Ask: If I replace the field value of 'genesis.block.witnesses' with the address generated in Tronscan in config.conf, do I need to delete other addresses? Do I need to delete the field 'url' and 'voteCount'? Answer: No need to delete other addresses, these addresses will be a part of your net, but if you do not own the private keys of these addresses, they will act like abandoned addresses. Note: The addresses of Zion\u3001Sun and Blackhole can not be deleted, but can be modified. Ask: How can I specify the data storage path when start a node? Answer: You can add the data storage path when you start the node, like: java -jar FullNode.jar -c config.conf -d /data/output Ask: Is there any config file option, which I can use for sending logs to stdout? Answer: Steps to send logs to stdout: Download https://github.com/tronprotocol/java-tron/blob/develop/src/main/resources/logback.xml Uncomment the configuration: appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\" Go to the configuration: root level=\"INFO\" uncomment the configuration: appender-ref ref=\"STDOUT\" comment the configuration: appender-ref ref=\"ASYNC\" Move logback.xml to the same directory with FullNode.jar Launch FullNode.jar with additional parameter: --log-config logback.xml, for example: java -jar FullNode.jar --log-config logback.xml Ask: How to change log level Answer: The log level is defined in logback.xml. Please set the root level to \"ERROR\" if you want to filter only error logs. Please refer to the configuration below. <root level=\"ERROR\"> <!--<appender-ref ref=\"STDOUT\"/>--> <appender-ref ref=\"ASYNC\"/> </root> <logger name=\"app\" level=\"ERROR\"/> <logger name=\"net\" level=\"ERROR\"/> <logger name=\"backup\" level=\"ERROR\"/> <logger name=\"discover\" level=\"ERROR\"/> <logger name=\"crypto\" level=\"ERROR\"/> <logger name=\"utils\" level=\"ERROR\"/> <logger name=\"actuator\" level=\"ERROR\"/> <logger name=\"API\" level=\"ERROR\"/> <logger name=\"witness\" level=\"ERROR\"/> <logger name=\"DB\" level=\"ERROR\"/> <logger name=\"capsule\" level=\"ERROR\"/> <logger name=\"VM\" level=\"ERROR\"/> Ask: How can I get asset from private net? Answer: In private network, you can set the initial account balance in config file. Please refer to below settings: genesis.block = { # Reserve balance assets = [ { accountName = \"TestA\" accountType = \"AssetIssue\" address = \"THRR7uvFbRLfNzpKPXEyQa8KCJqi59V59e\" balance = \"1000000000000000\" }, { accountName = \"TestB\" accountType = \"AssetIssue\" address = \"TBLZaw93rsnLJ1SWTvoPkr7GVg5ixn2Jv1\" balance = \"1000000000000000\" }, { accountName = \"TestC\" accountType = \"AssetIssue\" address = \"TJg8yZ4Co8RXsHmTWissmSL1VpL7dCybY1\" balance = \"1000000000000000\" } ]","title":"Configuration Questions"},{"location":"q&a/qa/#build-questions","text":"Ask: java-tron build failed with unit test issue Answer: Please use './gradlew build -x test' to skip the test cases.","title":"Build Questions"},{"location":"q&a/qa/#deployment-questions","text":"Ask: How to test if the deployment works normally, if there is a test api or command like redis: get ping return pong? Answer: Java-tron does not provide a default api to test. Once the service start, grpc commands can be sent. Based on that, there are several ways to test if the deployment is successful. You can also use the following command to test: \u2028 - tail -f logs/tron.log |grep \"MyheadBlockNumber\" Ask: When to deploy private environment, what's the relationship of SuperNode and FullNode? Should I firstly deploy a SuperNode, and then deploy a FullNode\uff1f Answer: Under private environment, there should be at least one SuperNode, there is no amount limit for FullNode. Ask: How to know wether my test SuperNode is running or not? Answer: Using the following command - tail -f logs/tron.log |grep \"Try Produce Block\" Ask: Can SolidityNode and FullNode be deployed in one machine? Will they share the data? Answer: They can be deployed in one machine. You can specify the data storage path in configuration file db.directory = \"database\"\uff0cindex.directory = \"index\" . You can run FullNode.jar and SolidityNode.jar in different paths to separate the data and log. Remember to change the port in config.conf , because two nodes can not work using the same port. SolidityNode is deprecated. Now a FullNode supports all RPCs of a SolidityNode. New developers should deploy FullNode only.","title":"Deployment Questions"},{"location":"q&a/qa/#development-questions","text":"","title":"Development Questions"},{"location":"q&a/qa/#nodes-running-questions","text":"Ask: As under private environment, why the log keeps updating with all other public nodes? What's the difference of private and public environment\uff1f Answer: If it is related to ip list: You need to update 'seed.ip' in config.conf, if it is the same as your public ip, and your computer is connected to the internet, it will try to connect other nodes, even if it fails to connect, the ip list will be stored into DB. If it is related to block and transaction: Under private environment, you need to modify the p2p version and parent hash. If they are the same as MainNet or TestNet, and the computer is connected to internet, the node will sync data from public node. Ask: Under private environment, should I submit application information to TRON to become a SR? Answer: Under private environment, no need to submit application information to TRON to become a SR. Ask\uff1aWhich service port should be public to public network? Answer: Default port 18888, 50051 Ask: At the worst scenario, if the SuperNode can not be connected, the maximum time it allows the SuperNode to recover its service\uff1f Answer: The internet connection recovery time only depends on the recovery of SuperNode itself, has nothing to do with internet situation. Ask: Does SolidityNode sync data from FullNode? Answer: Yes. Ask: Does a node have wallet function? Answer: No, but the node provides wallet rpc api. Ask: Why does the block process time take so long? Answer: Java-tron need more RAM to process transactions.","title":"Nodes Running Questions"},{"location":"q&a/qa/#test-net-questions","text":"Ask: We want to test our SuperNode's performance under test environment, do we need to be voted to become a SR under test environment? Answer: Yes. Under test environment, we can vote you to become SR. Ask: What is the defferent between Shasta and Test Net? Answer: to be answered Ask: Where can I get the test TRX? Answer: http://testnet.tronex.io/join/getJoinPage","title":"Test Net Questions"},{"location":"q&a/qa/#smart-contract-questions","text":"","title":"Smart Contract Questions"},{"location":"q&a/qa/#clients-questions","text":"Ask: How to sign transaction from offline node and broadcast to online node? Answer: You can use tronweb Ask: How to sync wallet-cli with wallet on Tronscan? Answer: By using wallet-cli api 'ImportWallet'.","title":"Clients Questions"},{"location":"q&a/qa/#api-questions","text":"Ask: Is gateway connected to SolidityNode\uff1f Answer: Gateway can connect to SolidityNode and FullNode. Ask: What is the different between 'getTransactionById' and 'getTransactionInfoById'? Answer: The data they return is from different data modules. 'getTransactionById' focuses on general transaction data, while 'getTransactionInfoById' focuses on transaction fee data. Ask: How to broadcast raw transaction\uff1f Answer: You can use 'wallet/broadcasthex'. Ask: How to get token balance of an account? Answer: You can use the following wallet-cli api: triggercontract contractaddress balanceOf(address) \"youraddress\" false 0 0 0 #","title":"API Questions"},{"location":"q&a/qa/#errors-questions","text":"Ask: What does the following error message mean? 17:02:42.699 INFO [o.t.c.s.WitnessService] Try Produce Block 17:02:42.699 INFO [o.t.c.s.WitnessService] Not sync Answer: This message means your node does not sync with the network. Before producing blocks, it needs to sync data. You can use the following command to chek the block height. - tail -f logs/tron.log |grep \"MyheadBlockNumber\"","title":"Errors Questions"},{"location":"q&a/qa/#other-questions","text":"Ask: If the node is deployed in China, is there a firewall issue? Answer: 39.106.220.120 locates in Beijing, others not.","title":"Other Questions"}]}